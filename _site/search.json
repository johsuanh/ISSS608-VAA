[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About\nHi! I’m Johsuan (Doreen) Huang, a finance and accounting professional in the beauty industry with a passion for uncovering insights through visual analytics. I hope you enjoy exploring my website!\n\n- Contact Info -\n\nLinkedin: johsuan-h\nEmail: johsuan.h@gmail.com"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01",
    "section": "",
    "text": "1.1 Learning Objectives:\n\nBasic principles and essential components of ggplot2.\nApply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphic.\n\n\n\n1.2 Load the Package and Import the Data\n\n\n\n\n\n\nThe code chunk below assumes that you already have pacman package installed. If not, please go ahead install pacman first.\n\n\n\n\n# Load the package\npacman::p_load(tidyverse)\n\n\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr(one of the tidyverse package) package.\n\n\n# Import the data\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe dataset contains examination grades for 3 subjects from a local school. We can use head() and summary() function inspect the dataset.\nThere are a total of 7 attributes. 4 of them are categorical data type and the other 3 are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\nhead(exam_data,5)\n\n# A tibble: 5 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n\n\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\n\n1.3 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR graphicsggplot 2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x=MATHS)) +\n  # use geom_histogram() to create a hist plot\n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"#E8C8DB\") +\n  # setting a clean background\n  theme_classic()+\n  ggtitle(\"Distribution of Maths scores\")+\n  # adjust the position and weight of the title\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nAlthough R Graphics’s code looks simpler than ggplot, according to Hadley Wickham, “The transferrable skills from ggplot2 are not the idiosyncracies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive”.\n\n\n1.4 Grammar of Graphics\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer.\nThe grammar of graphics is an answer to a question: ” What’s a statistical graphic? “\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\n1.5 Essential Grammatical Elements in ggplot2: data\nLet us call the ggplot() function using the code chunk below.\n\n\n\n\n\n\n\nA blank canvas appears.\nggplot() initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()\n\n\n\n\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\n\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nExamples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nBelow are the examples of geom:\n\n\nBarDotHistDensityBoxViolinPointCombined\n\n\n\ngeom_bar()\n\nggplot(data=exam_data,\n       aes(x=RACE))+\n  geom_bar(color=\"black\",\n           fill=\"#E8C8DB\")+\n  ggtitle(\"Distribution of Race\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_dotplot()\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\n\n\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS))+\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5,\n               fill=\"#E8C8DB\")+\n  # use scale_y_continuous() to turn off y-axis\n  scale_y_continuous(NULL,\n                     breaks=NULL)+\n  ggtitle(\"Distribution of Math Scores\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_histogram()\n\n#  default bin is 30\nggplot(data=exam_data, \n       aes(x=MATHS))+\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"#E8C8DB\")+\n  ggtitle(\"Distribution of Math Scores\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\ngeom_histogram() by Gender\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER))+\n  geom_histogram(bins=20,\n                 color=\"black\")+\n  # customize the fill color\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data,\n       aes(x=MATHS))+\n  geom_density()+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\ngeom_density() by Gender\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data,\n       aes(x=MATHS,colour = GENDER))+\n  geom_density()+\n    # customize the color\n  scale_color_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot()\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS,\n           # add \"fill\" to customize boxplot's colors\n           fill=GENDER))+\n         geom_boxplot()+\n    # customize the color\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() with notch &gt;&gt;&gt; shows median\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nggplot(data = exam_data,\n       aes(x = GENDER,\n           y = MATHS,\n           fill = GENDER))+\n  geom_boxplot(notch = TRUE)+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin()\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nggplot(data = exam_data,\n       aes(x = GENDER,\n           y = MATHS,\n           fill = GENDER))+\n  geom_violin()+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\n\ngeom_point()\ngeom_point() is especially useful for creating scatterplot.\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH,\n           color = GENDER))+\n  geom_point()+\n  scale_color_manual(values = c(\"#D9A4C3\", \"#A4A8D9\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\n\nCombine multiple geom objects\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot()and geom_point().\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER,\n           fill = GENDER))+\n  geom_point(position = \"jitter\", \n             size = 0.5)+\n  geom_boxplot()+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.8 Essential Grammatical Elements in ggplot2: stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n1.8.1 Working with stat_summary() or geom()\n\nstat_summary()geom_point()\n\n\n\nggplot(data = exam_data,\n       aes(x = GENDER, y = MATHS, fill = GENDER))+\n  geom_boxplot()+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  theme_classic()+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))+\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               color = \"black\",\n               size = 3\n               )\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = GENDER, y = MATHS, fill = GENDER))+\n  geom_boxplot()+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  theme_classic()+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))+\n  geom_point(stat = \"summary\",\n               fun = \"mean\",\n               color = \"black\",\n               size = 3\n               )\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.8.2 Adding a best fit curve on a scatter plot with geom_smooth()\n geom_smooth() is used to plot a best fit curve on the scatterplot:\n\nLOESS MehodLM Method\n\n\nLOESS method is the default method of geom_smooth().\nLOESS (Locally Estimated Scatterplot Smoothing) is a non-parametric regression method that fits a smooth curve to the data. This method is particularly useful when the relationship between variables is non-linear.\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH))+\n  geom_point()+\n  # default use loess regression method\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\nLM(Linear Model) refers to linear regression. It assumes the relationship between the dependent and independent variables are linear.\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH))+\n  geom_point()+\n  geom_smooth(method = \"lm\", size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.9 Essential Grammatical Elements in ggplot2: Facets\n\n1.9.1 Facets: Working with facet_wrap() and facet_grid()\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\nfacet_warp(): Creates facets by wrapping them into multiple rows or columns. It is useful for plotting a single variable (as below tab shown). We can control the number of rows or columns with the nrow and ncol arguments.\nfacet_grid(): Creates a grid of facets defined by one or two variables. It is useful for exploring relationships between two variables(as below tab shown).\n\n\nfacet_wrap()facet_grid()\n\n\n\nOne variable: Math by Class\n\n\nggplot(data = exam_data,\n       aes(x = MATHS))+\n  geom_histogram(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  facet_wrap(~ CLASS, nrow = 3)+\n  ggtitle(\"Distribution of Math Scores by Class\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\nTwo variables: Math by Class & RACE\n\n\nggplot(data = exam_data,\n       aes(x = CLASS, y = MATHS))+\n  geom_boxplot() +\n  stat_summary(geom = \"point\", fun = mean, colour =\"#C8DBE8\", size=2) + \n  facet_wrap(~ RACE)+\n  ggtitle(\"Distribution of Math Scores by Race and Class \")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nOne variable: Math by Class\n\n\nggplot(data = exam_data,\n       aes(MATHS))+\n  geom_histogram(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  facet_grid(~ CLASS)+\n  ggtitle(\"Distribution of Math Scores by Class \")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\nTwo variables: Math by Class & RACE\n\n\nggplot(data = exam_data,\n       aes(x = CLASS, y = MATHS))+\n  geom_boxplot() +\n  stat_summary(geom = \"point\", fun = mean, colour =\"#C8DBE8\", size=2) + \n  facet_grid(~ RACE)+\n  ggtitle(\"Distribution of Math Scores by Race and Class \")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.10 Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): fixed both the y-axis and x-axis in certain ranges.\ncoord_flip(): a cartesian system with the x and y flipped.\ncoord_fixed(): a cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot).\ncoord_quickmap(): a coordinate system that approximates a good aspect ratio for maps.\n\n\ncoord_flip()coord_cartesian()\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  ggtitle(\"Number of Students by Race\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        panel.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH))+\n  geom_point()+\n  geom_smooth(method = \"lm\", size=0.5)+\n  # fixes both the y-axis and x-axis range from 0-100\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))+\n  ggtitle(\"Relationship between English and Math\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        panel.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.11 Essential Grammatical Elements in ggplot2: themes\nThemes control elements of the graph not related to the data. For example:\n\nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n\nBuilt-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\ntheme_gray()theme_classic()theme_minimal()theme_bw()theme_dark()theme_linedraw()theme_void()\n\n\nThis is the default theme.\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_classic()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_minimal()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_bw()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        # adjust the color of panel grid\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_dark()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_linedraw()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        # adjust the color of panel grid\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_void()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        # adjust the color of panel grid\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.12 References\n\nKam, T.S. (2025). A Layered Grammar of Graphics: ggplot2 methods.\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Learn several ggplot2 extentions:\n\nUse ggrepel to control the placement of annotations on graphs\nUse ggthemes and hrbrthemes to create professional publication quality figure\nUse patchwork package to plot composite figure by combining ggplot2 graphs"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#learning-object",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#learning-object",
    "title": "Hands-on Exercise 02",
    "section": "",
    "text": "Learn several ggplot2 extentions:\n\nUse ggrepel to control the placement of annotations on graphs\nUse ggthemes and hrbrthemes to create professional publication quality figure\nUse patchwork package to plot composite figure by combining ggplot2 graphs"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 02",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\n\n2.2.1 Installing and loading the required libraries\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork,ggthemes, hrbrthemes,tidyverse) \n\n\n\n2.2.2 Importing data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe dataset contains examination grades for 3 subjects from a local school. We can use head() and summary() function inspect the dataset.\nThere are a total of 7 attributes. 4 of them are categorical data type and the other 3 are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\nhead(exam_data,5)\n\n# A tibble: 5 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n\n\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 02",
    "section": "2.3 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.3 Beyond ggplot2 Annotation: ggrepel\nOne of the challenges in plotting statistical graph is annotation, especially with large number of data points. As shown in the plots below, both labels and texts annotation are messy and overlapping, which makes them difficult for readers to understand.\n\ngeom_label()geom_text()\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm,size=0.5)+\n  geom_label(aes(label = ID),hjust=0.5,vjust=-0.5)+\n  coord_cartesian(xlim=c(0,100), ylim = c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  geom_point()+\n  geom_smooth(method=lm,size=0.5)+\n  geom_text(aes(label = ID),hjust=0.5,vjust=-0.5)+\n  coord_cartesian(xlim=c(0,100), ylim = c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is where ggrepel comes in. It is an extension of ggplot2 package, provides geoms for ggplot2 to repel overlapping text as in our examples above.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\nHowever, since ggrepel’s purpose is to prevent overlapping labels and texts, it will only display non-overlapping labels when there are too many to fit in the plot. To show more labels, we can adjust the parameter max.overlaps = 20 , the higher this number, the more labels will be displayed.\n\ngeom_label_repel()geom_text_repel()\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  # Use aes(color=cat) to seperate points by diff colors\n  geom_point(aes(color=GENDER))+\n  scale_color_manual(values = c(\"#D9A4C3\", \"#A4A8D9\"))+\n  geom_smooth(method=lm,size=0.5)+\n  # Use aes(color=cat) to seperate labels by diff colors\n  geom_label_repel(aes(label = ID, color = GENDER),\n                   size = 3,\n                   fontface=\"bold\",\n                   # change this setting to get more labels\n                   max.overlaps = 20)+\n  coord_cartesian(xlim=c(0,100), ylim = c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3 by Gender\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,y=ENGLISH))+\n  geom_point(aes(color=GENDER))+\n  scale_color_manual(values = c(\"#D9A4C3\", \"#A4A8D9\"))+\n  geom_smooth(method=lm,size=0.5)+\n  geom_text_repel(aes(label = ID,color = GENDER))+\n  coord_cartesian(xlim=c(0,100), ylim = c(0,100))+\n  ggtitle(\"English scores versus Maths scores for Primary 3 by Gender\")+\n  theme_classic()+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color behind the bar chart\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 02",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void():\n\ntheme_classic()theme_minimal()theme_bw()theme_dark()theme_light()theme_linedraw()theme_void()\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_classic()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_minimal()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_bw()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        # adjust the color of panel grid\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_dark()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_light()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_linedraw()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_void()+\n  ggtitle(\"Number of Students by Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"),\n        # adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.background = element_rect(fill = \"#f3f1e9\"))\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\n\ntheme_wsj()theme_economist()theme_fivethirtyeight()\n\n\n\nggplot(data=exam_data, aes(x = MATHS, y= ENGLISH))+\n  geom_point(aes(color = RACE))+\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj(base_size = 10) + scale_color_wsj()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS))+\n  geom_histogram(bins=20, boundary=100,color=\"grey25\",fill=\"grey90\")+\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS))+\n  geom_histogram(bins=20, boundary=100,color=\"grey25\",fill=\"grey90\")+\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_fivethirtyeight()\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.2 Working with hrbthemes package\nhrbrthemes package provides a base theme that focuses on typographic elements (default font type is Arial), including where various labels are placed as well as the fonts that are used.\n\n\n\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis and y-axis grid lines. The default setting is grid = “XY”, if user only want to remain horizontal grid lines, set grid = “Y”\naxis argument control whether to show or hide the x-axis and y-axis lines. By default, the axes are hidden.\n\n\n\n\n\n\n\n\n\n\nTo make the graph more informative and descriptive, we can use lab() function to add the subtitle and the source:\nlabs( title=” “, subtitle=” “, caption=” “, x=” “, y=” “)\n\nadd “\\n” to create line breaks when your subtitle is too long to be displayed on a single line.\n\n\n\n\nBelow are the plots using hrbthemes:\n\nDefaultCustomized\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100,\n                 color=\"grey25\", fill=\"grey90\") +\n  labs(title=\"Distribution of Maths scores\",\n    subtitle=\"The Math Score distribution for Primary 3 is left-skewed,\\n indicating that most students achieved high grades in math\",\n    x=\"Math Score\",\n    caption=\"Source: ISSS608 VAA\")+\n  theme_ipsum()+\n  theme(# adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100,\n                 color=\"grey25\", fill=\"grey90\") +\n  labs(title=\"Distribution of Maths scores\",\n    subtitle=\"The Math Score distribution for Primary 3 is left-skewed,\\n indicating that most students achieved high grades in math\",\n    x=\"Math Score\",\n    caption=\"Source: ISSS608 VAA\")+\n  theme_ipsum(grid = \"Y\",  axis_title_size = 10 , base_size = 12)+\n  theme(# adjust the background color of the whole plot\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 02",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nThere are several ggplot2 extensions provide functions to compose figure with multiple graphs, such as grid.arrange() of gridExtra package,  plot_grid() of cowplot package, and ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n2.5.1 Combining two ggplot2 graphs\nFirst, let’s draw several graphs:\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100,\n                 color=\"grey25\", fill=\"#E8C8DB\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")+\n  theme_classic()+\n  theme(plot.title = element_text(size = 12, face=\"bold\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, boundary = 100,\n                 color=\"grey25\", fill=\"#C8CBE8\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")+\n  theme_classic()+\n  theme(plot.title = element_text(size = 12, face=\"bold\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +  \n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores\")+\n  theme_classic()+\n  theme(plot.title = element_text(size = 12, face=\"bold\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\np1+p2\n\n\n\n\n\n\n\n\n\n\n2.5.2 Combining three or more ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n2.5.3 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\ntag_levels could be ‘I’, ‘A’, ‘1’\n\ntag_levels = ‘I’tag_levels = ‘A’tag_levels = ‘1’\n\n\n\n((p1/p2)|p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n((p1+p2)/p3) + \n  plot_annotation(tag_levels = 'A')\n\n\n\n\n\n\n\n\n\n\n\n((p1/p2)|p3) + \n  plot_annotation(tag_levels = '1')\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5.4 Adding subtitle and caption to the patchwork\nwe can also use plot_annotation() to add the title, subtitle and caption to the patchwork, and use theme() argument to cusomize the font size, font weight, background color and other visual parameters.\n\n\n\n\n\n\nHere we add theme() parameter in plot_annotation() to adjsut the element of patchwork’s title , subtitle…instead of using “&” or “+” to link functions.\nHowever, we can use “& theme()” after plot_annotation() to adjust the visual parameters of the graphs in the patchwork together.\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(\n    tag_levels = \"I\",\n    title = \"Exam Performance for Primary 3\",\n    subtitle = \"The plots show that there is a positive relationship between Math scores and English scores.\\nIn addtion, most students of Primary 3 got high scores on both subjects.\",\n    caption = \"Source: ISSS608 VAA\",\n    theme = theme(plot.title = element_text(size = 14, face = \"bold\"),\n    plot.background = element_rect(fill = \"#f3f1e9\", color = NA),\n    plot.margin = margin(10, 10, 10, 10))) &\n    theme(axis.title = element_text(size=8) # adjust all axis titles to size = 8\n          )\n\n\n\n\n\n\n\n\n\n\n2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, left=0.02, bottom =0.6, right=0.5, top=1)\n\n\n\n\n\n\n\n\n\n\n2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\np4 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, boundary = 100,\n                 color=\"grey25\", fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\np5 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, boundary = 100,\n                 color=\"grey25\", fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np6 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +  \n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores\")\n\n\n\n((p4 / p5) | p6) + \n    plot_annotation(\n    title = \"Exam Performance for Primary 3\",\n    subtitle = \"The plots show that there is a positive relationship between Math scores and English scores.\\nIn addtion, most students of Primary 3 got high scores on both subjects.\",\n    caption = \"Source: ISSS608 VAA\")& \n                    theme_economist() &\n                    theme(axis.title.x = element_text(size=8, margin = margin(t=5)), #above\n                          axis.title.y = element_text(size=8, margin = margin(r=5)),\n                          axis.text.x = element_text(size = 8),  \n                          axis.text.y = element_text(size = 6),\n                          plot.title = element_text(size = 11))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#reference",
    "title": "Hands-on Exercise 02",
    "section": "2.6 Reference",
    "text": "2.6 Reference\n\nR for Visual Analytics-Beyond ggplot2 Fundamentals\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html",
    "title": "Hands-on Exercise 03-2",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to:\n\nCreate animated data visualisation by using gganimate and plotly r packages\nReshape data by using tidyverse package\nProcess, wrangle and transform data by using dplyr package\n\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#overview",
    "title": "Hands-on Exercise 03-2",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to:\n\nCreate animated data visualisation by using gganimate and plotly r packages\nReshape data by using tidyverse package\nProcess, wrangle and transform data by using dplyr package\n\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#getting-started",
    "title": "Hands-on Exercise 03-2",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse, ggthemes, DT)\n\n\n\n4.2.2 Importing and Examing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWe first use read_xls of tidyverse package to import the document:\n\nglobalpop_raw &lt;- read_xls(\"data/GlobalPopulation.xls\",sheet=\"Data\") \n\nNext, we use function str() , head() from R, function summarise_all() and n_distinct() from dplyr to examine the data structure and variable types:\n\nThe dataset contains 6,204 observations with no missing values\n\n\n\nCountry: The dataset contains 222 countries stored as character data type\nYear: The data spans from 1996 to 1950 and stored as double data type\nYoung: Based on the data context, the “Young” variable represents the percentage of young people in the population with values ranging from 15.5% to 109.2%. It stored as double data type\nOld: Based on the data context, the “Old” variable represents the percentage of elderly people in the population with values ranging from 1% to 77.1% It stored as double data type\nPopulation: The values ranging from 3 K to 1,807,878.6 K within the data period\nContinent: The dataset contains 6 continenet stored as character data type\n\n\nstr(globalpop_raw)\n\ntibble [6,204 × 6] (S3: tbl_df/tbl/data.frame)\n $ Country   : chr [1:6204] \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" \"Afghanistan\" ...\n $ Year      : num [1:6204] 1996 1998 2000 2002 2004 ...\n $ Young     : num [1:6204] 83.6 84.1 84.6 85.1 84.5 84.3 84.1 83.7 82.9 82.1 ...\n $ Old       : num [1:6204] 4.5 4.5 4.5 4.5 4.5 4.6 4.6 4.6 4.6 4.7 ...\n $ Population: num [1:6204] 21560 22913 23898 25268 28514 ...\n $ Continent : chr [1:6204] \"Asia\" \"Asia\" \"Asia\" \"Asia\" ...\n\n\n\nhead(globalpop_raw)\n\n# A tibble: 6 × 6\n  Country      Year Young   Old Population Continent\n  &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;    \n1 Afghanistan  1996  83.6   4.5     21560. Asia     \n2 Afghanistan  1998  84.1   4.5     22913. Asia     \n3 Afghanistan  2000  84.6   4.5     23898. Asia     \n4 Afghanistan  2002  85.1   4.5     25268. Asia     \n5 Afghanistan  2004  84.5   4.5     28514. Asia     \n6 Afghanistan  2006  84.3   4.6     31057  Asia     \n\n\n\nglobalpop_raw %&gt;%\n  summarise_all(~n_distinct(.))\n\n# A tibble: 1 × 6\n  Country  Year Young   Old Population Continent\n    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;      &lt;int&gt;     &lt;int&gt;\n1     222    28   819   589       5791         6\n\n\n\n# check if there're any missing values\nany(is.na(globalpop_raw))\n\n[1] FALSE\n\n\n\nsummary(globalpop_raw)\n\n   Country               Year          Young             Old       \n Length:6204        Min.   :1996   Min.   : 15.50   Min.   : 1.00  \n Class :character   1st Qu.:2010   1st Qu.: 25.70   1st Qu.: 6.90  \n Mode  :character   Median :2024   Median : 34.30   Median :12.80  \n                    Mean   :2023   Mean   : 41.66   Mean   :17.93  \n                    3rd Qu.:2038   3rd Qu.: 53.60   3rd Qu.:25.90  \n                    Max.   :2050   Max.   :109.20   Max.   :77.10  \n   Population         Continent        \n Min.   :      3.3   Length:6204       \n 1st Qu.:    605.9   Class :character  \n Median :   5771.6   Mode  :character  \n Mean   :  34860.9                     \n 3rd Qu.:  22711.0                     \n Max.   :1807878.6                     \n\n\n\n\n4.2.3 Handling Data Issues\n\n\n4.2.3.1 Data Type Issues\n\nYear: Since year is a whole number rather than a decimal, we should transform its data type from double &lt;dbl&gt; to integer&lt;int&gt;.\nCountry and Continent: Since these two categorical variables will be analyzed further, we need to transform their data type from character &lt;chr&gt; to factor&lt;fctr&gt;. In R, factors are used to handle categorical data and ordered variable.\n\nHere, we use mutate_each_() of dplyr package to convert all character data type into factor, and use mutate of dplyr package to convert data values of Year field into integer.\n\ncol &lt;- c(\"Country\",\"Continent\")\n\nglobalpop_raw &lt;- read_xls(\"data/GlobalPopulation.xls\",sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)),col) %&gt;%\n  mutate(Year = as.integer(Year))\n  \nhead(globalpop_raw)\n\n# A tibble: 6 × 6\n  Country      Year Young   Old Population Continent\n  &lt;fct&gt;       &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;fct&gt;    \n1 Afghanistan  1996  83.6   4.5     21560. Asia     \n2 Afghanistan  1998  84.1   4.5     22913. Asia     \n3 Afghanistan  2000  84.6   4.5     23898. Asia     \n4 Afghanistan  2002  85.1   4.5     25268. Asia     \n5 Afghanistan  2004  84.5   4.5     28514. Asia     \n6 Afghanistan  2006  84.3   4.6     31057  Asia     \n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\",\"Continent\")\n\nglobalpop_raw &lt;- read_xls(\"data/GlobalPopulation.xls\",sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n  \nhead(globalpop_raw)\n\n# A tibble: 6 × 6\n  Country      Year Young   Old Population Continent\n  &lt;fct&gt;       &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;fct&gt;    \n1 Afghanistan  1996  83.6   4.5     21560. Asia     \n2 Afghanistan  1998  84.1   4.5     22913. Asia     \n3 Afghanistan  2000  84.6   4.5     23898. Asia     \n4 Afghanistan  2002  85.1   4.5     25268. Asia     \n5 Afghanistan  2004  84.5   4.5     28514. Asia     \n6 Afghanistan  2006  84.3   4.6     31057  Asia     \n\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\",\"Continent\")\n\nglobalpop_raw &lt;- read_xls(\"data/GlobalPopulation.xls\",sheet=\"Data\") %&gt;%\n  mutate(across(all_of(col), as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\nhead(globalpop_raw)\n\n# A tibble: 6 × 6\n  Country      Year Young   Old Population Continent\n  &lt;fct&gt;       &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt; &lt;fct&gt;    \n1 Afghanistan  1996  83.6   4.5     21560. Asia     \n2 Afghanistan  1998  84.1   4.5     22913. Asia     \n3 Afghanistan  2000  84.6   4.5     23898. Asia     \n4 Afghanistan  2002  85.1   4.5     25268. Asia     \n5 Afghanistan  2004  84.5   4.5     28514. Asia     \n6 Afghanistan  2006  84.3   4.6     31057  Asia     \n\n\n\n\n4.2.3.2 Data Quality Issues\nThe data summary statistics show that the maximum value of Young% is 109.2%, indicating inaccurate or incomplete data. This is problematic because Young% + Old% should be less than or equal to 100%. A value exceeding this would imply a negative Mid-aged%, which is neraly impossible and suggests inaccurate or missing data in this dataset.\n\nsummary(globalpop_raw)\n\n        Country          Year          Young             Old       \n Afghanistan:  28   Min.   :1996   Min.   : 15.50   Min.   : 1.00  \n Albania    :  28   1st Qu.:2010   1st Qu.: 25.70   1st Qu.: 6.90  \n Algeria    :  28   Median :2024   Median : 34.30   Median :12.80  \n Andorra    :  28   Mean   :2023   Mean   : 41.66   Mean   :17.93  \n Angola     :  28   3rd Qu.:2038   3rd Qu.: 53.60   3rd Qu.:25.90  \n Anguilla   :  28   Max.   :2050   Max.   :109.20   Max.   :77.10  \n (Other)    :6036                                                  \n   Population                Continent   \n Min.   :      3.3   Africa       :1568  \n 1st Qu.:    605.9   Asia         :1454  \n Median :   5771.6   Europe       :1344  \n Mean   :  34860.9   North America: 976  \n 3rd Qu.:  22711.0   Oceania      : 526  \n Max.   :1807878.6   South America: 336  \n                                         \n\n\nBelow are 63 observations with data accuracy issue. To maintain dataset’s integrity, we should remove these problematic countries records.\n\ndq_issues &lt;- subset(globalpop_raw, Young &gt; 100 | (Young + Old) &gt; 100)\n\ntable &lt;- DT::datatable(dq_issues, class= \"display\",\n              caption = \"Table 1: Observations with data quality issues\") %&gt;%\n  formatStyle(\n    columns = colnames(dq_issues), \n    fontSize = '12px', \n    fontFamily = 'Helvetica', \n    lineHeight = '1.2'\n  )\ntable\n\n\n\n\n\n\n\nAfter remove problematic records, there are 5,953 observations remained with 213 distinct countries.\n\nc_removed = unique(dq_issues$Country)\nglobalPop &lt;- subset(globalpop_raw, !(Country %in% c_removed))\nstr(globalPop)\n\ntibble [5,953 × 6] (S3: tbl_df/tbl/data.frame)\n $ Country   : Factor w/ 222 levels \"Afghanistan\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ Year      : int [1:5953] 1996 1998 2000 2002 2004 2006 2008 2010 2012 2014 ...\n $ Young     : num [1:5953] 83.6 84.1 84.6 85.1 84.5 84.3 84.1 83.7 82.9 82.1 ...\n $ Old       : num [1:5953] 4.5 4.5 4.5 4.5 4.5 4.6 4.6 4.6 4.6 4.7 ...\n $ Population: num [1:5953] 21560 22913 23898 25268 28514 ...\n $ Continent : Factor w/ 6 levels \"Africa\",\"Asia\",..: 2 2 2 2 2 2 2 2 2 2 ...\n\nsummary(globalPop)\n\n        Country          Year          Young            Old       \n Afghanistan:  28   Min.   :1996   Min.   :15.50   Min.   : 1.00  \n Albania    :  28   1st Qu.:2010   1st Qu.:25.50   1st Qu.: 7.10  \n Algeria    :  28   Median :2024   Median :33.40   Median :13.70  \n Andorra    :  28   Mean   :2023   Mean   :40.19   Mean   :18.39  \n Angola     :  28   3rd Qu.:2038   3rd Qu.:50.90   3rd Qu.:26.50  \n Anguilla   :  28   Max.   :2050   Max.   :94.80   Max.   :77.10  \n (Other)    :5785                                                 \n   Population                Continent   \n Min.   :      3.3   Africa       :1372  \n 1st Qu.:    597.8   Asia         :1399  \n Median :   5580.3   Europe       :1344  \n Mean   :  35028.8   North America: 976  \n 3rd Qu.:  22093.1   Oceania      : 526  \n Max.   :1807878.6   South America: 336  \n                                         \n\n\n\nglobalPop %&gt;% summarise_all(~n_distinct(.))\n\n# A tibble: 1 × 6\n  Country  Year Young   Old Population Continent\n    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;      &lt;int&gt;     &lt;int&gt;\n1     213    28   756   589       5549         6"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 03-2",
    "section": "4.3 Animated Data Visualisation: gganimate methods",
    "text": "4.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country))+\n  geom_point(alpha=0.7, show.legend = FALSE)+\n  scale_colour_manual(values = country_colors)+\n  scale_size(range= c(2,12))+\n  labs(title = 'Global Population Change from 1996 to 2050',\n       subtitle = 'Year:{frame_time}',\n       x = '% Aged',\n       y = '% Young')+\n  theme_economist(base_size = 8)\n\n\n\n\n\n\n\n\n\n\n4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year). frame_time is a special placeholder (dynamic title) in gganimate.\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\nggplot(globalPop, aes(x = Old, y= Young,\n                      size = Population, colour = Country))+\n  geom_point(alpha = 0.7, show.legend = FALSE)+\n  scale_colour_manual(values = country_colors)+\n  scale_size(range = c(2,12))+   # control point size to be 2~12\n  labs(title = 'Global Population Change from 1996 to 2050',\n       subtitle = 'Year:{frame_time}',   # {frame_time} is a special placeholder (dynamic title) in gganimate\n       x = '% Aged',\n       y = '% Young')+\n  transition_time(Year)+\n  ease_aes('cubic-in-out')+\n  theme_economist(base_size = 8)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 03-2",
    "section": "4.4 Animated Data Visualisation: plotly",
    "text": "4.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, we will create an animated bubble plot by using ggplotly() method.\n\n\n\n\n\n\nThings to learn from the code chunk\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, aes(x = Old, y = Young,\n                            size = Population, colour = Country))+\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors)+\n  # control the size of points from 2 to 12\n  scale_size(range = c(2,12))+\n  labs(title = 'Global Population Change from 1996 to 2050',\n       x = '% Aged', \n       y = '% Young')+\n  theme_wsj(base_size = 8) + \n  theme(axis.title.x = element_text(size = 12, face = \"bold\"),\n        axis.title.y = element_text(size = 12, face = \"bold\"))\n\nggplotly(gg)\n\n\n\n\n\n4.4.1.1 Improvements Needed\n\nLegend: Notice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\nColor: Although the “country_colors” palette from gapminder provides colors for 142 countries, our dataset contains 213 countries, causing many data points to appear in grey. To improve visual distinction, we should color code the data by “Continent” rather than “Country”.\nTooltips: To improve the readability of the plot, tooltips are customized with detailed infomations by using text().\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, aes(x = Old, y = Young,\n                            size = Population, colour = Continent,\n                            text = paste(\"Year:\",Year, # customize the content in tooltips\n                                         \"&lt;br&gt;Continent:\",Continent,\n                                         \"&lt;br&gt;Country:\", Country,\n                                         \"&lt;br&gt;Population:\", scales::comma(Population), \"K\",\n                                         \"&lt;br&gt;Old:\",round(Old,2),\"%\",\n                                         \"&lt;br&gt;Young:\",round(Young,2),\"%\")))+ \n  geom_point(aes(frame = Year),alpha = 0.7) +\n  scale_size(range = c(2,12))+\n  labs(title = 'Global Population Change from 1996 to 2050',\n       x = '% Aged', \n       y = '% Young')+\n  theme_wsj(base_size = 8)+ scale_color_wsj()+\n  theme(axis.title.x = element_text(size = 12, face = \"bold\"),\n        axis.title.y = element_text(size = 12, face = \"bold\"),\n        legend.position = 'none') # remove legend\n\n\nggplotly(gg, tooltip = \"text\")\n\n\n\n\n\n4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\nTo customized the layout of plot_ly(), we need to use layout().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, y= ~Young,\n          size = ~Population, color = ~Continent,\n          sizes = c(2,100),\n          frame = ~Year, text = ~Country,\n          hoverinfo = \"text\",\n          type = \"scatter\", mode = \"markers\") %&gt;%\n  layout(showlegend = FALSE,\n         title = list (text = \"Global Population Change from 1996 to 2050\",\n                       font = list(size = 15,family=\"Georgia\", face = \"bold\")),\n         xaxis = list(title = \"% Aged\", \n                      titlefont = list(size = 12, family = \"Georgia\")),\n         yaxis = list(title = \"% Young\", \n                      titlefont = list(size = 12, family = \"Georgia\")),\n         plot_bgcolor = \"#f3f1e9\",\n         paper_bgcolor = \"#f3f1e9\")\n\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03-2.html#reference",
    "title": "Hands-on Exercise 03-2",
    "section": "4.5 Reference",
    "text": "4.5 Reference\n\ngganimate - Getting Started\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 04",
    "section": "",
    "text": "In previous hand-on exercises, we have draw some popular statistical graphs, like histogram, boxplot, scatter plot and etc. In this hands-on exercise, we are going to learn new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#learning-outcome",
    "title": "Hands-on Exercise 04",
    "section": "",
    "text": "In previous hand-on exercises, we have draw some popular statistical graphs, like histogram, boxplot, scatter plot and etc. In this hands-on exercise, we are going to learn new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started",
    "title": "Hands-on Exercise 04",
    "section": "2 Getting Started",
    "text": "2 Getting Started\n\nLoading the packagesImporting the dataExamining the dataTransforming the data\n\n\nUse the pacman package p_load() to check, install and launch the following R packages:\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse, patchwork)\n\n\n\n\n\n\n\n\nLibrary\nDescription\n\n\n\n\nggridges\na ggplot2 extension specially designed for plotting ridgeline plots\n\n\nggdist\na ggplot2 extension spacially desgin for visualising distribution and uncertainty\n\n\ntidyverse\na family of R packages for data processing\n\n\nggthemes\na ggplot extension for ggplots, providing additional themes, scales, and geoms\n\n\ncolorspace\na R package provides a broad toolbox for selecting individual colors or color palettes, manipulating and employing these colors in various kinds of visualisations.\n\n\n\n\n\nIn this exercise, Exam_data.csv will be used. We use read_csv() of readr to import the data:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\nAfter importing the data, let’s examine it to understand its data structure:\nThe dataset contains 7 attributes and 322 observations with no missing values.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\nhead(exam)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\n\nstr(exam)\n\nspc_tbl_ [322 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID     : chr [1:322] \"Student321\" \"Student305\" \"Student289\" \"Student227\" ...\n $ CLASS  : chr [1:322] \"3I\" \"3I\" \"3H\" \"3F\" ...\n $ GENDER : chr [1:322] \"Male\" \"Female\" \"Male\" \"Male\" ...\n $ RACE   : chr [1:322] \"Malay\" \"Malay\" \"Chinese\" \"Chinese\" ...\n $ ENGLISH: num [1:322] 21 24 26 27 27 31 31 31 33 34 ...\n $ MATHS  : num [1:322] 9 22 16 77 11 16 21 18 19 49 ...\n $ SCIENCE: num [1:322] 15 16 16 31 25 16 25 27 15 37 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_character(),\n  ..   CLASS = col_character(),\n  ..   GENDER = col_character(),\n  ..   RACE = col_character(),\n  ..   ENGLISH = col_double(),\n  ..   MATHS = col_double(),\n  ..   SCIENCE = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\nsummary(exam)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n\n\n\nany(is.na(exam))\n\n[1] FALSE\n\n\n\n\nIn R, factors are used to handle categorical data and ordered variable. As there are categorical attributes in our dataset, we are going to convert their data type from &lt;chr&gt; to &lt;fctr&gt;:\n\ncol &lt;- c(\"CLASS\",\"GENDER\",\"RACE\")\nexam &lt;- exam %&gt;% mutate(across(all_of(col), as.factor))\n\nAfter converting the attributes, let’s check the data again:\n\nhead(exam)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-ridgeline-plot",
    "title": "Hands-on Exercise 04",
    "section": "3 Visualising Distribution with Ridgeline Plot",
    "text": "3 Visualising Distribution with Ridgeline Plot\nA Ridgeline plot (sometimes called Joyplot) shows the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n\n\n\n\n\nWhat for?\n\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than ~6 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n\n\n\n\n3.1 Plotting ridgeline graph: ggridges method\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges():\n\n\n\nDisplay Code\n\nggplot(exam, aes(x=ENGLISH, y=CLASS))+\n  geom_density_ridges(\n    scale = 2, # adjust the size (height) of the ridges\n    rel_min_height = 0.01, # control the min height of the ridges\n    bandwidth = 3, # control the smoothness of the density estimate\n    fill = lighten(\"#EBCF89\", .6), # lighten the color \n    color = \"#D18A7D\") + # border color\n  scale_x_continuous(\n    name = \"English Grades\",\n    expand = c(0,0)) + #remove spaces before and after the data range\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.5,1)) # add more spaces before 3A and after 3I\n  )+\n  theme_ridges()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThe density plot of English grades by class, reveals the clear differences in grade distributions: Classes 3A and 3B show similar grade ranges, also do classes 3C and 3D, and 3E~3G, while class 3F notably contains few outliers with lower grades around 25.\n\n\nThe ggridges package offers enhanced versions of geom_density_ridges2 and geom_ridgeline2. These versions improve compatibility with different data structures and eliminate the need to manually adjust ridge heights using parameters like scale or rel_min_height.\nHowever, in the patchwork below, under the default setting, the only noticeabke difference is the border displayed under each class’s density plot:\n\n\n\nDisplay Code\n\na &lt;- ggplot(exam, aes(x = ENGLISH, y=CLASS))+\n  geom_density_ridges2()+\n  ggtitle(\"geom_density_ridges2\")+\n  theme_ridges()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\nb &lt;- ggplot(exam, aes(x = ENGLISH, y=CLASS))+\n  geom_density_ridges()+\n  ggtitle(\"geom_density_ridges\")+\n  theme_ridges()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\na+b\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\nWe use the argument scale_fill_viridis_c() to apply color scaling, where “c” represents continuous data. The palette is also available for binned data (scale_fill_viridis_b()) and discrete data (scale_fill_viridis_d()).\nBelow are the argument we used to adjust the scale_fill_viridis_c():\n\n\n\nArgument\nDiscription\n\n\n\n\nname\nThe name of the scale. Used as the axis or legend title\n\n\nalpha\nThe alpha transparency, a number in [0,1], see argument alpha in hsv.\n\n\ndirection\nSets the order of colors in the scale. If 1, the default, colors are ordered from darkest to lightest. If -1, the order of colors is reversed.\n\n\noption\nA character string indicating the color map option to use. Eight options are available:\n\n\"magma\" (or \"A\")\n\"inferno\" (or \"B\")\n\"plasma\" (or \"C\")\n\"viridis\" (or \"D\")\n\"cividis\" (or \"E\")\n\"rocket\" (or \"F\")\n\"mako\" (or \"G\")\n\"turbo\" (or \"H\")\n\n\n\n\n\n\n\nDisplay Code\n\nggplot(exam, aes(x=ENGLISH, y=CLASS,\n                 fill = stat(x)))+\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01)+\n  scale_fill_viridis_c(name = NULL,\n                       option = \"C\",\n                       alpha=1)+ \n  scale_x_continuous(name = \"English Grades\", expand = c(0,0))+\n  scale_y_discrete(name=NULL)+\n  theme_ridges()+\n  labs(title = 'Gradient Colors for English Scores') +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\n\nDisplay Code\n\nggplot(exam, aes(x=ENGLISH, y=CLASS,\n                 fill = 0.5 - abs(0.5-stat(ecdf))))+\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE)+\n    scale_fill_viridis_c(name = \"Tail probability\",\n                         option = \"F\",\n                       direction = -1)+\n    theme_ridges()+\n  labs(title = 'Distribution of English Scores Across Classes') +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n\n\nDisplay Code\n\nggplot(exam, aes(x=ENGLISH, y=CLASS,\n                 fill = factor(stat(quantile))))+\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE,\n                      quantiles = 4,\n                      quantile_lines = TRUE)+\n    scale_fill_viridis_d(name = \"Qunatile\",\n                         option = \"D\")+\n    theme_ridges()+\n  labs(title = 'Distribution of English Scores Across Classes') +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nBy filling with quantile colors, we can now clearly compare grades across classes. While classes 3D and 3E have similar overall grade ranges and distributions in their top 50%, class 3D shows a higher proportion of students with lower grades in Quantile 1.\n\n\nInstead of using number to define the quartiles, we can also specify quartiles by cut points such as 10% and 90% tails to colour the ridgeline plot as shown in the figure below:\n\n\n\nDisplay Code\n\nggplot(exam, aes(x=ENGLISH, y=CLASS,\n                 fill = factor(stat(quantile))))+\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE,\n                      quantiles = c(0.025,0.975))+\n    scale_fill_manual(name = \"Probability\",\n                         values = c())+\n    theme_ridges()+\n  labs(title = 'Quantile Distribution of English Grades') +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nIf we only care about comparing the difference of top 10% and bottom 10% of students’ performance, setting the quantiles c(0.1,0.9) would make it easier for readers to understand the performance differences across classes."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-raincloud-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-distribution-with-raincloud-plot",
    "title": "Hands-on Exercise 04",
    "section": "4 Visualising Distribution with Raincloud Plot",
    "text": "4 Visualising Distribution with Raincloud Plot\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modes. The boxplot does not show where densities are clustered, but the raincloud plot does.\n\n4.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n\n\nDisplay Code\n\nggplot(exam, \n       aes(x = RACE,y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  labs(title =\"Distribution of English Scores Across Races\",\n       x = \"\", y=\"English Score\")+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n\n\nDisplay Code\n\nggplot(exam, \n       aes(x = RACE,y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA)+\n  labs(title =\"Distribution of English Scores Across Races\",\n       x = \"\", y=\"English Score\")+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\n\nDisplay Code\n\nggplot(exam, \n       aes(x = RACE,y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA)+\n  stat_dots(side = \"left\",\n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2\n            )+\n  labs(title =\"Distribution of English Scores Across Races\",\n       x = \"\", y=\"English Score\")+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\nThis graph contains a lot of information, including numbers of student and distribution, outliers, range and quartiles of English scores across races:\n\nNumbers of student: Chinese &gt; Malay &gt;&gt; Indian &gt; Others\nMedian of English scores: Chinese &gt; Others &gt; Malay &gt; Indian\nIQR of English scores: Indian &gt; Malay &gt; Chinese &gt; Others\nNumbers of Outliers (lower scores): Chinese &gt; Others &gt; Malay = Indian\n\nIn conclusion, both Chinese students and those in the “Others” category perform well in English, with mean scores around 70. The Chinese group shows more extreme performance variation, with notable numbers of students having scores below 40. Meanwhile, the “Others” group shows a more normal distribution with few outliers, suggesting consistently strong English performance across the group.\n\n\n\n\n4.4 Finishing the touching\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. Also, we add aes(fill = RACE) in stat_halfeye() function to highlight different races:\n\n\n\nDisplay Code\n\nggplot(exam, \n       aes(x = RACE,y = ENGLISH)) +\n  stat_halfeye(aes(fill = RACE),\n               alpha = 0.5,\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA)+\n  stat_dots(\n            side = \"left\",\n            justification = 1.2, \n            binwidth = NA,\n            dotsize = 2\n            )+\n  labs(title =\"Distribution of English Scores Across Races\",\n       x = \"\", y=\"English Score\")+\n  coord_flip() +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.position = 'none',\n        plot.title = element_text(face = \"bold\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#reference",
    "title": "Hands-on Exercise 04",
    "section": "5 Reference",
    "text": "5 Reference\n\nKam, T.S. (2025). Visualising Distribution.\nIntroducing Ridgeline Plots (formerly Joyplots)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html",
    "title": "Hands-on Exercise 03-1",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#learning-object",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#learning-object",
    "title": "Hands-on Exercise 03-1",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#getting-started",
    "title": "Hands-on Exercise 03-1",
    "section": "3.2 Getting Started",
    "text": "3.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task:\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse, hrbrthemes)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#importing-data",
    "title": "Hands-on Exercise 03-1",
    "section": "3.3 Importing Data",
    "text": "3.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nhead(exam_data,5)\n\n# A tibble: 5 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 03-1",
    "section": "3.4 Interactive Data Visualisation - ggiraph methods",
    "text": "3.4 Interactive Data Visualisation - ggiraph methods\nggiraph is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. \n\n3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\n\n\n\n\n\nWhat’s the difference between geom_dotplot and geom_dotplot_interactive?\n\ngeom_dotplot (from ggplot2): Creates a dot plot in static visualizations using the ggplot2 package.\ngeom_dotplot_interactive (from ggiraph): Provides interactive dot plots using the ggiraph package, allowing features like tooltips, click events, and hover effects. It needs girafe() function to display it interactively in an HTML-compatible environment (e.g., RMarkdown, Shiny, or an R notebook).\n\n\n\n\n\n\n\n\n\n\nLet’s breakdown the setting in geom_dotplot_interactive():\n\naes(tooltip = ID): This is the aesthetic mapping (aes) that specifies what information should appear in the tooltip when a user interacts with a dot.\nstackgroups=TRUE: It means the dots representing the same value will be stacked on top of each other. The default setting is FALSE.\nbinwidth=1: The binwidth argument controls the width of the bins used in the dot plot. This is similar to the “bin width” concept in histograms.\nmethod=\"histodot\": This specifies the method used to place the dots.\n\n“histodot”: It places the dots in a manner similar to how a histogram is drawn, but each dot represents an individual data point, and they are stacked or spaced according to the data.\n\n\n\n\n\n\n# create ggplot object\np &lt;- ggplot(data=exam_data, aes(x=MATHS))+\n  geom_dotplot_interactive(aes(tooltip = ID),stackgroups=TRUE, \n                           binwidth=1,method =\"histodot\")+\n  # remove the y-axis to avoid misleading visualization\n  scale_y_continuous(NULL, breaks = NULL)+\n  theme_ipsum()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(size=14, face = \"bold\"),\n        plot.subtitle = element_text(size = 9,face= \"italic\" ,family = \"Helvetica\"),\n        plot.caption = element_text(size=6, face=\"plain\"))+\n  labs(title = \"The example of an interactive graph\",\n       subtitle = \"By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.\",\n       x = \"Math Score\",\n       caption=\"Source: ISSS608 VAA - Exam_data\")\n  \n\n# use girafe() to create an interactive svg object (the tooltips) compatible in html environments.\ngirafe(ggobj = p,\n       width_svg = 6,\n       height_svg = 6*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactivity",
    "title": "Hands-on Exercise 03-1",
    "section": "3.5 Interactivity",
    "text": "3.5 Interactivity\n\n3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customized by including a list object as shown in the code chunk below.\n\n\n\n\n\n\nLet’s break down the code step by step:\n\nexam_data$tooltip: This is creating a new column in the exam_data data frame called tooltip. The $ operator is used to refer to and create or access columns in a data frame.\nc(...): This function in R is used to combine values into a vector. Vectors are often used as building blocks for more complex data structures like data frames, matrices, and lists in R. In this case, it’s combining the result of the paste0()function.\npaste0(): This function is used to concatenate strings without any separator. It’s used here to combine different pieces of information (e.g., “Name =”, exam_data$ID, etc.).\nexam_data$ID & exam_data$CLASS: Accesses the “ID” and “CLASS” column in the exam_data data frame.\n\n\n\n\n\n# create new column \"tooltip\" in the dataframe \"exam_data\"\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS\n))\n\n# create ggplot object\np1 &lt;- ggplot(data=exam_data, aes(x=MATHS))+\n  geom_dotplot_interactive(aes(tooltip = exam_data$tooltip),stackgroups=TRUE, \n                           binwidth=1,method =\"histodot\")+\n  # remove the y-axis to avoid misleading visualization\n  scale_y_continuous(NULL, breaks = NULL)+\n  theme_ipsum()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(size=14, face = \"bold\"),\n        plot.subtitle = element_text(size = 9,face= \"italic\" ,family = \"Helvetica\"),\n        plot.caption = element_text(size=6, face=\"plain\"))+\n  labs(title = \"The example of an interactive graph\",\n       subtitle = \"By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.\",\n       x = \"Math Score\",\n       caption=\"Source: ISSS608 VAA - Exam_data\")\n  \n\n# use girafe() to create an interactive svg object (the tooltips) compatible in html environments.\ngirafe(ggobj = p1,\n       width_svg = 6,\n       height_svg = 6*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactivity---customization",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactivity---customization",
    "title": "Hands-on Exercise 03-1",
    "section": "3.6 Interactivity - Customization",
    "text": "3.6 Interactivity - Customization\n\n3.6.1 Customising Tooltip and Hover style\nThe code chunk below uses opts_tooltip() and opts_hover() from ggiraph to customize tooltip and hover rendering by adding CSS declarations.\nTo highlight data points on hover, we can use ggiraph’s interactive feature data_id. The default hover CSS setting is hover_css = “fill:orange;”.\nWe can also add opts_hover_inv(css = \"opacity:0.1;\") to the options argument to highlight observations on hover (as shown in Example 2).\n\nExample 1Example 2\n\n\n\n# create a varibale for customized tooltip style\nhover_css &lt;- \"fill:#A4A9D9; stroke:black ;stroke-width:1px;\"\ntooltip_css &lt;- \"background-color:white; font-style: bold; color:black; border-radius: 5px; margin: 3px; padding:3px;\"  \n\n# create ggplot object\np2 &lt;- ggplot(data=exam_data, aes(x=MATHS))+\n  geom_dotplot_interactive(tooltip = exam_data$tooltip, data_id= exam_data$ID,\n                           stackgroups=TRUE, \n                           binwidth=1,method =\"histodot\")+\n  # remove the y-axis to avoid misleading visualization\n  scale_y_continuous(NULL, breaks = NULL)+\n  theme_ipsum()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(size=14, face = \"bold\"),\n        plot.subtitle = element_text(size = 9,face= \"italic\" ,family = \"Helvetica\"),\n        plot.caption = element_text(size=6, face=\"plain\"))+\n  labs(title = \"The example of an interactive graph\",\n       subtitle = \"By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.\",\n       x = \"Math Score\",\n       caption=\"Source: ISSS608 VAA - Exam_data\")\n\n\ngirafe(ggobj = p2,\n       width_svg = 6,\n       height_svg = 6*0.618,\n       options = list(\n         opts_hover(css = hover_css),       # Apply hover CSS\n         opts_tooltip(css = tooltip_css)   # Apply tooltip CSS\n       ))\n\n\n\n\n\n\n\n\n#| eval: true\n#| echo: true\n\n\n# create a varibale for customized tooltip style\nhover_css &lt;- \"fill:black; stroke:black ;stroke-width:1px;\"\ntooltip_css &lt;- \"background-color:white; font-style: bold; color:black; border-radius: 5px; margin: 3px; padding:3px;\"  \n\n# create ggplot object\np3 &lt;- ggplot(data=exam_data, aes(x=MATHS, y=ENGLISH, color = GENDER))+\n  scale_color_manual(values = c(\"#D9A4C3\", \"#A4A8D9\"))+\n  geom_point_interactive(aes(tooltip= tooltip, data_id = tooltip),hover_nearest = TRUE)+\n  theme_ipsum()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(size=14, face = \"bold\"),\n        plot.subtitle = element_text(size = 9,face= \"italic\" ,family = \"Helvetica\"),\n        plot.caption = element_text(size=6, face=\"plain\",),\n        legend.title = element_text(size = 8,face= \"bold\" ,family = \"Arial\"),\n        legend.text = element_text(size = 8,family = \"Arial\"),\n        )+\n  labs(title = \"The example of an interactive graph\",\n       subtitle = \"By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.\",\n       caption=\"Source: ISSS608 VAA - Exam_data\")\n    \n\ngirafe(ggobj = p3,\n       width_svg = 6,\n       height_svg = 6 * 0.618,\n       options = list(\n         opts_hover(css = hover_css),       # Apply hover CSS\n         opts_tooltip(css = tooltip_css),   # Apply tooltip CSS\n         opts_hover_inv(css = \"opacity:0.4;\")  # Make other points less visible when hovering\n       ))\n\n\n\n\n\n\n\n\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\n\n\n\n\nLet’s break down the code below step by step:\nFirst code\n\nfunction(y, ymax, accuracy= .01): We first define a function() with 2 positional argument (y and ymax) and 1 key word argument (accuracy) and assign it to variable “tooltip_s”\n{}: The {} groups together the steps of computing the mean and standard error and finally returning the formatted text. Without {}, only the first statement would be considered inside the function, and the rest would be ignored.\n\nscales::number(y,accuracy=0.01): The function number() from the scales package is used to format numbers in a human-readable way. It adds commas, controls decimal places, and adjusts numerical representations.\npaste(): Concatenates strings with a specified separator (default is a space \" \"). paste0(): Concatenates strings without any separator.\n\n\nSecond code\n\nfun.data = \"mean_se\": mean_se is a built-in summary function in ggplot2.It calculates:\n\ny → the mean of the data (e.g., mean(MATHS))\nymin → lower bound of the error bar (mean - standard error)\nymax → upper bound of the error bar (mean + standard error)\n\n\n\nThese computed values (y, ymin, and ymax) are then made available internally in the plotting process, allowing them to be accessed using after_stat().\n\nafter_stat(tooltip_s(y, ymax)): after_stat() ensures that the variables being passed to the function tooltip_s(y, ymax) are computed after ggplot2applies statistical transformations (like calculating means and standard errors).\ngeom = GeomInteractiveCol: It is the interactive version of geom_col(), allowing for tooltips, hover effects, and onclick actions.\n\n\n\n\n\ntooltip_s &lt;- function(y, ymax, accuracy= .01){\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n} \n\ngg_point &lt;- ggplot(data=exam_data, aes(x=RACE))+\n  stat_summary(aes(y=MATHS, tooltip = after_stat(tooltip_s(y,ymax))),\n               fun.data = \"mean_se\",\n               geom = GeomInteractiveCol,\n               fill = \"#C8DBE8\")+\n  stat_summary(aes(y=MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", width = 0.2, size = 0.2)+\n  theme_ipsum()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(size=14, face = \"bold\"),\n        plot.subtitle = element_text(size = 10,face= \"italic\" ,family = \"Helvetica\"),\n        plot.caption = element_text(size=10, face=\"plain\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title = element_text(size=14)\n        )+\n  labs(title = \"The example of an interactive graph\",\n       subtitle = \"By hovering the mouse pointer over a box of interest, the 90% of CI of mean math scores will be displayed.\",\n       caption=\"Source: ISSS608 VAA - Exam_data\")\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n3.6.3 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\n\n\n\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n                             \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\n                             as.character(exam_data$ID))\ngg_click &lt;- ggplot(data=exam_data,aes(x=MATHS))+\n  geom_dotplot_interactive(\n    aes(onclick=onclick),\n    stackgroups = TRUE,\n    binwidth = 1, method = \"histodot\")+\n  scale_y_continuous(NULL,breaks = NULL)+\n  theme_ipsum()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(size=14, face = \"bold\"),\n        plot.subtitle = element_text(size = 10,face= \"italic\" ,family = \"Helvetica\"),\n        plot.caption = element_text(size=10, face=\"plain\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.title = element_text(size=14)\n        )+\n  labs(title = \"The example of an interactive graph\",\n       subtitle = \"Clicking on the graph will link you to the external website.\",\n       caption=\"Source: ISSS608 VAA - Exam_data\")\n\n\ngirafe(                                  \n  ggobj = gg_click,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618) \n\n\n\n\n\n\n\n3.6.4 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\n\n\n\n\n\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\ncommon_theme &lt;- theme_minimal(base_size = 10) +\n  theme(\n    plot.background = element_rect(fill = \"#f3f1e9\", color = NA),\n    panel.background = element_rect(fill = \"#f3f1e9\", color = \"black\", size=1),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.title = element_text(size = 10, face = \"bold\",hjust=0.5),\n    axis.text = element_text(size = 8),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 10, face = \"italic\"),\n    plot.caption = element_text(size = 8)\n  )\n\np1 &lt;- ggplot(data=exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,tooltip = tooltip),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL, breaks = NULL)+\n  common_theme\n\np2 &lt;- ggplot(data=exam_data, aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID, tooltip = tooltip),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL, breaks = NULL)+\n  common_theme\n\n\npatch &lt;- (p1 / p2) + # patchwork \n  common_theme +\n  plot_annotation(\n    title = \"The example of an interactive graph\",\n    subtitle = \"Clicking on the graph will link you to the external website.\",\n    caption = \"Source: ISSS608 VAA - Exam_data\",\n    theme = common_theme  \n  )\n\ngirafe(\n  code = print(patch), \n  width_svg = 6,\n  height_svg = 4,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  ))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 03-1",
    "section": "3.7 Interactive Data Visualisation - plotly methods!",
    "text": "3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, x = ~MATHS, y = ~ENGLISH) %&gt;%\n  layout(plot_bgcolor = \"#f3f1e9\",paper_bgcolor = \"#f3f1e9\",\n         title = list(\n      text = \"The example of an interactive graph by plot_ly()\",\n      font = list(size = 18, face = \"bold\")\n    ))\n\n\n\n\n\n\n\n3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, x = ~ENGLISH, y = ~MATHS, \n        color = ~RACE) %&gt;%\n  layout(plot_bgcolor = \"#f3f1e9\",paper_bgcolor = \"#f3f1e9\",\n         title = list(\n      text = \"The example of an interactive graph by plot_ly()\",\n      font = list(size = 18, face = \"bold\")\n    ))\n\n\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly(). * Notice that the only extra line you need to include in the code chunk is ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n  ggtitle(\"The example of an interactive graph\")+\n  theme_ipsum()+\n      theme(\n        plot.background = element_rect(fill = \"#f3f1e9\", color = NA),\n        panel.background = element_rect(fill = \"#f3f1e9\", color = \"black\", size=1),\n        axis.title = element_text(size = 10, face = \"bold\",hjust=0.5),\n        axis.text = element_text(size = 8),\n        plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5)\n      )\nggplotly(p)\n\n\n\n\n\n\n\n3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\n\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk.\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\n\ncommon_theme &lt;- theme_ipsum()+\n      theme(\n        plot.background = element_rect(fill = \"#f3f1e9\", color = NA),\n        panel.background = element_rect(fill = \"#f3f1e9\", color = \"black\", size=1),\n        axis.title = element_text(size = 10, face = \"bold\",hjust=0.5),\n        axis.text = element_text(size = 8),\n        plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5)\n      )\n\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n  common_theme\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n  common_theme+\n  ggtitle(\"The example of an interactive graph\")\n\n\nsubplot(ggplotly(p1),ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 03-1",
    "section": "3.8 Interactive Data Visualisation - crosstalk methods!",
    "text": "3.8 Interactive Data Visualisation - crosstalk methods!\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3.8.1 Interactive Data Table: DT package\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\ntable &lt;- DT::datatable(exam_data, class= \"display\",\n              caption = \"Table 1: Exam data\") %&gt;%\n  formatStyle(\n    columns = colnames(exam_data), \n    fontSize = '12px', \n    fontFamily = 'Helvetica', \n    lineHeight = '1.2'\n  )\ntable\n\n\n\n\n\n\n\n3.8.2 Linked brushing: crosstalk method\nCode chunk below is used to implement the coordinated brushing shown below.\n\nd &lt;- highlight_key(exam_data) \n\np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))+\n  ggtitle(\"Exam Data\")+\n  theme_ipsum()+\n  theme(\n        plot.background = element_rect(fill = \"#f3f1e9\", color = NA),\n        panel.background = element_rect(fill = \"#f3f1e9\", color = \"black\", size=1),\n        axis.title = element_text(size = 10, face = \"bold\",hjust=0.5),\n        axis.text = element_text(size = 8),\n        plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5)\n      )\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = c(5,6))        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_EX03.html#reference",
    "title": "Hands-on Exercise 03-1",
    "section": "3.9 Reference",
    "text": "3.9 Reference\n\n3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\ngganimate - Getting Started\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex00/Hands-on_E00.html",
    "href": "Hands-on_Ex/Hands-on_Ex00/Hands-on_E00.html",
    "title": "Hands-on Exercise 00: working with tidyverse",
    "section": "",
    "text": "Getting started\nLoading tidyverse onto r environment by using the code chunk below.\n\npacman::p_load(tidyverse)\n\n\n\nImporting data\n\nrealis_2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")\n\n\n\nPivoting data\n\npopdata_long &lt;- popdata_fat %&gt;%\n  pivot_longer(c(3,21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")\n\n\n\nExport and Import R data files (.rds)\n\nwrite_rds(popdata_long, \"data/rds/popdata_long.rds\")\n\n\n\nSelect and filter columns\n\nrealis2019_filtered &lt;- realis_2019 %&gt;%\n  select(`Project Name`, `Type of Sale`, `Transacted Price ($)`, `Property Type`, `Unit Price ($ psm)`) %&gt;%\n  filter(`Property Type` == \"Condominium\" | `Property Type` == \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &gt; 11000)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Johsuan’s Visual Analytics Site",
    "section": "",
    "text": "This website contains exercises from ISSS608 Visual Analytics and Applications.\nI hope you enjoy exploring my website!\n\nHere are my latest posts :\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 04\n\n\nVisualising Distribution\n\n\n\nFeb 02, 2024\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 03-2\n\n\nProgramming Animated Statistical Graphics with R\n\n\n\nJan 28, 2024\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 03-1\n\n\nProgramming Interactive Data Visualisation with R\n\n\n\nJan 25, 2024\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 02\n\n\nBeyond ggplot2 Fundamentals\n\n\n\nJan 18, 2024\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 01\n\n\nA Layered Grammar of Graphics: ggplot2 methods\n\n\n\nJan 11, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  }
]