---
title: "Hands-on Exercise 01 - A Layered Grammar of Graphics: ggplot2 methods"
date: 2024-01-11
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

### 1.1 Learning Objectives:

-   Basic principles and essential components of ggplot2.

-   Apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphic.

### 1.2 Load the Package and Import the Data

::: {.callout-note appearance="simple"}
The code chunk below assumes that you already have [**pacman**](https://cran.r-project.org/web/packages/pacman/) package installed. If not, please go ahead install pacman first.
:::

```{r}
# Load the package
pacman::p_load(tidyverse)
```

-   The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr(one of the tidyverse package) package.

```{r}
# Import the data
exam_data <- read_csv("data/Exam_data.csv")
```

The dataset contains examination grades for 3 subjects from a local school. We can use head() and summary() function inspect the dataset.

There are a total of 7 attributes. 4 of them are categorical data type and the other 3 are in continuous data type.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.

-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

```{r}
head(exam_data,5)
```

```{r}
summary(exam_data)
```

### 1.3 R Graphics VS ggplot

First, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.

::: panel-tabset
#### R graphics

```{r}
hist(exam_data$MATHS)
```

#### ggplot 2

```{r}
ggplot(data=exam_data, aes(x=MATHS)) +
  # use geom_histogram() to create a hist plot
  geom_histogram(bins=10,
                 boundary=100,
                 color="black",
                 fill="#E8C8DB") +
  # setting a clean background
  theme_classic()+
  ggtitle("Distribution of Maths scores")+
  # adjust the position and weight of the title
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA))
```
:::

Although R Graphics's code looks simpler than ggplot, according to [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157), “The transferrable skills from ggplot2 are not the idiosyncracies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive”.

### 1.4 Grammar of Graphics

Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) **Grammar of Graphics**, Springer.

**The grammar of graphics is an answer to a question: " What's a statistical graphic? "**

There are two principles in Grammar of Graphics, they are:

-   Graphics = distinct layers of grammatical elements
-   Meaningful plots through aesthetic mapping

#### 1.4.1 **A Layered Grammar of Graphics**

ggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.

![](/images/Layered_grammars-ggplot.jpg){width="488"}

Reference: Hadley Wickham (2010) [“A layered grammar of graphics.”](https://vita.had.co.nz/papers/layered-grammar.html) *Journal of Computational and Graphical Statistics*, vol. 19, no. 1, pp. 3–28.

A short description of each building block are as follows:

-   **Data**: The dataset being plotted.

-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.

-   **Geometrics**: The visual elements used for our data, such as point, bar or line.

-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).

-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).

-   **Coordinate systems** define the plane on which data are mapped on the graphic.

-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.

### 1.5 Essential Grammatical Elements in ggplot2: data

Let us call the ggplot() function using the code chunk below.

::: {.callout-note appearance="simple"}
-   A blank canvas appears.

-   `ggplot()` initializes a ggplot object.

-   The *data* argument defines the dataset to be used for plotting.

-   If the dataset is not already a data.frame, it will be converted to one by `fortify()`
:::

```{r}
ggplot(data=exam_data)
```

### 1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings

The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.

All aesthetics of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) function call (in later part of this lesson, you will see that each *geom* layer can have its own aes specification)

Code chunk below adds the aesthetic element into the plot.

::: {.callout-note appearance="simple"}
ggplot includes the x-axis and the axis’s label.
:::

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS))
```

### 1.7 Essential Grammatical Elements in ggplot2: geom

Geometric objects are the actual marks we put on a plot. **A plot must have at least one geom**; there is no upper limit. You can add a geom to a plot using the **+** operator.

Examples include:

-   *geom_point* for drawing individual points (e.g., a scatter plot)

-   *geom_line* for drawing lines (e.g., for a line charts)

-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)

-   *geom_bar* for drawing bars (e.g., for bar charts)

-   *geom_histogram* for drawing binned values (e.g. a histogram)

-   *geom_polygon* for drawing arbitrary shapes

-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

    ![](/images/geom_ggplot.png)

    Below are the examples of geom:

::::: panel-tabset
#### Bar

##### geom_bar()

```{r}
ggplot(data=exam_data,
       aes(x=RACE))+
  geom_bar(color="black",
           fill="#E8C8DB")+
  ggtitle("Distribution of Race")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA))
```

#### Dot

##### geom_dotplot()

In a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.

::: {.callout-warning appearance="simple"}
The y scale is not very useful, in fact it is very misleading.
:::

::: {.callout-warning appearance="simple"}
The code chunk below performs the following two steps:

-   `scale_y_continuous()` is used to turn off the y-axis, and

-   *binwidth argument* is used to change the binwidth to 2.5.
:::

```{r}
ggplot(data=exam_data,
       aes(x=MATHS))+
  geom_dotplot(binwidth=2.5,
               dotsize = 0.5,
               fill="#E8C8DB")+
  # use scale_y_continuous() to turn off y-axis
  scale_y_continuous(NULL,
                     breaks=NULL)+
  ggtitle("Distribution of Math Scores")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA))
```

#### Hist

##### geom_histogram()

```{r}
#  default bin is 30
ggplot(data=exam_data, 
       aes(x=MATHS))+
  geom_histogram(bins=20,
                 color="black",
                 fill="#E8C8DB")+
  ggtitle("Distribution of Math Scores")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
```

##### geom_histogram() by Gender

In the code chunk below,

-   *bins* argument is used to change the number of bins to 20,

-   *fill* argument is used to shade the histogram with light blue color, and

-   *color* argument is used to change the outline colour of the bars in black

```{r}
ggplot(data=exam_data,
       aes(x=MATHS,
           fill=GENDER))+
  geom_histogram(bins=20,
                 color="black")+
  # customize the fill color
  scale_fill_manual(values = c("#E8C8DB", "#C8DBE8"))+
  ggtitle("Distribution of Math Scores by Gender")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))

```

#### Density

##### geom_density()

[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.

It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.

The code below plots the distribution of Maths scores in a kernel density estimate plot.

```{r}
ggplot(data=exam_data,
       aes(x=MATHS))+
  geom_density()+
  ggtitle("Distribution of Math Scores by Gender")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA))
```

##### geom_density() by Gender

The code chunk below plots two kernel density lines by using *colour* or *fill* arguments of *aes()*

```{r}
ggplot(data=exam_data,
       aes(x=MATHS,colour = GENDER))+
  geom_density()+
    # customize the color
  scale_color_manual(values = c("#E8C8DB", "#C8DBE8"))+
  ggtitle("Distribution of Math Scores by Gender")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))

```

#### Box

##### geom_boxplot()

[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.

```{r}
ggplot(data=exam_data,
       aes(x=GENDER,
           y=MATHS,
           # add "fill" to customize boxplot's colors
           fill=GENDER))+
         geom_boxplot()+
    # customize the color
  scale_fill_manual(values = c("#E8C8DB", "#C8DBE8"))+
  ggtitle("Distribution of Math Scores by Gender")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
  
```

##### geom_boxplot() with notch \>\>\> shows median

[**Notches**](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.

```{r}
ggplot(data = exam_data,
       aes(x = GENDER,
           y = MATHS,
           fill = GENDER))+
  geom_boxplot(notch = TRUE)+
  scale_fill_manual(values = c("#E8C8DB", "#C8DBE8"))+
  ggtitle("Distribution of Math Scores by Gender")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
```

#### Violin

##### geom_violin()

[`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.

```{r}
ggplot(data = exam_data,
       aes(x = GENDER,
           y = MATHS,
           fill = GENDER))+
  geom_violin()+
  scale_fill_manual(values = c("#E8C8DB", "#C8DBE8"))+
  ggtitle("Distribution of Math Scores by Gender")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
```

#### Point

##### geom_point()

[`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.

```{r}
ggplot(data = exam_data,
       aes(x = MATHS,
           y = ENGLISH,
           color = GENDER))+
  geom_point()+
  scale_color_manual(values = c("#D9A4C3", "#A4A8D9"))+
  ggtitle("Distribution of Math Scores by Gender")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
```

#### Combined

##### Combine multiple geom objects

The code chunk below plots the data points on the boxplots by using both `geom_boxplot()`and `geom_point()`.

```{r}
ggplot(data = exam_data,
       aes(y = MATHS,
           x = GENDER,
           fill = GENDER))+
  geom_point(position = "jitter", 
             size = 0.5)+
  geom_boxplot()+
  ggtitle("Distribution of Math Scores by Gender")+
  scale_fill_manual(values = c("#E8C8DB", "#C8DBE8"))+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))

```
:::::

### 1.8 Essential Grammatical Elements in ggplot2: stat

The [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:

-   frequency of values of a variable (bar graph)

    -   a mean

    -   a confidence limit

-   There are two ways to use these functions:

    -   add a `stat_()` function and override the default geom, or

    -   add a `geom_()` function and override the default stat.

#### 1.8.1 Working with *stat_summary() or geom()*

::: panel-tabset
##### stat_summary()

```{r}
ggplot(data = exam_data,
       aes(x = GENDER, y = MATHS, fill = GENDER))+
  geom_boxplot()+
  scale_fill_manual(values = c("#E8C8DB", "#C8DBE8"))+
  theme_classic()+
  ggtitle("Distribution of Math Scores by Gender")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
  stat_summary(geom = "point",
               fun = "mean",
               color = "black",
               size = 3
               )
```

##### geom_point()

```{r}
ggplot(data = exam_data,
       aes(x = GENDER, y = MATHS, fill = GENDER))+
  geom_boxplot()+
  scale_fill_manual(values = c("#E8C8DB", "#C8DBE8"))+
  theme_classic()+
  ggtitle("Distribution of Math Scores by Gender")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
  geom_point(stat = "summary",
               fun = "mean",
               color = "black",
               size = 3
               )
```
:::

#### 1.8.2 Adding a best fit curve on a scatter plot with *geom_smooth()*

 [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot:

::: panel-tabset
##### LOESS Mehod

LOESS method is the default method of ***geom_smooth()***.

LOESS (Locally Estimated Scatterplot Smoothing) is a non-parametric regression method that fits a smooth curve to the data. This method is particularly useful when the relationship between variables is non-linear.

```{r}
ggplot(data = exam_data,
       aes(x = MATHS, y = ENGLISH))+
  geom_point()+
  # default use loess regression method
  geom_smooth(size=0.5)
```

##### LM Method

LM(Linear Model) refers to linear regression. It assumes the relationship between the dependent and independent variables are linear.

```{r}
ggplot(data = exam_data,
       aes(x = MATHS, y = ENGLISH))+
  geom_point()+
  geom_smooth(method = "lm", size=0.5)
```
:::

### 1.9 Essential Grammatical Elements in ggplot2: Facets

#### 1.9.1 Facets: Working with facet_wrap() and facet_grid()

Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html).

-   **facet_warp():** Creates facets by wrapping them into multiple rows or columns. It is useful for plotting a [single variable (as below tab shown)]{.underline}. We can control the number of rows or columns with the ***nrow*** and ***ncol*** arguments.

-   **facet_grid():** Creates a grid of facets defined by one or two variables. It is useful for exploring relationships between [two variables(as below tab shown)]{.underline}.

::: panel-tabset
#### facet_wrap()

-   **One variable: MATH**

```{r}
ggplot(data = exam_data,
       aes(x = MATHS))+
  geom_histogram(bins=20,fill="#E8C8DB",color="black")+
  facet_wrap(~ CLASS, nrow = 3)+
  ggtitle("Distribution of Math Scores by Class")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))


```

-   **Two variables: MATHS & RACE**

```{r}
ggplot(data = exam_data,
       aes(x = CLASS, y = MATHS))+
  geom_boxplot() +
  stat_summary(geom = "point", fun = mean, colour ="#C8DBE8", size=2) + 
  facet_wrap(~ RACE)+
  ggtitle("Distribution of Math Scores by Race and Class ")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
```

#### facet_grid()

-   **One variable: MATH**

```{r}
ggplot(data = exam_data,
       aes(MATHS))+
  geom_histogram(bins=20,fill="#E8C8DB",color="black")+
  facet_grid(~ CLASS)+
  ggtitle("Distribution of Math Scores by Race and Class ")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
```

-   **Two variables: MATHS & RACE**

```{r}
ggplot(data = exam_data,
       aes(x = CLASS, y = MATHS))+
  geom_boxplot() +
  stat_summary(geom = "point", fun = mean, colour ="#C8DBE8", size=2) + 
  facet_grid(~ RACE)+
  ggtitle("Distribution of Math Scores by Race and Class ")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))  
```
:::

### 1.10 Coordinates

The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:

-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): fixed both the y-axis and x-axis in certain ranges.

-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.

-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).

-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.

::: panel-tabset
#### coord_flip()

```{r}
ggplot(data = exam_data,
       aes(x = RACE))+
  geom_bar(bins=20,fill="#E8C8DB",color="black")+
  coord_flip()+
  ggtitle("Number of Students by Race")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        panel.background = element_rect(fill = "#f3f1e9",color = NA),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))

```

#### coord_cartesian()

The scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.

```{r}
ggplot(data = exam_data,
       aes(x = MATHS, y = ENGLISH))+
  geom_point()+
  geom_smooth(method = "lm", size=0.5)+
  # fixes both the y-axis and x-axis range from 0-100
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))+
  ggtitle("Relationship between English and Math")+
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        panel.background = element_rect(fill = "#f3f1e9",color = NA),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))
```
:::

### 1.11 Essential Grammatical Elements in ggplot2: themes

Themes control elements of the graph not related to the data. For example:

-   background colour

-   size of fonts

-   gridlines

-   colour of labels

Built-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`

A list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).

::: panel-tabset
#### theme_gray()

This is the default theme.

```{r}
ggplot(data = exam_data,
       aes(x = RACE))+
  geom_bar(bins=20,fill="#E8C8DB",color="black")+
  coord_flip()+
  ggtitle("Number of Students by Race")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))


```

#### theme_classic()

```{r}
ggplot(data = exam_data,
       aes(x = RACE))+
  geom_bar(bins=20,fill="#E8C8DB",color="black")+
  coord_flip()+
  theme_classic()+
  ggtitle("Number of Students by Race")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))

```

#### theme_minimal()

```{r}
ggplot(data = exam_data,
       aes(x = RACE))+
  geom_bar(bins=20,fill="#E8C8DB",color="black")+
  coord_flip()+
  theme_minimal()+
  ggtitle("Number of Students by Race")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))

```

#### theme_bw()

```{r}
ggplot(data = exam_data,
       aes(x = RACE))+
  geom_bar(bins=20,fill="#E8C8DB",color="black")+
  coord_flip()+
  theme_bw()+
  ggtitle("Number of Students by Race")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        # adjust the color of panel grid
        legend.background = element_rect(fill = "#f3f1e9"))

```

#### theme_dark()
```{r}
ggplot(data = exam_data,
       aes(x = RACE))+
  geom_bar(bins=20,fill="#E8C8DB",color="black")+
  coord_flip()+
  theme_dark()+
  ggtitle("Number of Students by Race")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9"))

```

#### theme_linedraw()
```{r}
ggplot(data = exam_data,
       aes(x = RACE))+
  geom_bar(bins=20,fill="#E8C8DB",color="black")+
  coord_flip()+
  theme_linedraw()+
  ggtitle("Number of Students by Race")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        # adjust the color of panel grid
        legend.background = element_rect(fill = "#f3f1e9"))

```

#### theme_void()
```{r}
ggplot(data = exam_data,
       aes(x = RACE))+
  geom_bar(bins=20,fill="#E8C8DB",color="black")+
  coord_flip()+
  theme_void()+
  ggtitle("Number of Students by Race")+
  theme(plot.title = element_text(hjust = 0.5, face="bold"),
        # adjust the color behind the bar chart
        panel.background = element_rect(fill = "#f3f1e9",color = NA),
        # adjust the background color of the whole plot
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        # adjust the color of panel grid
        legend.background = element_rect(fill = "#f3f1e9"))

```
:::

### 1.12 References

-   Kam, T.S. (2025). [A Layered Grammar of Graphics: ggplot2 methods](https://r4va.netlify.app/chap01).

-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.

-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.

-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version

-   [Learning ggplot2 on Paper – Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)

-   [Learning ggplot2 on Paper – Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)

-   [Learning ggplot2 on Paper – Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)
