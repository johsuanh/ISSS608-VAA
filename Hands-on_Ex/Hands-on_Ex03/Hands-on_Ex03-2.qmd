---
title: "Hands-on Exercise 03-2"
date: 2024-01-28
date-modified: "last-modified"
description: "Programming Animated Statistical Graphics with R"
categories: [ggplot2,dplyr,gganimate,plotly]
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## 4.1 Overview

When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, we will learn how to:

1.  Create animated data visualisation by using `gganimate` and `plotly` r packages
2.  Reshape data by using `tidyverse` package
3.  Process, wrangle and transform data by using `dplyr` package

### 4.1.1 Basic concepts of animation

When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.

![](images/image3.jpg)

### 4.1.2 Terminology

Before we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.

1.  **Frame**: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.

2.  **Animation Attributes**: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.

::: {.callout-important appearance="simple"}
Before you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.
:::

## 4.2 Getting Started

### 4.2.1 Loading the R packages

First, write a code chunk to check, install and load the following R packages:

-   [**plotly**](https://plotly.com/r/), R library for plotting interactive statistical graphs.

-   [**gganimate**](https://gganimate.com/), an ggplot extension for creating animated statistical graphs.

-   [**gifski**](https://cran.r-project.org/web/packages/gifski/index.html) converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.

-   [**gapminder**](https://cran.r-project.org/web/packages/gapminder/index.html): An excerpt of the data available at Gapminder.org. We just want to use its *country_colors* scheme.

-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

```{r}
pacman::p_load(readxl, gifski, gapminder,
               plotly, gganimate, tidyverse, ggthemes, DT)
```

### 4.2.2 Importing and Examing the data

In this hands-on exercise, the *Data* worksheet from *GlobalPopulation* Excel workbook will be used.

We first use `read_xls` of `tidyverse` package to import the document:

```{r}
globalpop_raw <- read_xls("data/GlobalPopulation.xls",sheet="Data") 
```

Next, we use function `str()` , `head()` from R, function `summarise_all()` and `n_distinct()` from `dplyr` to examine the data structure and variable types:

-   The dataset contains 6,204 observations with no missing values

<!-- -->

-   **Country**: The dataset contains 222 countries stored as character data type

-   **Year**: The data spans from 1996 to 1950 and stored as double data type

-   **Young**: Based on the data context, the "Young" variable represents the percentage of young people in the population with values ranging from 15.5% to **109.2%.** It stored as double data type

-   **Old**: Based on the data context, the "Old" variable represents the percentage of elderly people in the population with values ranging from 1% to 77.1% It stored as double data type

-   **Population**: The values ranging from 3 K to 1,807,878.6 K within the data period

-   **Continent:** The dataset contains 6 continenet stored as character data type

```{r}
#| echo: true
str(globalpop_raw)
```

```{r}
head(globalpop_raw)
```

```{r}
globalpop_raw %>%
  summarise_all(~n_distinct(.))
```

```{r}
# check if there're any missing values
any(is.na(globalpop_raw))
```

```{r}
summary(globalpop_raw)
```

### 4.2.3 Handling Data Issues

### 4.2.3.1 Data Type Issues

1.  **Year**: Since year is a whole number rather than a decimal, we should transform its data type from double \<dbl\> to integer\<int\>.
2.  **Country and Continent**: Since these two categorical variables will be analyzed further, we need to transform their data type from character \<chr\> to factor\<fctr\>. In R, factors are used to handle categorical data and ordered variable.

Here, we use `mutate_each_()` of `dplyr` package to convert all character data type into factor, and use `mutate` of `dplyr` package to convert data values of Year field into integer.

```{r}
col <- c("Country","Continent")

globalpop_raw <- read_xls("data/GlobalPopulation.xls",sheet="Data") %>%
  mutate_each_(funs(factor(.)),col) %>%
  mutate(Year = as.integer(Year))
  
head(globalpop_raw)

```

Unfortunately, `mutate_each_()` was deprecated in dplyr 0.7.0. and `funs()` was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using [`mutate_at()`](https://r4va.netlify.app/chap04) as shown in the code chunk below.

```{r}
col <- c("Country","Continent")

globalpop_raw <- read_xls("data/GlobalPopulation.xls",sheet="Data") %>%
  mutate_at(col, as.factor) %>%
  mutate(Year = as.integer(Year))
  
head(globalpop_raw)

```

Instead of using `mutate_at()`, [`across()`](https://dplyr.tidyverse.org/reference/across.html) can be used to derive the same outputs.

```{r}
col <- c("Country","Continent")

globalpop_raw <- read_xls("data/GlobalPopulation.xls",sheet="Data") %>%
  mutate(across(all_of(col), as.factor)) %>%
  mutate(Year = as.integer(Year))

head(globalpop_raw)

```

### 4.2.3.2 Data Quality Issues

The data summary statistics show that the maximum value of Young% is 109.2%, indicating inaccurate or incomplete data. This is problematic because Young% + Old% should be less than or equal to 100%. A value exceeding this would imply a negative Mid-aged%, which is neraly impossible and suggests inaccurate or missing data in this dataset.

```{r}
summary(globalpop_raw)
```

Below are 63 observations with data accuracy issue. To maintain dataset's integrity, we should remove these problematic countries records.

```{r}
dq_issues <- subset(globalpop_raw, Young > 100 | (Young + Old) > 100)

table <- DT::datatable(dq_issues, class= "display",
              caption = "Table 1: Observations with data quality issues") %>%
  formatStyle(
    columns = colnames(dq_issues), 
    fontSize = '12px', 
    fontFamily = 'Helvetica', 
    lineHeight = '1.2'
  )
table
```

##### 

After remove problematic records, there are 5,953 observations remained with 213 distinct countries.

```{r}
c_removed = unique(dq_issues$Country)
globalPop <- subset(globalpop_raw, !(Country %in% c_removed))
str(globalPop)
summary(globalPop)
```

```{r}
globalPop %>% summarise_all(~n_distinct(.))
```

## 4.3 Animated Data Visualisation: gganimate methods

[**gganimate**](https://gganimate.com/) extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.

-   `transition_*()` defines how the data should be spread out and how it relates to itself across time.

-   `view_*()` defines how the positional scales should change along the animation.

-   `shadow_*()` defines how data from other points in time should be presented in the given point in time.

-   `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation.

-   `ease_aes()` defines how different aesthetics should be eased during transitions.

### 4.3.1 Building a static population bubble plot

In the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.

```{r}
ggplot(globalPop, aes(x = Old, y = Young,
                      size = Population,
                      colour = Country))+
  geom_point(alpha=0.7, show.legend = FALSE)+
  scale_colour_manual(values = country_colors)+
  scale_size(range= c(2,12))+
  labs(title = 'Global Population Change from 1996 to 2050',
       subtitle = 'Year:{frame_time}',
       x = '% Aged',
       y = '% Young')+
  theme_economist(base_size = 8)
```

### 4.3.2 Building the animated bubble plot

In the code chunk below,

-   [`transition_time()`](https://gganimate.com/reference/transition_time.html) of **gganimate** is used to create transition through distinct states in time (i.e. Year). `frame_time` is a special placeholder (dynamic title) in gganimate.

-   `ease_aes()` is used to control easing of aesthetics. The default is `linear`. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.

    ```{r}
    #| eval: true
    #| echo: true

    ggplot(globalPop, aes(x = Old, y= Young,
                          size = Population, colour = Country))+
      geom_point(alpha = 0.7, show.legend = FALSE)+
      scale_colour_manual(values = country_colors)+
      scale_size(range = c(2,12))+   # control point size to be 2~12
      labs(title = 'Global Population Change from 1996 to 2050',
           subtitle = 'Year:{frame_time}',   # {frame_time} is a special placeholder (dynamic title) in gganimate
           x = '% Aged',
           y = '% Young')+
      transition_time(Year)+
      ease_aes('cubic-in-out')+
      theme_economist(base_size = 8)
    ```

## 4.4 Animated Data Visualisation: plotly

In **Plotly R** package, both `ggplotly()` and `plot_ly()` support key frame animations through the `frame` argument/aesthetic. They also support an `ids` argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).

### 4.4.1 Building an animated bubble plot: ggplotly() method

In this sub-section, we will create an animated bubble plot by using `ggplotly()` method.

::: {.callout-note appearance="simple"}
## Things to learn from the code chunk

-   Appropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called *gg*.

-   `ggplotly()` is then used to convert the R graphic object into an animated svg object.
:::

::: panel-tabset
## Plot

```{r}
#| echo: false
gg <- ggplot(globalPop, aes(x = Old, y = Young,
                            size = Population, colour = Country))+
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7,
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors)+
  # control the size of points from 2 to 12
  scale_size(range = c(2,12))+
  labs(title = 'Global Population Change from 1996 to 2050',
       x = '% Aged', 
       y = '% Young')+
  theme_wsj(base_size = 8) + 
  theme(axis.title.x = element_text(size = 12, face = "bold"),
        axis.title.y = element_text(size = 12, face = "bold"))

ggplotly(gg)
```

## Code

``` r
gg <- ggplot(globalPop, aes(x = Old, y = Young,
                            size = Population, colour = Country))+
  geom_point(aes(size = Population,
                 frame = Year),
             alpha = 0.7,
             show.legend = FALSE) +
  scale_colour_manual(values = country_colors)+
  # control the size of points from 2 to 12
  scale_size(range = c(2,12))+
  labs(title = 'Global Population Change from 1996 to 2050',
       x = '% Aged', 
       y = '% Young')+
  theme_wsj(base_size = 8) + 
  theme(axis.title.x = element_text(size = 12, face = "bold"),
        axis.title.y = element_text(size = 12, face = "bold"))

ggplotly(gg)
```
:::

### 4.4.1.1 Improvements Needed

1.  **Legend:** Notice that although `show.legend = FALSE` argument was used, the legend still appears on the plot. To overcome this problem, `theme(legend.position='none')` should be used as shown in the plot and code chunk below.
2.  **Color:** Although the "`country_colors`" palette from gapminder provides colors for 142 countries, our dataset contains 213 countries, causing many data points to appear in grey. To improve visual distinction, we should color code the data by "Continent" rather than "Country".
3.  **Tooltips:** To improve the readability of the plot, tooltips are customized with detailed infomations by using `text()`.

::: panel-tabset
## Plot

```{r}
#| echo: false
gg <- ggplot(globalPop, aes(x = Old, y = Young,
                            size = Population, colour = Continent,
                            text = paste("Year:",Year, # customize the content in tooltips
                                         "<br>Continent:",Continent,
                                         "<br>Country:", Country,
                                         "<br>Population:", scales::comma(Population), "K",
                                         "<br>Old:",round(Old,2),"%",
                                         "<br>Young:",round(Young,2),"%")))+ 
  geom_point(aes(frame = Year),alpha = 0.7) +
  scale_size(range = c(2,12))+
  labs(title = 'Global Population Change from 1996 to 2050',
       x = '% Aged', 
       y = '% Young',)+
  theme_wsj(base_size = 8)+ scale_color_wsj()+
  theme(axis.title.x = element_text(size = 12, face = "bold"),
        axis.title.y = element_text(size = 12, face = "bold"),
        legend.position = 'none') # remove legend


ggplotly(gg, tooltip = "text")
```

## Code

``` r
gg <- ggplot(globalPop, aes(x = Old, y = Young,
                            size = Population, colour = Continent,
                            text = paste("Year:",Year, # customize the content in tooltips
                                         "<br>Continent:",Continent,
                                         "<br>Country:", Country,
                                         "<br>Population:", scales::comma(Population), "K",
                                         "<br>Old:",round(Old,2),"%",
                                         "<br>Young:",round(Young,2),"%")))+ 
  geom_point(aes(frame = Year),alpha = 0.7) +
  scale_size(range = c(2,12))+
  labs(title = 'Global Population Change from 1996 to 2050',
       x = '% Aged', 
       y = '% Young')+
  theme_wsj(base_size = 8)+ scale_color_wsj()+
  theme(axis.title.x = element_text(size = 12, face = "bold"),
        axis.title.y = element_text(size = 12, face = "bold"),
        legend.position = 'none') # remove legend


ggplotly(gg, tooltip = "text")
```
:::

### 4.4.2 Building an animated bubble plot: plot_ly() method

In this sub-section, you will learn how to create an animated bubble plot by using `plot_ly()` method.

To customized the layout of plot_ly(), we need to use layout().

::: panel-tabset
## Plot

```{r}
#| echo: false
bp <- globalPop %>%
  plot_ly(x = ~Old, y= ~Young,
          size = ~Population, color = ~Continent,
          sizes = c(2,100),
          frame = ~Year, text = ~Country,
          hoverinfo = "text",
          type = "scatter", mode = "markers") %>%
  layout(showlegend = FALSE,
         title = list (text = "Global Population Change from 1996 to 2050",
                       font = list(size = 15,family="Georgia", face = "bold")),
         xaxis = list(title = "% Aged", 
                      titlefont = list(size = 12, family = "Georgia")),
         yaxis = list(title = "% Young", 
                      titlefont = list(size = 12, family = "Georgia")),
         plot_bgcolor = "#f3f1e9",
         paper_bgcolor = "#f3f1e9")

bp
```

## Code

``` r
bp <- globalPop %>%
  plot_ly(x = ~Old, y= ~Young,
          size = ~Population, color = ~Continent,
          sizes = c(2,100),
          frame = ~Year, text = ~Country,
          hoverinfo = "text",
          type = "scatter", mode = "markers") %>%
  layout(showlegend = FALSE,
         title = list (text = "Global Population Change from 1996 to 2050",
                       font = list(size = 15,family="Georgia", face = "bold")),
         xaxis = list(title = "% Aged", 
                      titlefont = list(size = 12, family = "Georgia")),
         yaxis = list(title = "% Young", 
                      titlefont = list(size = 12, family = "Georgia")),
         plot_bgcolor = "#f3f1e9",
         paper_bgcolor = "#f3f1e9")

bp
```
:::

## 4.5 Reference

-   [gganimate - Getting Started](https://gganimate.com/articles/gganimate.html)

-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).

-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)
