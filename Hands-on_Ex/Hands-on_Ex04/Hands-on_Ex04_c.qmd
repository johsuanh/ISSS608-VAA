---
title: "Hands-on Exercise 04.c"
author: Johsuan Huang
date: 2024-02-02
date-modified: "last-modified"
description: "Visualising Uncertainty"
categories: [ggplot2,ggdist, ungeviz]
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## 1 Learning Outcome

In this exercise, we will gain hands-on experience on creating statistical graphics for visualising uncertainty. The learning objectives are:

-   plot statistics error bars by using `ggplot2`

-   plot interactive error bars by combining `ggplot2`, `plotly` and `DT`

-   create advanced and more appealing plot by using `ggdist`

-   create hypothetical outcome plots (HOPs) by using `ungeviz` package

## 2 Getting Started

::: panel-tabset
## Loading the packages

Use the **pacman** package `p_load()` to check, install and launch the following R packages:

```{r}
pacman::p_load(plotly, crosstalk, DT, gganimate,
               ggdist, tidyverse, ggthemes)
```

| **Library** | **Description** |
|------------------|------------------------------------------------------|
| ggdist | a ggplot2 extension spacially desgin for visualising distribution and uncertainty |
| tidyverse | a family of R packages for data processing |
| crosstalk | for implementing cross-widget interactions (currently, linked brushing and filtering) |

## Importing the data

In this exercise, ***Exam_data.csv*** will be used. We use `read_csv()` of **readr** to import the data:

```{r}
exam <- read_csv("data/Exam_data.csv")
```

## Examining the data

After importing the data, let's examine it to understand its data structure:

The dataset contains 7 attributes and 322 observations with no missing values.

-   The categorical attributes are: ID, CLASS, GENDER and RACE.

-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

```{r}
head(exam)
```

```{r}
str(exam)
```

```{r}
summary(exam)
```

```{r}
any(is.na(exam))
```

## Transforming the data

In R, factors are used to handle categorical data and ordered variable. As there are categorical attributes in our dataset, we are going to convert their data type from \<chr\> to \<fctr\>:

```{r}
col <- c("CLASS","GENDER","RACE")
exam <- exam %>% mutate(across(all_of(col), as.factor))

```

After converting the attributes, let's check the data again:

```{r}
head(exam)
```
:::

## 3 Visualizing the uncertainty of point estimates: ggplot2 methods

A point estimate is a single number, such as a mean. Uncertainty, on the other hand, is expressed as standard error, confidence interval, or credible interval.

Firstly, code chunk below will be used to derive the necessary summary statistics.

```{r}
my_sum <- exam %>%
  group_by(RACE) %>% # group the observation by RACE
  summarise(n=n(), #sample size 
            mean = mean(MATHS),
            sd = sd(MATHS)) %>%
  mutate(se=sd/sqrt(n-1)) #calculate standard error of the sample mean

my_sum
```

Next, the code chunk below will be used to display *my_sum* tibble data frame in an html table format by using `kable()` function in **knitr.**

```{r}
knitr::kable(head(my_sum),format = "html")
```

### 3.1 Plotting standard error bars of point estimates

Now we are ready to plot the standard error bars of mean maths score by race as shown below.

-   `stat = 'identity'` in the `geom_point()` means that don't apply any statistics, just plot 'mean' values.

-   The error bars are computed by using the formula mean+/-se.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE,
        ymin = mean-se,
        ymax = mean+se),
    width = 0.2,
    colour = "black",
    alpha = 0.9,
    linewidth =0.5)+
  geom_point(aes(x=RACE,y=mean),
             stat = 'identity', # Don't apply any statistics, just plot 'mean' values
             color = "red",
             size = 1.5, alpha=1)+
  labs(title = "Standard error of mean maths score by race",y="MEAN")+
  theme_wsj(base_size = 9)+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(hjust=0, face="bold", size = 14),
        axis.title.y = element_text(size = 10))
  
```

</details>
:::

```{r}
#| echo: false
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE,
        ymin = mean-se,
        ymax = mean+se),
    width = 0.2,
    colour = "black",
    alpha = 0.9,
    linewidth =0.5)+
  geom_point(aes(x=RACE,y=mean),
             stat = 'identity', 
             color = "red",
             size = 1.5, alpha=1)+
  labs(title = "Standard error of mean maths score by race",y="MEAN")+
  theme_wsj(base_size = 9)+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(hjust=0, face="bold", size = 14),
        axis.title.y = element_text(size = 10))
  
```

### 3.2 Plotting confidence interval of point estimates

Instead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.

-   The confidence intervals are computed by using the formula `mean+/-1.96*se`

-   The `reorder(RACE, -mean)` function reorders the `RACE` factor so that the groups with the highest means appear first on the x-axis.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean), # sort the order by means
        ymin = mean-1.96*se,
        ymax = mean+1.96*se),
    width = 0.2,
    colour = "black",
    alpha = 0.9,
    linewidth =0.5)+
  geom_point(aes(x=RACE,y=mean),
             stat = 'identity', 
             color = "red",
             size = 1.5, alpha=1)+
  labs(title = "95% confidence interval of mean maths score by race",x="Math Score")+
  theme_wsj(base_size = 9)+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(hjust=0, face="bold", size = 11.5),
        axis.title.y = element_text(size = 14))
```

</details>
:::

```{r}
#| echo: false
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean),
        ymin = mean-1.96*se,
        ymax = mean+1.96*se),
    width = 0.2,
    colour = "black",
    alpha = 0.9,
    linewidth =0.5)+
  geom_point(aes(x=RACE,y=mean),
             stat = 'identity', 
             color = "red",
             size = 1.5, alpha=1)+
  labs(title = "95% confidence interval of mean maths score by race",x="Math Score")+
  theme_wsj(base_size = 9)+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(hjust=0, face="bold", size = 11.5),
        axis.title.y = element_text(size = 14))

```

### 3.3 Visualizing the uncertainty of point estimates with interactive error bars

In this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.

-   **`bscols()`**: This is used to create a layout where the plot occupies 4 columns (out of a 12-column grid) and the data table occupies 8 columns. This is typically used in Shiny apps or R Markdown documents to create a side-by-side layout.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
ggplot(exam, aes(x=ENGLISH, y=CLASS,
                 fill = stat(x)))+
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01)+
  scale_fill_viridis_c(name = NULL,
                       option = "C",
                       alpha=1)+ 
  scale_x_continuous(name = "English Grades", expand = c(0,0))+
  scale_y_discrete(name=NULL)+
  theme_ridges()+
  labs(title = 'Gradient Colors for English Scores') +
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA))
```

</details>
:::

```{r}
#| echo: false

shared_df = SharedData$new(my_sum) #create new shared data frame

bscols(
  widths = c(4, 8),  # Set column widths for plot and table 4:8
  ggplotly(
    ggplot(shared_df) + 
      geom_errorbar(
        aes(x = reorder(RACE, -mean),
            ymin = mean - 2.58 * se,  
            ymax = mean + 2.58 * se), 
        width = 0.2, 
        colour = "black",
        alpha = 0.9,
        linewidth = 0.5
      ) +
      geom_point(
        aes(x = RACE, y = mean,
            text = paste("RACE:", RACE,
                         "<br>N:", n,
                         "<br>Avg. Scores:", round(mean, 2),
                         "<br>99% CI:[", round((mean - 2.58 * se), 2), ",",
                         round((mean + 2.58 * se), 2), "]")),
        stat = 'identity', 
        color = "red", 
        size = 1.5, 
        alpha = 1
      ) +
      labs(x="Race",y="Average Scores",
           title = "99% Confidence interval of average /<br>maths scores by race")+
      theme_wsj(base_size = 9) + 
      theme(
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9", color = NA),
        plot.title = element_text(hjust = 0, face = "bold", size = 11.5),
        axis.title.y = element_text(size = 10),
        axis.title.x = element_text(size = 10),
        axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1),
        tooltip = "text"
      )
  ), 
  DT::datatable(
    shared_df,
    rownames = FALSE,
    class = "compact",
    width = "100%",
    options = list(pageLength = 10, scrollX = TRUE),
    colnames = c("No. of pupils", "Avg Scores", "Std Dev", "Std Error")
  ) %>%
    formatRound(columns = c('mean', 'sd', 'se'), digits = 2)
)

  

```

## 4 Visualising Uncertainty: ggdist package

-   [**ggdist**](https://mjskay.github.io/ggdist/index.html) is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.

-   It is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:

    -   for frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));

    -   for Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).

### 4.1 **Visualizing the uncertainty of point estimates: ggdist methods**

In the code chunk below, [`stat_pointinterval()`](https://mjskay.github.io/ggdist/reference/stat_pointinterval.html) of **ggdist** is used to build a visual for displaying distribution of maths scores by race.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval() +
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(face = "bold"))
```

</details>
:::

```{r}
#| echo: false
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval() +
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot of 66% and 95%")+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(face = "bold"))
    
```

Below are some stat_pointinterval() argument

| Argument | Description |
|------------------|------------------------------------------------------|
| **.width** | a vector of probabilities to use that determine the widths of the resulting intervals. The default setting is .width = c(0.66, 0.95), meaning plotting 66% CI and 95% CI |
| .point | This argument determines the point summary (typically mean, median, or mode) |
| **.interval** | It decides the interval type (quantile interval, `qi`; highest-density interval, `hdi`; or highest-density continuous interval, `hdci`). |
| **orientation** | Whether this geom is drawn horizontally or vertically: `"horizontal"` (or `"y"`), `"vertical"` (or `"x"`), NA |

Below we are going to customize the argument we mentioned above:

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = 0.95,
                     .point = median,
                     .interval = qi,
                     .orientation = "na") +
  labs(
    title = "Visualising confidence intervals of median math score",
    subtitle = "Median Point + 95% CI plot")+
    theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(face = "bold"))
```

</details>
:::

```{r}
#| echo: false
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = 0.95,
                     .point = median,
                     .interval = qi,
                     .orientation = "na") +
  labs(
    title = "Visualising confidence intervals of median math score",
    subtitle = "Median Point + 95% CI plot")+
    theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(face = "bold"))
```

Below is the multiple CI plot showing both 95% and 99% levels:

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = c(0.95,0.99),
                     .point = median,
                     .interval = qi,
                     .orientation = "na") +
  labs(
    title = "Visualising confidence intervals of median math score",
    subtitle = "Median Point + 95% CI plot")+
    theme(panel.background = element_rect(fill = "#f3f1e9"),
          plot.background = element_rect(fill = "#f3f1e9",color = NA),
          plot.title = element_text(face = "bold"))
```

</details>
:::

```{r}
#| echo: false
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = c(0.95,0.99),
                     .point = mean,
                     .interval = qi,
                     .orientation = "na") +
  aes(interval_color=stat(level)) +
  scale_color_manual(
    values = c("#6a994e", "#bc4749"), # customize colors for 95% and 99% CI
    aesthetics = "interval_color") +
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple of interval plot of 95% and 99% levels")+
    theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(face = "bold"))
```

### 4.3 **Visualizing the uncertainty of point estimates: ggdist methods**

In the code chunk below, [`stat_gradientinterval()`](https://mjskay.github.io/ggdist/reference/stat_gradientinterval.html) of **ggdist** is used to build a visual for displaying distribution of maths scores by race.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
ggplot(exam, 
       aes(x = RACE,y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)+
  labs(title ="Distribution of English Scores Across Races",
       x = "", y="English Score")+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(face = "bold"))
```

</details>
:::

```{r}
#| echo: false
exam %>%
  ggplot(aes(x = RACE, y = MATHS))+
  stat_gradientinterval(   
    fill = "grey30",      
    show.legend = TRUE)+                        
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Gradient + interval plot")+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(face = "bold"),
        legend.background = element_rect(fill = "#f3f1e9",color = NA))
  
```

### 4.4 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)

### 4.4.1 **Install and launch the ungeviz package**

```{r}
devtools::install_github("wilkelab/ungeviz")
1
```

```{r}
library(ungeviz)
```

### 4.4.2 Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)

Next, the code chunk below will be used to build the HOPs.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
ggplot(data = exam, 
       (aes(x = factor(RACE), 
            y = MATHS))) +
  geom_point(position = position_jitter(
    height = 0.3, 
    width = 0.05), 
    size = 0.4, 
    color = "#0072B2", 
    alpha = 1/2) +
  geom_hpline(data = sampler(25, group = RACE), 
              height = 0.6, 
              color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3)+
  labs(x="Race",y="Math Score")+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(face = "bold"))
```

</details>
:::

```{r}
#| echo: false
ggplot(data = exam, 
       (aes(x = factor(RACE), 
            y = MATHS))) +
  geom_point(position = position_jitter(
    height = 0.3, 
    width = 0.05), 
    size = 0.4, 
    color = "#0072B2", 
    alpha = 1/2) +
  geom_hpline(data = sampler(25, group = RACE), 
              height = 0.6, 
              color = "#D55E00") +
  theme_bw() + 
  transition_states(.draw, 1, 3)+
  labs(x="Race",y="Math Score")+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        plot.title = element_text(face = "bold"))
```

## 5 Reference

-   Kam, T.S. (2025). [Visualising Uncertainty](https://r4va.netlify.app/chap11).
