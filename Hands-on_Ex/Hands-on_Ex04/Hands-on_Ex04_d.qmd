---
title: "Hands-on Exercise 04.d"
author: Johsuan Huang
date: 2024-02-06
date-modified: "last-modified"
description: "Funnel Plots for Fair Comparisons"
categories: [ggplot2,FunnelPlotR]
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## 1 Learning Outcome

Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. The learning objectives are:

-   plotting funnel plots by using **funnelPlotR** package

-   plotting static funnel plot by using **ggplot2** package

-   plotting interactive funnel plot by using both **plotly R** and **ggplot2** packages.

## 2 Getting Started

::: panel-tabset
## Loading the packages

Use the **pacman** package `p_load()` to check, install and launch the following R packages:

```{r}
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

| **Library**              | **Description**                  |
|--------------------------|----------------------------------|
| **FunnelPlotR, ggplot2** | creating funnel plot             |
| **knitr**                | building static html table       |
| **plotly**               | creating interactive funnel plot |

## Importing the data

In this exercise, **COVID-19_DKI_Jakarta.*csv*** will be used. The data was downloaded from [Open Data Covid-19 Provinsi DKI Jakarta portal](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/). 

In this exercise, we are going to compare the cumulative COVID-19 cases and death by sub-district (i.e. kelurahan) as at 31st July 2021, DKI Jakarta.

```{r}
covid19 <- read_csv("data/COVID-19_DKI_Jakarta.csv")
```

## Examining the data

After importing the data, let's examine it to understand its data structure:

The dataset contains 7 attributes and 267 observations with no missing values.

```{r}
head(covid19)
```

```{r}
str(covid19)
```

```{r}
summary(covid19)
```

```{r}
any(is.na(covid19))
```

## Transforming the data

In R, factors are used to handle categorical data and ordered variable. As there are categorical attributes in our dataset, we are going to convert their data type from \<chr\> to \<fctr\>:

```{r}
# convert all chr type into factor type
covid19 <- covid19 %>% mutate_if(is.character, as.factor)

```

After converting the attributes, let's check the data again:

```{r}
head(covid19)
```
:::

## 3 FunnelPlotR methods

[**FunnelPlotR**](https://nhs-r-community.github.io/FunnelPlotR/) package uses ggplot to generate funnel plots. It requires a `numerator` (events of interest), `denominator` (population to be considered) and `group`. The key arguments selected for customisation are:

-   `limit`: plot limits (95 or 99).

-   `label_outliers`: to label outliers (true or false).

-   `Poisson_limits`: to add Poisson limits to the plot.

-   `OD_adjust`: to add overdispersed limits to the plot.

-   `xrange` and `yrange`: to specify the range to display for axes, acts like a zoom function.

-   Other aesthetic components such as graph title, axis labels etc.

### 3.1 FunnelPlotR methods: The basic plot

The code chunk below plots a funnel plot.

```{r}
funnel_plot(
  .data = covid19,
  numerator = Positive,
  denominator = Death,
  group = `Sub-district`
)
```

Things to learn from the code chunk above.

-   `group` in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.

-   By default, `data_type`argument is “SR”.

-   `limit`: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.

### 3.2 FunnelPlotR methods: Makeover 1

The code chunk below plots a funnel plot.

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",   
  xrange = c(0, 6500),  
  yrange = c(0, 0.05))
```

The plot above label 7 outliers.

Things to learn from the code chunk above:

-    `data_type` argument is used to change from default “SR” to “PR” (i.e. proportions).

-    `xrange` and `yrange` are used to set the range of x-axis and y-axis

### 3.3 FunnelPlotR methods: Makeover 2

The code chunk below plots a funnel plot.

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR", #proportion
  xrange = c(0, 6500),  
  yrange = c(0, 0.05),
  label = NA, #remove the label
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases",          
  x_label = "Cumulative COVID-19 Positive Cases", 
  y_label = "Cumulative Fatality Rate"
)

```

## 4 Funnel Plot for Fair Visual Comparison: ggplot2 methods

### 4.1 Computing the basic derived fields

To plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)
```

Next, the *fit.mean* is computed by using the code chunk below.

```{r}
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

### 4.2 Calculate lower and upper limits for 95% and 99.9% CI

The code chunk below is used to compute the lower and upper limits for 95% confidence interval.

```{r}
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
  
```

### 4.3 Plotting a static funnel plot

In the code chunk below, ggplot2 functions are used to plot a static funnel plot.

```{r}
p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12,face="bold"),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA))

p

```

### 4.4 Interactive Funnel Plot: plotly + ggplot2

The funnel plot created using ggplot2 functions can be made interactive with `ggplotly()` of **plotly** r package.

```{r}
fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```

## 5 Reference

-   Kam, T.S. (2025). [Funnel Plots for Fair Comparisons](https://r4va.netlify.app/chap12#funnel-plot-for-fair-visual-comparison-ggplot2-methods).
