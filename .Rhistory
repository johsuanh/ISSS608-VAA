panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA
))
check_h <- check_heteroscedasticity(model1)
plot(check_h)+
theme(legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA
))
model1 <- lm(Price ~ Age_08_04 + KM +
Weight + Guarantee_Period, data = car_resale)
pacman::p_load(tidyverse, knitr, patchwork
ggrepel, ggthemes, ggridges,
pacman::p_load(tidyverse, knitr, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes)
pacman::p_load(tidyverse, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes, ggiraph)
ship <- read_csv("data/Ship_Performance_Dataset.csv")
head(ship)
DT::datatable(ship, class= "display",
caption = "Table 1: Ship Performance Data") %>%
formatStyle(
columns = colnames(ship),
fontSize = '12px',
fontFamily = 'Helvetica',
lineHeight = '1.2'
)
table
DT::datatable(ship, class= "display",
caption = "Table 1: Ship Performance Data") %>%
formatStyle(
columns = colnames(ship),
fontSize = '12px',
fontFamily = 'Helvetica',
lineHeight = '1.2'
)
table
DT::datatable(ship, class= "display",
caption = "Table 1: Ship Performance Data") %>%
formatStyle(
columns = colnames(ship),
fontSize = '12px',
fontFamily = 'Helvetica',
lineHeight = '1.2'
)
str(exam)
str(ship)
ship <- read_csv("data/Ship_Performance_Dataset.csv")
str(ship)
summary(ship)
# check missing value
any(is.na(exam))
# check missing value
any(is.na(ship))
column_to_rownames(ship,var="columnname")
summary(ship)
summary(ship)
# check missing value
any(is.na(ship))
summary(ship)
str(ship)
View(ship)
# check missing value
any(is.na(ship))
distinct(ship)
ship <- ship %>%
mutate_if(is.character, as.factor) %
ship <- ship %>%
mutate_if(is.character, as.factor) >%>
ship <- ship %>%
mutate_if(is.character, as.factor) %>%
mutate(Weekly_Voyage_Count = as.integer(Weekly_Voyage_Count))
head(ship)
ggplot(ship, aes(x = Ship_Type, fill = Maintenance_Status)) +
geom_bar(position = "dodge") +
facet_wrap(~ Route_Type) +
theme_minimal() +
labs(title = "Maintenance Status by Ship Type and Route Type", x = "Ship Type", fill = "Maintenance Status")
ggplot(ship, aes(x = Maintenance_Status, fill = Ship_Type)) +
geom_bar(position = "dodge") +
facet_wrap(~ Route_Type) +
theme_minimal() +
labs(title = "Maintenance Status by Ship Type and Route Type", x = "Ship Type", fill = "Maintenance Status")
ggplot(ship, aes(x = Ship_Type)) +
geom_bar(position = "dodge") +
facet_wrap(~ Route_Type) +
theme_minimal() +
labs(title = "Maintenance Status by Ship Type and Route Type", x = "Ship Type", fill = "Maintenance Status")
ggplot(ship, aes(x = Ship_Type,fill = Route_type)) +
geom_bar(position = "dodge") +
theme_minimal() +
labs(title = "Maintenance Status by Ship Type and Route Type", x = "Ship Type", fill = "Maintenance Status")
ggplot(ship, aes(x = Ship_Type,fill = Route_Type)) +
geom_bar(position = "dodge") +
theme_minimal() +
labs(title = "Maintenance Status by Ship Type and Route Type", x = "Ship Type", fill = "Maintenance Status")
ggplot(ship, aes(x = Ship_Type,fill = Route_Type)) +
geom_bar(position = "stack") +
theme_minimal() +
labs(title = "Maintenance Status by Ship Type and Route Type", x = "Ship Type", fill = "Maintenance Status")
library(ggmosaic)
pacman::p_load(tidyverse, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes, ggiraph,ggmosaic)
ggplot(ship) +
geom_mosaic(aes(weight = 1, x = product(Ship_Type, Route_Type), fill = Maintenance_Status)) +
theme_minimal() +
labs(title = "Mosaic Plot: Ship Type vs Route Type vs Maintenance Status")
ggplot(ship, aes(x = Ship_Type, fill = Route_Type)) +
geom_bar(position = "stack") +
theme_minimal() +
labs(title = "Maintenance Status by Ship Type and Route Type", x = "Ship Type")
ggplot(ship, aes(x = Ship_Type, fill = Route_Type)) +
geom_bar(position = "stack") +
theme_minimal() +
labs(title = "Ship Type by Route Type", x = "Ship Type")
data <- ship_data %>%
group_by(Ship_Type, Route_Type) %>%
summarise(count = n(), .groups = "drop") %>% #Removes all grouping after summarization.
group_by(Ship_Type) %>%
mutate(Proportion = count / sum(count))
data <- ship %>%
group_by(Ship_Type, Route_Type) %>%
summarise(count = n(), .groups = "drop") %>% #Removes all grouping after summarization.
group_by(Ship_Type) %>%
mutate(Proportion = count / sum(count))
ggplot(data, aes(x = Ship_Type, y = Proportion, fill = Route_Type)) +
geom_bar(stat = "identity",position = "stack") +
theme_minimal() +
labs(title = "Ship Type by Route Type", x = "Ship Type")
data <- ship %>%
group_by(Ship_Type, Route_Type) %>%
summarise(count = n(), .groups = "drop") %>% #Removes all grouping after summarization.
group_by(Ship_Type) %>%
mutate(Proportion = count / sum(count))
ggplot(ship, aes(x = Ship_Type, fill = Route_Type)) +
geom_bar(stat = "identity",position = "fill") +
theme_minimal() +
labs(title = "Ship Type by Route Type", x = "Ship Type")
data <- ship %>%
group_by(Ship_Type, Route_Type) %>%
summarise(count = n(), .groups = "drop") %>% #Removes all grouping after summarization.
group_by(Ship_Type) %>%
mutate(Proportion = count / sum(count))
ggplot(ship, aes(x = Ship_Type, fill = Route_Type)) +
geom_bar(stat = "count",position = "fill") +
theme_minimal() +
labs(title = "Ship Type by Route Type", x = "Ship Type")
ggplot(ship, aes(x = Ship_Type, fill = Route_Type)) +
geom_bar(stat = "count",position = "fill") +
geom_text(aes(label=paste0(sprintf("%1.1f", percent*100),"%")),
position=position_stack(vjust=0.5), colour="white", size = 2))+
ggplot(ship, aes(x = Ship_Type, fill = Route_Type)) +
geom_bar(stat = "count",position = "fill") +
geom_text(aes(label=paste0(sprintf("%1.1f", percent*100),"%")),
position=position_fill(vjust=0.5), colour="white", size =2)+
theme_classic() +
labs(title = "Ship Type by Route Type", x = "Ship Type")
dt <- ship %>%
group_by(Ship_Type,Route_Type) %>%
tally()%>%
mutate(percent=n/sum(n))
ggplot(dt, aes(x = Ship_Type, fill = Route_Type)) +
geom_bar(stat = "count",position = "fill") +
geom_text(aes(label=paste0(sprintf("%1.1f", percent*100),"%")),
position=position_fill(vjust=0.5), colour="white", size =2)+
theme_classic() +
labs(title = "Ship Type by Route Type", x = "Ship Type")
dt <- ship %>%
group_by(Ship_Type,Route_Type) %>%
tally()%>%
mutate(percent=n/sum(n))
ggplot(dt, aes(x = Ship_Type, y=n, fill = Route_Type)) +
geom_bar(stat = "count",position = "fill") +
geom_text(aes(label=paste0(sprintf("%1.1f", percent*100),"%")),
position=position_fill(vjust=0.5), colour="white", size =2)+
theme_classic() +
labs(title = "Ship Type by Route Type", x = "Ship Type")
dt <- ship %>%
group_by(Ship_Type,Route_Type) %>%
tally()%>%
mutate(percent=n/sum(n))
ggplot(dt, aes(x = Ship_Type, y=n, fill = Route_Type)) +
geom_bar(stat = "identity",position = "fill") +
geom_text(aes(label=paste0(sprintf("%1.1f", percent*100),"%")),
position=position_fill(vjust=0.5), colour="white", size =2)+
theme_classic() +
labs(title = "Ship Type by Route Type", x = "Ship Type")
dt <- ship %>%
group_by(Ship_Type,Route_Type) %>%
tally()%>%
mutate(percent=n/sum(n))
ggplot(dt, aes(x = Ship_Type, y=n, fill = Route_Type)) +
geom_bar(stat = "identity",position = "stack") +
geom_text(aes(label=paste0(sprintf("%1.1f", percent*100),"%")),
position=position_stack(vjust=0.5), colour="white", size =2)+
theme_classic() +
labs(title = "Ship Type by Route Type", x = "Ship Type")
dt <- ship %>%
group_by(Ship_Type,Route_Type) %>%
tally()%>%
mutate(percent=n/sum(n))
pacman::p_load(tidyverse, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes, ggiraph,ggmosaic)
ship <- read_csv("data/Ship_Performance_Dataset.csv")
pacman::p_load(tidyverse, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes, ggiraph,ggmosaic)
ship <- read_csv("data/Ship_Performance_Dataset.csv")
#| echo: false
DT::datatable(ship, class= "display",
caption = "Table 1: Ship Performance Data") %>%
formatStyle(
columns = colnames(ship),
fontSize = '12px',
fontFamily = 'Helvetica',
lineHeight = '1.2'
)
# mutate data type
ship <- ship %>%
mutate_if(is.character, as.factor) %>%
mutate(Weekly_Voyage_Count = as.integer(Weekly_Voyage_Count))
#check the revised data type
head(ship)
ggplot(ship, aes(x=Ship_Type,y=Revenue_per_Voyage_USD))+
geom_bar()
geom_bar(stat=count
ggplot(ship, aes(x=Ship_Type,y=Revenue_per_Voyage_USD))+
ggplot(ship, aes(x=Ship_Type,y=Revenue_per_Voyage_USD))+
geom_bar(stat="count")
ggplot(ship, aes(x=Ship_Type,y=Revenue_per_Voyage_USD))+
geom_histogram()
ggplot(ship, aes(x=Ship_Type,y=Revenue_per_Voyage_USD))+
geom_histogram(stat = "bin",position = "identity")
ggplot(ship, aes(x=Revenue_per_Voyage_USD))+
geom_histogram()
ggplot(ship, aes(x=Revenue_per_Voyage_USD,fill = Ship_Type))+
geom_histogram()
ggplot(ship, aes(x=Revenue_per_Voyage_USD, y= Operational_Cost_USD ))+
geom_point()
ggplot(ship, aes(x=Revenue_per_Voyage_USD, y= Operational_Cost_USD, color = Ship_Type))+
geom_point()
pacman::p_load(tidyverse, ggtern, plotly)
pacman::p_load(tidyverse, ggtern, plotly)
exam <- read_csv("data/respopagsex2000to2018_tidy.csv")
exam <- read_csv("data/respopagsex2000to2018_tidy.csv")
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv")
pacman::p_load(tidyverse, ggtern, plotly)
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv")
head(pop_data)
str(pop_data)
summary(pop_data)
any(is.na(pop_data))
View(pop_data)
View(pop_data)
unique(pop_data.AG)
unique(pop_data%AG)
pop_data %>% distinct(AG)
agpop_muted <- pop_data %>%
mutate('Year'=as.character(Year)) %>%
spread(AG, Population) %>%
head(agpop_muted)
agpop_muted <- pop_data %>%
mutate('Year'=as.character(Year)) %>%
spread(AG, Population)
head(agpop_muted)
agpop_muted <- pop_data %>%
mutate('Year'=as.character(Year)) %>%
spread(AG, Population)
str(agpop_muted)
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
selected_var <- ship %>%
select(Date, Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
plot_histogram <- function(df, column) {
ggplot(df, aes_string(x = column)) +
geom_histogram( fill = "grey30",
color = "black", alpha = 0.7) +
labs(x = column, y = "Frequency") +
theme_classic()+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
}
num_var <- c("Speed_Over_Ground_knots", "Engine_Power_kW", "Distance_Traveled_nm", "Draft_meters",
"Cargo_Weight_tons", "Operational_Cost_USD", "Revenue_per_Voyage_USD", "Turnaround_Time_hours",
"Efficiency_nm_per_kWh", "Seasonal_Impact_Score", "Weekly_Voyage_Count", "Average_Load_Percentage")
histograms <- lapply(num_var, function(col) plot_histogram(ship, col))
ship <- read_csv("data/Ship_Performance_Dataset.csv")
pacman::p_load(tidyverse, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes, ggiraph,ggmosaic)
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
selected_var <- ship %>%
select(Date, Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)
unique_var
summary(ship)
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
selected_var <- ship %>%
select(Date, Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)
unique_var
pacman::p_load(tidyverse, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes, ggiraph,ggmosaic)
ship <- read_csv("data/Ship_Performance_Dataset.csv")
#| echo: false
DT::datatable(ship, class= "display",
caption = "Table 1: Ship Performance Data") %>%
formatStyle(
columns = colnames(ship),
fontSize = '12px',
fontFamily = 'Helvetica',
lineHeight = '1.2'
)
str(ship)
summary(ship)
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
selected_var <- ship %>%
select(Date, Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)
unique_var
# check missing value
any(is.na(ship))
# check None value
cat_var <- c('Route_Type', 'Ship_Type', 'Engine_Type', 'Maintenance_Status', 'Weather_Condition')
#check "None" value in cat variables
none_counts <- ship %>%
select(all_of(cat_var)) %>%
summarise(across(everything(), ~ sum(. == "None")))
records_with_none <- ship %>%
filter(if_any(all_of(cat_var), ~ . == "None"))
# check duplicate records
distinct(ship)
# mutate data type
ship <- ship %>%
mutate_if(is.character, as.factor) %>%
mutate(Weekly_Voyage_Count = as.integer(Weekly_Voyage_Count))
#check the revised data type
head(ship)
plot_histogram <- function(df, column) {
ggplot(df, aes_string(x = column)) +
geom_histogram( fill = "grey30",
color = "black", alpha = 0.7) +
labs(x = column, y = "Frequency") +
theme_classic()+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
}
num_var <- c("Speed_Over_Ground_knots", "Engine_Power_kW", "Distance_Traveled_nm", "Draft_meters",
"Cargo_Weight_tons", "Operational_Cost_USD", "Revenue_per_Voyage_USD", "Turnaround_Time_hours",
"Efficiency_nm_per_kWh", "Seasonal_Impact_Score", "Weekly_Voyage_Count", "Average_Load_Percentage")
histograms <- lapply(num_var, function(col) plot_histogram(ship, col))
combined_plot <- wrap_plots(histograms, ncol = 4)
print(combined_plot)
plot_bar <- function(df, column) {
ggplot(df, aes_string(x = column)) +
geom_bar( fill = "grey30",
color = "black", alpha = 0.7) +
labs(x = column, y = "Frequency") +
theme_classic()+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA),
axis.text.x = element_text(angle = 45, hjust = 1)
)
}
cat_var <- c ("Route_Type", "Ship_Type", "Engine_Type", "Maintenance_Status",
"Weather_Condition")
bars <- lapply(cat_var, function(col) plot_bar(ship, col))
combined_plot_bar <- wrap_plots(bars, ncol = 3)+ plot_layout(guides = "collect")
print(combined_plot_bar)
ggplot(ship, aes(x=Revenue_per_Voyage_USD, y= Operational_Cost_USD, color = Ship_Type))+
geom_point()
pacman::p_load(tidyverse, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes, ggiraph,ggmosaic)
ship <- read_csv("data/Ship_Performance_Dataset.csv")
#| echo: false
DT::datatable(ship, class= "display",
caption = "Table 1: Ship Performance Data") %>%
formatStyle(
columns = colnames(ship),
fontSize = '12px',
fontFamily = 'Helvetica',
lineHeight = '1.2'
)
str(ship)
summary(ship)
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
selected_var <- ship %>%
select(Date, Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)
unique_var
# select specific columns
selected_var <- ship %>%
select( Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
# select specific columns
selected_var <- ship %>%
select(Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
#summary(ship)
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
#selected_var <- ship %>% select(Date, Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
cat_var <- c('Date','Route_Type', 'Ship_Type', 'Engine_Type', 'Maintenance_Status', 'Weather_Condition')
# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
#selected_var <- ship %>% select(Date, Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
selected_var <- c('Date','Route_Type', 'Ship_Type', 'Engine_Type', 'Maintenance_Status', 'Weather_Condition')
# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)
pacman::p_load(tidyverse, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes, ggiraph,ggmosaic)
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
#selected_var <- ship %>% select(Date, Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
selected_var <- c('Date','Route_Type', 'Ship_Type', 'Engine_Type', 'Maintenance_Status', 'Weather_Condition')
# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)
unique_var
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
selected_var <- ship %>% select(Date, Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)
unique_var
install.packages(c("bayestestR", "insight", "modelbased", "see", "sessioninfo"))
