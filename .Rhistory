facet_wrap(~ gender)
ggplot(data = exam_data,
aes(x = CLASS, y = MATHS))+
geom_boxplot() +
facet_wrap(~ gender)
ggplot(data = exam_data,
aes(x = CLASS, y = MATHS))+
geom_boxplot() +
facet_wrap(~ GENDER)
ggplot(data = exam_data,
aes(x = MATHS))+
geom_histogram(bins=20,fill="#E8C8DB",color="black")+
facet_wrap(~ CLASS, nrow = 3)
ggplot(data = exam_data,
aes(x = CLASS, y = MATHS))+
geom_boxplot() +
facet_wrap(~ RACE)
ggplot(data = exam_data,
aes(x = CLASS, y = MATHS))+
geom_boxplot() +
stat_summary(geom = "point", fun = mean, colour ="red", size=1) +
facet_wrap(~ RACE)
ggplot(data = exam_data,
aes(x = CLASS, y = MATHS))+
geom_boxplot() +
stat_summary(geom = "point", fun = mean, colour ="#E8C8DB", size=1) +
facet_wrap(~ RACE)
ggplot(data = exam_data,
aes(x = CLASS, y = MATHS))+
geom_boxplot() +
stat_summary(geom = "point", fun = mean, colour ="#C8DBE8", size=1) +
facet_wrap(~ RACE)
ggplot(data = exam_data,
aes(x = CLASS, y = MATHS))+
geom_boxplot() +
stat_summary(geom = "point", fun = mean, colour ="#C8DBE8", size=2) +
facet_wrap(~ RACE)
ggplot(data = exam_data,
aes(x = CLASS, y = MATHS))+
geom_boxplot() +
stat_summary(geom = "point", fun = mean, colour ="#C8DBE8", size=2) +
facet_grid(~ RACE)
ggplot(data = exam_data,
aes(x = MATHS))+
geom_histogram(bins=20,fill="#E8C8DB",color="black")+
facet_wrap(~ CLASS, nrow = 3)+
ggtitle("Distribution of Math Scores by Class")
ggplot(data = exam_data,
aes(x = MATHS))+
geom_histogram(bins=20,fill="#E8C8DB",color="black")+
facet_wrap(~ CLASS, nrow = 3)+
ggtitle("Distribution of Math Scores by Class")+
theme(plot.title = element_text(hjust = 0.5, face="bold"))
ggplot(data = exam_data,
aes(MATHS))+
geom_histogram(bins=20,fill="#E8C8DB",color="black")+
facet_grid(~ CLASS)
ggplot(data = exam_data,
aes(x = RACE))+
geom_bar(bins=20,fill="#E8C8DB",color="black")+
coord_flip()+
theme_bw()
install.packages(c("ggrepel", "ggthemes", "hrbrthemes", "patchwork"))
gc()
gc()
gc()
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60,
xlab = "English scores")
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60,
xlab = "English scores")
pacman::p_load(ggstatsplot, tidyverse, gghistostats)
pacman::p_load(ggstatsplot, tidyverse)
pacman::p_load(ggstatsplot, tidyverse)
exam <- read_csv("data/Exam_data.csv")
col <- c("CLASS","GENDER","RACE")
exam <- exam %>% mutate(across(all_of(col), as.factor))
col <- c("CLASS","GENDER","RACE")
exam <- exam %>% mutate(across(all_of(col), as.factor))
head(exam)
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60,
xlab = "English scores")
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
centrality.line.args = list(color = "#A4A8D9", linewidth = 1, linetype = "dashed"))
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(color = "grey90")
centrality.line.args = list(color = "#A4A8D9", linewidth = 1, linetype = "dashed"))
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(color = "grey90"),
centrality.line.args = list(color = "#A4A8D9", linewidth = 1, linetype = "dashed"))
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90"),
centrality.line.args = list(color = "#A4A8D9", linewidth = 1, linetype = "dashed"))
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "#A4A8D9", linewidth = 1, linetype = "dashed"))
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "black", linewidth = 1, linetype = "dashed"))
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "black", linewidth = 1, linetype = "dashed"))+
theme_classic()+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "black", linewidth = 1, linetype = "dashed"))+
theme_classic()+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
#| echo: false
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "black", linewidth = 1, linetype = "dashed"))+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
#| echo: false
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
bf.prior = 0.5,
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "black", linewidth = 1, linetype = "dashed"))+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
#| echo: false
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "bayes",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "black", linewidth = 1, linetype = "dashed"))+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
#| echo: false
ggbetweenstats(
data = exam,
x = GENDER,
y = MATHS,
type = "np",
messages = FALSE
)
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
#| echo: false
ggbetweenstats(
data = exam,
x = GENDER,
y = MATHS,
type = "np",
messages = FALSE
)+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
#| echo: false
ggplot(exam, aes(x=ENGLISH, y=CLASS,
fill = stat(x)))+
geom_density_ridges_gradient(
scale = 3,
rel_min_height = 0.01)+
scale_fill_viridis_c(name = NULL,
option = "C",
alpha=1)+
scale_x_continuous(name = "English Grades", expand = c(0,0))+
scale_y_discrete(name=NULL)+
theme_ridges()+
labs(title = 'Gradient Colors for English Scores') +
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
#| echo: false
ggbetweenstats(
data = exam,
x = GENDER,
y = MATHS,
type = "np",
messages = FALSE)+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
ggbetweenstats(
data = exam,
x = RACE,
y = ENGLISH,
type = "p",
mean.ci = TRUE,
pairwise.comparisons = TRUE,
pairwise.display = "s",
p.adjust.method = "fdr",
messages = FALSE
)+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
ad.test(exam$ENGLISH)
pacman::p_load(ggstatsplot, tidyverse, nortest)
pacman::p_load(ggstatsplot, tidyverse, nortest)
ad.test(exam$ENGLISH)
ad.test(exam$MATHS)
#| echo: false
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "p",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "black", linewidth = 1, linetype = "dashed"))+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
#| echo: false
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "np",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "black", linewidth = 1, linetype = "dashed"))+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
ad.test(exam$ENGLISH)
#| echo: false
set.seed(1)
gghistostats(exam,
x = ENGLISH,
type = "np",
test.value = 60, #mu
xlab = "English scores",
bin.args = list(fill = "grey90", color="grey30"),
centrality.line.args = list(color = "black", linewidth = 1, linetype = "dashed"))+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
head(exam)
male <- exam$MATHS[GENDER == Male ]
male <- exam$MATHS[exam$GENDER == "Male"]
male <- exam$MATHS[exam$GENDER == "Male"]
female <- exam$MATHS[exam$GENDER == "Male"]
male
male <- exam$MATHS[exam$GENDER == "Male"]
female <- exam$MATHS[exam$GENDER == "Male"]
ad.test(male)
female <- exam$MATHS[exam$GENDER == "Male"]
ad.test(female)
female <- exam$MATHS[exam$GENDER == "Female"]
ad.test(female)
by(exam$ENGLISH, exam$GENDER, shapiro.test)
by(exam$ENGLISH, exam$GENDER, shapiro.test)
by(exam$ENGLISH, exam$RACE, shapiro.test)
ggbetweenstats(
data = exam,
x = RACE,
y = ENGLISH,
type = "p",
mean.ci = TRUE,
pairwise.comparisons = TRUE,
pairwise.display = "s",
p.adjust.method = "fdr",
messages = FALSE
)+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
ggscatterstats(data = exam,
x = MATHS,
y = ENGLISH,
marginal = FALSE,)
ggscatterstats(data = exam,
x = MATHS,
y = ENGLISH,
marginal = FALSE,)+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
ggscatterstats(data = exam,
x = MATHS,
y = ENGLISH,
marginal = FALSE,)+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
exam <- exam %>%
mutate(MATHs_bins=
cut(MATHS, breaks = c(0,60,75,85,100)))
exam <- read_csv("data/Exam_data.csv")
exam1 <- exam %>%
mutate(MATHs_bins=
cut(MATHS, breaks = c(0,60,75,85,100)))
head(exam1)
ggbarstats(exam1,
x = MATHS_bins,
y = GENDER)
exam1 <- exam %>%
mutate(MATHS_bins=
cut(MATHS, breaks = c(0,60,75,85,100)))
head(exam1)
ggbarstats(exam1,
x = MATHS_bins,
y = GENDER)
ggbarstats(exam1,
x = MATHS_bins,
y = GENDER)+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
ggbarstats(exam1,
x = MATHS_bins,
y = GENDER)+
theme(legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA
))
pacman::p_load(readxl, performance, parameters, see)
car_resale <- read_csv("data/ToyotaCorolla.xls")
car_resale <- read_csv("data/ToyotaCorolla.xls")
car_resale <- read_xls("data/ToyotaCorolla.xls")
car_resale <- read_xls("data/ToyotaCorolla.xls","data")
head(car_resale)
str(car_resale)
summary(car_resale)
any(is.na(car_resale))
model <- lm(Price ~ Age_08_04 +
Mfg_Year +
KM +
Weight +
Guarantee_Period,
data=car_resale)
model
check_collinearity(model)
check_c <- check_collinearity(model)
plot(check_c)
check_c <- check_collinearity(model)
plot(check_c)
check_c <- check_collinearity(model)
plot(check_c)
check_c <- check_collinearity(model)
plot(check_c)+
theme(legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA
))
check_c <- check_collinearity(model)
check_c
check_c <- check_collinearity(model)
plot(check_c)
ggplot(check_c, aes(x = Component, y = Value))
colnames(check_c)
check_c <- check_collinearity(model)
model <- lm(Price ~ Age_08_04 +
Mfg_Year +
KM +
Weight +
Guarantee_Period,
data=car_resale)
pacman::p_load(readxl, performance, parameters, see)
car_resale <- read_xls("data/ToyotaCorolla.xls","data")
check_c <- check_collinearity(model)
check_collinearity(model)
model <- lm(Price ~ Age_08_04 +
Mfg_Year +
KM +
Weight +
Guarantee_Period,
data=car_resale)
model
check_collinearity(model)
check_c <- check_collinearity(model)
plot(check_c)
library(performance)
check_c <- check_collinearity(your_model)
library(performance)
check_c <- check_collinearity(model)
plot(check_c)
check_c <- check_c %>%
rename(x = Term, y = VIF, se = SE_factor)
library(performance)
check_c <- check_collinearity(model)
plot(check_c)
colnames(check_c)
library(ggplot2)
ggplot(check_c, aes(x = Age_08_04, y = Price)) +
geom_point() +
theme_minimal(
library(ggplot2)
ggplot(check_c, aes(x = Age_08_04, y = Price)) +
geom_point() +
theme_minimal()
check_c <- check_c %>%
rename(x = Term, y = VIF, se = SE_factor)
library(performance)
check_c <- check_collinearity(model)
plot(check_c)
check_c <- check_c %>%
rename(x = Term, y = VIF, se = SE_factor)
library(performance)
check_c <- check_collinearity(model)
ggplot(check_c)
pacman::p_load(readxl, performance, parameters, see)
check_c <- check_c %>%
rename(x = Term, y = VIF, se = SE_factor)
library(performance)
check_c <- check_collinearity(model)
ggplot(check_c)
check_c <- check_c %>%
rename(x = Term, y = VIF, se = SE_factor)
library(performance)
check_c <- check_collinearity(model)
plot(check_c)
check_c <- check_collinearity(model)
plot(check_c) +
theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
legend.background = element_rect(fill="#f5f5f5"),
panel.background = element_rect(fill="#f5f5f5"))
library(ggplot2)
ggplot(check_c, aes(x = Age_08_04, y = )) +
geom_point() +
theme_minimal()
x <- check_collinearity(model)
plot(x) +
theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
legend.background = element_rect(fill="#f5f5f5"),
panel.background = element_rect(fill="#f5f5f5"))
check_c <- check_collinearity(model)
see::plot.see_check_collinearity(check_c)+
theme(plot.background = element_rect(fill = "#f5f5f5", color = "#f5f2f5"),
legend.background = element_rect(fill="#f5f5f5"),
panel.background = element_rect(fill="#f5f5f5"))
check_c <- check_collinearity(model)
check_c <- check_c %>%
rename(Component = Term
see::plot.see_check_collinearity(check_c)+
check_c <- check_collinearity(model)
check_c <- check_c %>%
rename(Component = Term
plot.see_check_collinearity(check_c)+
check_c <- check_collinearity(model)
check_c <- check_c %>%
rename(Component = Term
plot(check_c)+
check_c <- check_collinearity(model)
check_c <- check_c %>%
rename(Component = Term
plot(check_c)
check_c <- check_collinearity(model)
plot(check_c)
plot(check_c)
check_c <- check_c %>%
rename(Component = Term)
plot(check_c)
check_collinearity(model)
check_c <- check_c %>%
rename(Component = Term)
check_c <- check_c %>%
rename(Component = Term)
plot(check_c)
check_c <- check_collinearity(model)
plot(check_c)
