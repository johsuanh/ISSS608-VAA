legend.position = "top",
legend.title = element_text(size=8),
legend.key.size = unit(0.3, "cm"),
legend.text = element_text(size=6),
legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA)
)
plot(p)
# Apply log1p transformation
ship_cleaned <- ship_cleaned %>%
mutate(
Engine_Power_Log = log1p(Engine_Power_kW_per_V),
Distance_Travel_Log = log1p(distance_travel_per_V)
)
# Create the scatter plot with log1p scale
RevVsOp <- ggplot(ship_cleaned, aes(x = Engine_Power_Log,
y = Distance_Travel_Log,
size =Efficiency_nm_per_kWh,
color = Route_Type)) +
geom_point(alpha = 0.3) +  # Adjust transparency for better visibility
scale_color_manual(values = my_palette)+
scale_size_continuous(range = c(0.1, 6)) +  # Adjust size range (min, max)
labs(
x = "log(1 + Engine Power)",
y = "log(1 + Distance Travelled)",
title = "Engine Power vs. Distance Travelled")+
theme_classic()+
theme(
axis.title.y = element_text(size=10),
axis.title.x = element_text(size=10),
axis.text = element_text(size = 8),
legend.position = 'bottom',
legend.key.size = unit(0.2,"cm"),
legend.text = element_text(size=8),
legend.title = element_text(size=8),
legend.background =  element_rect(fill = "#f3f1e9"),
plot.title = element_text(size=15, face='bold',hjust = 0.5),
panel.background = element_rect(fill = "#f3f1e9"),
panel.grid= element_line(color='grey60',size=0.1),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
# Marginal densities along x axis
xdens <- axis_canvas(RevVsOp, axis = "x") +
geom_boxplot(data = ship_cleaned, aes(x = Engine_Power_Log, fill = Route_Type),
alpha = 0.5, size = 0.2) +
scale_fill_manual(values = my_palette)
ydens <- axis_canvas(RevVsOp, axis = "y", coord_flip = TRUE) +
geom_boxplot(data = ship_cleaned, aes(x = Distance_Travel_Log, fill = Route_Type),
alpha = 0.5, size = 0.2) +
coord_flip() +
scale_fill_manual(values = my_palette)
p1 <- insert_xaxis_grob(RevVsOp, xdens, grid::unit(.2, "null"), position = "top")
p2 <- insert_yaxis_grob(p1, ydens, grid::unit(.2, "null"), position = "right")
p2
# Apply log1p transformation
ship_cleaned <- ship_cleaned %>%
mutate(
Engine_Power_Log = log1p(Engine_Power_kW_per_V),
Distance_Travel_Log = log1p(distance_travel_per_V)
)
# Create the scatter plot with log1p scale
RevVsOp <- ggplot(ship_cleaned, aes(x = Engine_Power_Log,
y = Distance_Travel_Log,
size =Efficiency_nm_per_kWh,
color = Route_Type)) +
geom_point(alpha = 0.3) +  # Adjust transparency for better visibility
scale_color_manual(values = my_palette)+
scale_size_continuous(range = c(0.1, 6)) +  # Adjust size range (min, max)
labs(
x = "log(1 + Engine Power)",
y = "log(1 + Distance Travelled)",
title = "Engine Power vs. Distance Travelled")+
theme_classic()+
theme(
axis.title.y = element_text(size=10),
axis.title.x = element_text(size=10),
axis.text = element_text(size = 8),
legend.position = 'bottom',
legend.key.size = unit(0.2,"cm"),
legend.text = element_text(size=8),
legend.title = element_text(size=8),
legend.background =  element_rect(fill = "#f3f1e9"),
plot.title = element_text(size=15, face='bold',hjust = 0.5),
panel.background = element_rect(fill = "#f3f1e9"),
panel.grid= element_line(color='grey60',size=0.1),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
# Marginal densities along x axis
xdens <- axis_canvas(RevVsOp, axis = "x") +
geom_boxplot(data = ship_cleaned, aes(x = Engine_Power_Log, fill = Route_Type),
alpha = 0.5, size = 0.2) +
scale_fill_manual(values = my_palette)
ydens <- axis_canvas(RevVsOp, axis = "y", coord_flip = TRUE) +
geom_boxplot(data = ship_cleaned, aes(x = Distance_Travel_Log, fill = Route_Type),
alpha = 0.5, size = 0.2) +
coord_flip() +
scale_fill_manual(values = my_palette)
p1 <- insert_xaxis_grob(RevVsOp, xdens, grid::unit(.2, "null"), position = "top")
p2 <- insert_yaxis_grob(p1, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(p2)
# Create the plot
p <- ggplot(ship_no_outliers, aes(x = Net_margin_per_Voyage,
y = interaction(Route_Type, Ship_Type),
fill = Ship_Type)) +   # Added missing fill
stat_density_ridges(geom = "density_ridges_gradient",
calc_ecdf = TRUE,
quantiles = 4,
quantile_lines = TRUE,
alpha = 0.5,    # Slightly increase transparency for clarity
scale = 0.8) +  # Reduce overlap
scale_fill_manual(values = my_palette) +
facet_wrap(~ factor(Season, levels = c("Spring", "Summer", "Fall", "Winter")), ncol = 4) +  # Set order in facet_wrap
theme_ridges() +
labs(title = "Net Margin Distribution Breakdown Excluding Outliers",x="Net Margin (%)" ,y="Route & Engine Type")+
theme(
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
strip.text = element_text(size = 9, face = "bold"),  # Facet title size
plot.margin = margin(10, 20, 10, 20),
legend.position = "top",
legend.title = element_text(size=8),
legend.key.size = unit(0.3, "cm"),
legend.text = element_text(size=6),
legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA)
)
plot(p)
gc()
# Create the plot
p <- ggplot(ship_no_outliers, aes(x = Net_margin_per_Voyage,
y = interaction(Route_Type, Ship_Type),
fill = Ship_Type)) +   # Added missing fill
boxplot()+
scale_fill_manual(values = my_palette) +
facet_wrap(~ factor(Season, levels = c("Spring", "Summer", "Fall", "Winter")), ncol = 4) +  # Set order in facet_wrap
theme_ridges() +
labs(title = "Net Margin Distribution Breakdown Excluding Outliers",x="Net Margin (%)" ,y="Route & Engine Type")+
theme(
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
strip.text = element_text(size = 9, face = "bold"),  # Facet title size
plot.margin = margin(10, 20, 10, 20),
legend.position = "top",
legend.title = element_text(size=8),
legend.key.size = unit(0.3, "cm"),
legend.text = element_text(size=6),
legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA)
)
# create New_date (monthly)
ship_cleaned <- ship_cleaned %>%
mutate(New_Date = as.Date(paste(format(Date, "%Y"),
format(Date, "%m"),
"01", sep = "-"),
format = "%Y-%m-%d"))
gc()
pacman::p_load(tidyverse, patchwork,
ggrepel, ggthemes, ggridges,
ggdist, ggiraph, plotly, DT,
hrbrthemes, ggiraph,ggstatsplot,parallelPlot,GGally,
cowplot)
ship <- read_csv("data/Ship_Performance_Dataset.csv")
str(ship)
summary(ship)
# define a function called get_unique_var:
get_unique_var <- function(column) {
unique_vals <- unique(ship[[column]])
unique_count <- length(unique_vals)
paste("Column Name:", column,
"| Unique Count:", unique_count,
"| Unique Values:", paste(unique_vals, collapse = ", "))
}
# select specific columns
selected_var <- ship %>% select(Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)
# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)
unique_var
# check missing value
any(is.na(ship))
# check None value
cat_var <- c('Route_Type', 'Ship_Type', 'Engine_Type', 'Maintenance_Status', 'Weather_Condition')
#check "None" value in cat variables
none_counts <- ship %>%
select(all_of(cat_var)) %>%
summarise(across(everything(), ~ sum(. == "None")))
none_counts
#| echo: false
records_with_none <- ship %>%
filter(if_any(all_of(cat_var), ~ . == "None"))
DT::datatable(records_with_none, class= "display",
caption = "Table 1: Ship Performance Data") %>%
formatStyle(
columns = colnames(ship),
fontSize = '12px',
fontFamily = 'Helvetica',
lineHeight = '1.2'
)
# check duplicate records
distinct(ship)
# mutate data type
ship <- ship %>%
mutate_if(is.character, as.factor) %>%
mutate(Weekly_Voyage_Count = as.integer(Weekly_Voyage_Count))
#check the revised data type
head(ship)
#| echo: false
# select numeric variables
ship_numeric <- ship %>% select_if(is.numeric)
# unpivot the data from wide to long format
ship_long <- ship_numeric %>%
pivot_longer(cols = everything(), # select all num variables
names_to = "variable",
values_to = "value")
# Plot histograms for all numeric variables with facets
ggplot(ship_long, aes(x = value)) +
geom_histogram(bins = 30, fill = "grey70", color = "grey30") +
facet_wrap(~ variable, scales = "free") +
labs(title = "Histograms of All Numeric Variables",
x = "", y = "Frequency") +
theme_minimal()+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA),
panel.grid = element_blank(),
)
#| echo: false
# select only char variables
ship_factors <- ship %>% select_if(is.factor)
# unpivot the data from wide to long format
ship_long_factors <- ship_factors %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "value")
# customized palette
my_palette <- c("#D989AE", "#96C6D9", "#F2CD88", "#D9725B", "#468C6C", "grey60")
# plot bar charts for all categorical variables
ggplot(ship_long_factors, aes(x = value, fill = variable)) +
geom_bar() +
facet_wrap(~ variable, scales = "free") +  # Facet by variable name
scale_fill_manual(values = my_palette) +
labs(title = "Bar Plots of All Categorical Variables",
x = "", y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size=13, hjust=0),
legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA),
legend.position = "none",
axis.text.x = element_text(angle=20, hjust=1, size= 7),
axis.text.y = element_text(size=6),
panel.grid = element_blank())
# divide Operational cost and revenue by 1000
ship_cleaned <- ship %>%
mutate(Cost_per_Voyage_k = Operational_Cost_USD/1000)
ship_cleaned <- ship_cleaned %>%
mutate(Revenue_per_Voyage_k = Revenue_per_Voyage_USD/1000)
# create New_date (monthly)
ship_cleaned <- ship_cleaned %>%
mutate(New_Date = as.Date(paste(format(Date, "%Y"),
format(Date, "%m"),
"01", sep = "-"),
format = "%Y-%m-%d"))
# create season var
ship_cleaned <- ship_cleaned %>%
mutate(Season = case_when(
month(Date) %in% 3:5 ~ "Spring",
month(Date) %in% 6:8 ~ "Summer",
month(Date) %in% 9:11 ~ "Fall",
month(Date) %in% c(12, 1, 2) ~ "Winter"
))
# create profit per voyage
ship_cleaned <- ship_cleaned %>%
mutate(Net_margin_per_Voyage = ((Revenue_per_Voyage_k - Cost_per_Voyage_k) / Revenue_per_Voyage_k) * 100)
# create profit per voyage
ship_cleaned <- ship_cleaned %>%
mutate(Net_profit_per_Voyage = Revenue_per_Voyage_k - Cost_per_Voyage_k
# create distance travel per voyage
ship_cleaned <- ship_cleaned %>%
# create New_date (monthly)
ship_cleaned <- ship_cleaned %>%
mutate(New_Date = as.Date(paste(format(Date, "%Y"),
format(Date, "%m"),
"01", sep = "-"),
format = "%Y-%m-%d"))
# create season var
ship_cleaned <- ship_cleaned %>%
mutate(Season = case_when(
month(Date) %in% 3:5 ~ "Spring",
month(Date) %in% 6:8 ~ "Summer",
month(Date) %in% 9:11 ~ "Fall",
month(Date) %in% c(12, 1, 2) ~ "Winter"
))
# create profit per voyage
ship_cleaned <- ship_cleaned %>%
mutate(Net_margin_per_Voyage = ((Revenue_per_Voyage_k - Cost_per_Voyage_k) / Revenue_per_Voyage_k) * 100)
# create profit per voyage
ship_cleaned <- ship_cleaned %>%
mutate(Net_profit_per_Voyage = Revenue_per_Voyage_k - Cost_per_Voyage_k)
# create distance travel per voyage
ship_cleaned <- ship_cleaned %>%
mutate(distance_travel_per_V = Distance_Traveled_nm / Weekly_Voyage_Count)
# create Engine_Power_kW per voyage
ship_cleaned <- ship_cleaned %>%
mutate(Engine_Power_kW_per_V = Engine_Power_kW / Weekly_Voyage_Count)
# These variables are dropped
ship_cleaned <- ship_cleaned %>% select (-c('Operational_Cost_USD','Revenue_per_Voyage_USD','Draft_meters','Speed_Over_Ground_knots','Engine_Power_kW','Distance_Traveled_nm','Date'))
# retain all the data is not "None"
ship_cleaned <- ship_cleaned %>%
filter(if_all(all_of(cat_var), ~ . != "None"))
summary(ship_cleaned)
#| echo: false
# select numeric variables
ship_cleaned_num<- ship_cleaned %>% select_if(is.numeric)
# unpivot the data from wide to long format
ship_long <- ship_cleaned_num %>%
pivot_longer(cols = everything(), # select all num variables
names_to = "variable",
values_to = "value")
# Plot histograms for all numeric variables with facets
ggplot(ship_long, aes(x = value)) +
geom_histogram(bins = 30, fill = "grey70", color = "grey30") +
facet_wrap(~ variable, scales = "free") +
labs(title = "Histograms of All Numeric Variables",
x = "", y = "Frequency") +
theme_minimal()+
theme(panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA),
panel.grid = element_blank(),
)
# Apply log1p transformation
ship_cleaned <- ship_cleaned %>%
mutate(
Engine_Power_Log = log1p(Engine_Power_kW_per_V),
Distance_Travel_Log = log1p(distance_travel_per_V)
)
# Create the scatter plot with log1p scale
RevVsOp <- ggplot(ship_cleaned, aes(x = Net_profit_per_Voyage,
y = Distance_Travel_Log,
size =Efficiency_nm_per_kWh,
color = Route_Type)) +
geom_point(alpha = 0.3) +  # Adjust transparency for better visibility
scale_color_manual(values = my_palette)+
scale_size_continuous(range = c(0.1, 6)) +  # Adjust size range (min, max)
labs(
x = "log(1 + Engine Power)",
y = "log(1 + Distance Travelled)",
title = "Engine Power vs. Distance Travelled")+
theme_classic()+
theme(
axis.title.y = element_text(size=10),
axis.title.x = element_text(size=10),
axis.text = element_text(size = 8),
legend.position = 'bottom',
legend.key.size = unit(0.2,"cm"),
legend.text = element_text(size=8),
legend.title = element_text(size=8),
legend.background =  element_rect(fill = "#f3f1e9"),
plot.title = element_text(size=15, face='bold',hjust = 0.5),
panel.background = element_rect(fill = "#f3f1e9"),
panel.grid= element_line(color='grey60',size=0.1),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
# Marginal densities along x axis
xdens <- axis_canvas(RevVsOp, axis = "x") +
geom_boxplot(data = ship_cleaned, aes(x = Engine_Power_Log, fill = Route_Type),
alpha = 0.5, size = 0.2) +
scale_fill_manual(values = my_palette)
ydens <- axis_canvas(RevVsOp, axis = "y", coord_flip = TRUE) +
geom_boxplot(data = ship_cleaned, aes(x = Distance_Travel_Log, fill = Route_Type),
alpha = 0.5, size = 0.2) +
coord_flip() +
scale_fill_manual(values = my_palette)
p1 <- insert_xaxis_grob(RevVsOp, xdens, grid::unit(.2, "null"), position = "top")
p2 <- insert_yaxis_grob(p1, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(p2)
# Apply log1p transformation
ship_cleaned <- ship_cleaned %>%
mutate(
Engine_Power_Log = log1p(Engine_Power_kW_per_V),
Distance_Travel_Log = log1p(distance_travel_per_V)
)
# Create the scatter plot with log1p scale
RevVsOp <- ggplot(ship_cleaned, aes(x = Net_profit_per_Voyage,
y = Distance_Travel_Log,
size =Efficiency_nm_per_kWh,
color = Route_Type)) +
geom_point(alpha = 0.3) +  # Adjust transparency for better visibility
scale_color_manual(values = my_palette)+
scale_size_continuous(range = c(0.1, 6)) +  # Adjust size range (min, max)
labs(
x = "log(1 + Engine Power)",
y = "log(1 + Distance Travelled)",
title = "Engine Power vs. Distance Travelled")+
theme_classic()+
theme(
axis.title.y = element_text(size=10),
axis.title.x = element_text(size=10),
axis.text = element_text(size = 8),
legend.position = 'bottom',
legend.key.size = unit(0.2,"cm"),
legend.text = element_text(size=8),
legend.title = element_text(size=8),
legend.background =  element_rect(fill = "#f3f1e9"),
plot.title = element_text(size=15, face='bold',hjust = 0.5),
panel.background = element_rect(fill = "#f3f1e9"),
panel.grid= element_line(color='grey60',size=0.1),
plot.background = element_rect(fill = "#f3f1e9",color = NA))
# Marginal densities along x axis
xdens <- axis_canvas(RevVsOp, axis = "x") +
geom_boxplot(data = ship_cleaned, aes(x = Net_profit_per_Voyage, fill = Route_Type),
alpha = 0.5, size = 0.2) +
scale_fill_manual(values = my_palette)
ydens <- axis_canvas(RevVsOp, axis = "y", coord_flip = TRUE) +
geom_boxplot(data = ship_cleaned, aes(x = Distance_Travel_Log, fill = Route_Type),
alpha = 0.5, size = 0.2) +
coord_flip() +
scale_fill_manual(values = my_palette)
p1 <- insert_xaxis_grob(RevVsOp, xdens, grid::unit(.2, "null"), position = "top")
p2 <- insert_yaxis_grob(p1, ydens, grid::unit(.2, "null"), position = "right")
ggdraw(p2)
# Create the plot
p <- ggplot(ship_cleanedp, aes(x = Net_profit_per_Voyage,
y = interaction(Route_Type, Ship_Type),
fill = Ship_Type)) +   # Added missing fill
stat_density_ridges(geom = "density_ridges_gradient",
calc_ecdf = TRUE,
quantiles = 4,
quantile_lines = TRUE,
alpha = 0.5,    # Slightly increase transparency for clarity
scale = 0.8) +  # Reduce overlap
scale_fill_manual(values = my_palette) +
facet_wrap(~ factor(Season, levels = c("Spring", "Summer", "Fall", "Winter")), ncol = 4) +  # Set order in facet_wrap
theme_ridges() +
labs(title = "Net Margin Distribution Breakdown Excluding Outliers",x="Net Margin (%)" ,y="Route & Engine Type")+
theme(
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
strip.text = element_text(size = 9, face = "bold"),  # Facet title size
plot.margin = margin(10, 20, 10, 20),
legend.position = "top",
legend.title = element_text(size=8),
legend.key.size = unit(0.3, "cm"),
legend.text = element_text(size=6),
legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA)
)
# Create the plot
p <- ggplot(ship_cleaned, aes(x = Net_profit_per_Voyage,
y = interaction(Route_Type, Ship_Type),
fill = Ship_Type)) +   # Added missing fill
stat_density_ridges(geom = "density_ridges_gradient",
calc_ecdf = TRUE,
quantiles = 4,
quantile_lines = TRUE,
alpha = 0.5,    # Slightly increase transparency for clarity
scale = 0.8) +  # Reduce overlap
scale_fill_manual(values = my_palette) +
facet_wrap(~ factor(Season, levels = c("Spring", "Summer", "Fall", "Winter")), ncol = 4) +  # Set order in facet_wrap
theme_ridges() +
labs(title = "Net Margin Distribution Breakdown Excluding Outliers",x="Net Margin (%)" ,y="Route & Engine Type")+
theme(
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
strip.text = element_text(size = 9, face = "bold"),  # Facet title size
plot.margin = margin(10, 20, 10, 20),
legend.position = "top",
legend.title = element_text(size=8),
legend.key.size = unit(0.3, "cm"),
legend.text = element_text(size=6),
legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA)
)
plot(p)
# Create the plot
p <- ggplot(ship_cleaned, aes(x = Net_profit_per_Voyage,
y = interaction(Route_Type, Ship_Type,Engine_Type),
fill = Ship_Type)) +   # Added missing fill
stat_density_ridges(geom = "density_ridges_gradient",
calc_ecdf = TRUE,
quantiles = 4,
quantile_lines = TRUE,
alpha = 0.5,    # Slightly increase transparency for clarity
scale = 0.8) +  # Reduce overlap
scale_fill_manual(values = my_palette) +
facet_wrap(~ factor(Season, levels = c("Spring", "Summer", "Fall", "Winter")), ncol = 4) +  # Set order in facet_wrap
theme_ridges() +
labs(title = "Net Margin Distribution Breakdown Excluding Outliers",x="Net Margin (%)" ,y="Route & Engine Type")+
theme(
axis.text.y = element_text(size = 6),
axis.text.x = element_text(size = 6),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
strip.text = element_text(size = 9, face = "bold"),  # Facet title size
plot.margin = margin(10, 20, 10, 20),
legend.position = "top",
legend.title = element_text(size=8),
legend.key.size = unit(0.3, "cm"),
legend.text = element_text(size=6),
legend.background = element_rect(fill = "#f3f1e9"),
panel.background = element_rect(fill = "#f3f1e9"),
plot.background = element_rect(fill = "#f3f1e9",color = NA)
)
plot(p)
