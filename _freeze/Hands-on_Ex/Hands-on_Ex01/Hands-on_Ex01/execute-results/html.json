{
  "hash": "a5101ef9bd39c89c5d3ffd44de0e2989",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 1\"\nauthor: \"Johsuan Huang\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n\n### 1.1 Learning Objectives:\n\n-   Basic principles and essential components of ggplot2.\n\n-   Apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphic.\n\n### 1.2 Load the Package and Import the Data\n\n::: {.callout-note appearance=\"simple\"}\nThe code chunk below assumes that you already have [**pacman**](https://cran.r-project.org/web/packages/pacman/) package installed. If not, please go ahead install pacman first.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the package\npacman::p_load(tidyverse)\n```\n:::\n\n\n\n\n-   The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr(one of the tidyverse package) package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the data\nexam_data <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n\nThe dataset contains examination grades for 3 subjects from a local school. We can use head() and summary() function inspect the dataset.\n\nThere are a total of 7 attributes. 4 of them are categorical data type and the other 3 are in continuous data type.\n\n-   The categorical attributes are: ID, CLASS, GENDER and RACE.\n\n-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(exam_data,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n```\n\n\n:::\n:::\n\n\n\n\n### 1.3 R Graphics VS ggplot\n\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\n::: panel-tabset\n#### R graphics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n#### ggplot 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x=MATHS)) +\n  # use geom_histogram() to create a hist plot\n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"#E8C8DB\") +\n  # setting a clean background\n  theme_classic()+\n  ggtitle(\"Distribution of Maths scores\")+\n  # adjust the position and weight of the title\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\nAlthough R Graphics's code looks simpler than ggplot, according to [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157), “The transferrable skills from ggplot2 are not the idiosyncracies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive”.\n\n### 1.4 Grammar of Graphics\n\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) **Grammar of Graphics**, Springer.\n\n**The grammar of graphics is an answer to a question: \" What's a statistical graphic? \"**\n\nThere are two principles in Grammar of Graphics, they are:\n\n-   Graphics = distinct layers of grammatical elements\n-   Meaningful plots through aesthetic mapping\n\n#### 1.4.1 **A Layered Grammar of Graphics**\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n![](/images/Layered_grammars-ggplot.jpg){width=\"488\"}\n\nReference: Hadley Wickham (2010) [“A layered grammar of graphics.”](https://vita.had.co.nz/papers/layered-grammar.html) *Journal of Computational and Graphical Statistics*, vol. 19, no. 1, pp. 3–28.\n\nA short description of each building block are as follows:\n\n-   **Data**: The dataset being plotted.\n\n-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\n\n-   **Geometrics**: The visual elements used for our data, such as point, bar or line.\n\n-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\n\n-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).\n\n-   **Coordinate systems** define the plane on which data are mapped on the graphic.\n\n-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n### 1.5 Essential Grammatical Elements in ggplot2: data\n\nLet us call the ggplot() function using the code chunk below.\n\n::: {.callout-note appearance=\"simple\"}\n-   A blank canvas appears.\n\n-   `ggplot()` initializes a ggplot object.\n\n-   The *data* argument defines the dataset to be used for plotting.\n\n-   If the dataset is not already a data.frame, it will be converted to one by `fortify()`\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n### 1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\n\nAll aesthetics of a plot are specified in the [`aes()`](https://ggplot2.tidyverse.org/reference/aes.html) function call (in later part of this lesson, you will see that each *geom* layer can have its own aes specification)\n\nCode chunk below adds the aesthetic element into the plot.\n\n::: {.callout-note appearance=\"simple\"}\nggplot includes the x-axis and the axis’s label.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n### 1.7 Essential Grammatical Elements in ggplot2: geom\n\nGeometric objects are the actual marks we put on a plot. **A plot must have at least one geom**; there is no upper limit. You can add a geom to a plot using the **+** operator.\n\nExamples include:\n\n-   *geom_point* for drawing individual points (e.g., a scatter plot)\n\n-   *geom_line* for drawing lines (e.g., for a line charts)\n\n-   *geom_smooth* for drawing smoothed lines (e.g., for simple trends or approximations)\n\n-   *geom_bar* for drawing bars (e.g., for bar charts)\n\n-   *geom_histogram* for drawing binned values (e.g. a histogram)\n\n-   *geom_polygon* for drawing arbitrary shapes\n\n-   *geom_map* for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n    ![](/images/geom_ggplot.png)\n\n    Below are the examples of geom:\n\n::::: panel-tabset\n#### Bar\n\n##### geom_bar()\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=RACE))+\n  geom_bar(color=\"black\",\n           fill=\"#E8C8DB\")+\n  ggtitle(\"Distribution of Race\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Dot\n\n##### geom_dotplot()\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\n::: {.callout-warning appearance=\"simple\"}\nThe y scale is not very useful, in fact it is very misleading.\n:::\n\n::: {.callout-warning appearance=\"simple\"}\nThe code chunk below performs the following two steps:\n\n-   `scale_y_continuous()` is used to turn off the y-axis, and\n\n-   *binwidth argument* is used to change the binwidth to 2.5.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS))+\n  geom_dotplot(binwidth=2.5,\n               dotsize = 0.5,\n               fill=\"#E8C8DB\")+\n  # use scale_y_continuous() to turn off y-axis\n  scale_y_continuous(NULL,\n                     breaks=NULL)+\n  ggtitle(\"Distribution of Math Scores\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Hist\n\n##### geom_histogram()\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  default bin is 30\nggplot(data=exam_data, \n       aes(x=MATHS))+\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"#E8C8DB\")+\n  ggtitle(\"Distribution of Math Scores\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n##### geom_histogram() by Gender\n\nIn the code chunk below,\n\n-   *bins* argument is used to change the number of bins to 20,\n\n-   *fill* argument is used to shade the histogram with light blue color, and\n\n-   *color* argument is used to change the outline colour of the bars in black\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER))+\n  geom_histogram(bins=20,\n                 color=\"black\")+\n  # customize the fill color\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Density\n\n##### geom_density()\n\n[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.\n\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS))+\n  geom_density()+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n##### geom_density() by Gender\n\nThe code chunk below plots two kernel density lines by using *colour* or *fill* arguments of *aes()*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=MATHS,colour = GENDER))+\n  geom_density()+\n    # customize the color\n  scale_color_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Box\n\n##### geom_boxplot()\n\n[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data,\n       aes(x=GENDER,\n           y=MATHS,\n           # add \"fill\" to customize boxplot's colors\n           fill=GENDER))+\n         geom_boxplot()+\n    # customize the color\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n##### geom_boxplot() with notch \\>\\>\\> shows median\n\n[**Notches**](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = GENDER,\n           y = MATHS,\n           fill = GENDER))+\n  geom_boxplot(notch = TRUE)+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Violin\n\n##### geom_violin()\n\n[`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = GENDER,\n           y = MATHS,\n           fill = GENDER))+\n  geom_violin()+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      :List of 6\n  ..$ colour       : chr \"grey20\"\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : 'rel' num 1\n  ..$ linetype     : NULL\n  ..$ lineend      : NULL\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               :List of 5\n  ..$ fill         : NULL\n  ..$ colour       : logi NA\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : NULL\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n:::\n\n\n\n\n#### Point\n\n##### geom_point()\n\n[`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH,\n           color = GENDER))+\n  geom_point()+\n  scale_color_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Combined\n\n##### Combine multiple geom objects\n\nThe code chunk below plots the data points on the boxplots by using both `geom_boxplot()`and `geom_point()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER,\n           fill = GENDER))+\n  geom_point(position = \"jitter\", \n             size = 0.5)+\n  geom_boxplot()+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5))+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n:::::\n\n### 1.8 Essential Grammatical Elements in ggplot2: stat\n\nThe [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:\n\n-   frequency of values of a variable (bar graph)\n\n    -   a mean\n\n    -   a confidence limit\n\n-   There are two ways to use these functions:\n\n    -   add a `stat_()` function and override the default geom, or\n\n    -   add a `geom_()` function and override the default stat.\n\n#### 1.8.1 Working with *stat_summary() or geom()*\n\n::: panel-tabset\n##### stat_summary()\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = GENDER, y = MATHS, fill = GENDER))+\n  geom_boxplot()+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  theme_classic()+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               color = \"black\",\n               size = 3\n               )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n##### geom_point()\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = GENDER, y = MATHS, fill = GENDER))+\n  geom_boxplot()+\n  scale_fill_manual(values = c(\"#E8C8DB\", \"#C8DBE8\"))+\n  theme_classic()+\n  ggtitle(\"Distribution of Math Scores by Gender\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))+\n  geom_point(stat = \"summary\",\n               fun = \"mean\",\n               color = \"black\",\n               size = 3\n               )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n#### 1.8.2 Adding a best fit curve on a scatter plot with *geom_smooth()*\n\n [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot:\n\n::: panel-tabset\n##### LOESS Mehod\n\nLOESS method is the default method of ***geom_smooth()***.\n\nLOESS (Locally Estimated Scatterplot Smoothing) is a non-parametric regression method that fits a smooth curve to the data. This method is particularly useful when the relationship between variables is non-linear.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH))+\n  geom_point()+\n  # default use loess regression method\n  geom_smooth(size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n##### LM Method\n\nLM(Linear Model) refers to linear regression. It assumes the relationship between the dependent and independent variables are linear.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH))+\n  geom_point()+\n  geom_smooth(method = \"lm\", size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### 1.9 Essential Grammatical Elements in ggplot2: Facets\n\n#### 1.9.1 Facets: Working with facet_wrap() and facet_grid()\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html).\n\n-   **facet_warp():** Creates facets by wrapping them into multiple rows or columns. It is useful for plotting a [single variable (as below tab shown)]{.underline}. We can control the number of rows or columns with the ***nrow*** and ***ncol*** arguments.\n\n-   **facet_grid():** Creates a grid of facets defined by one or two variables. It is useful for exploring relationships between [two variables(as below tab shown)]{.underline}.\n\n::: panel-tabset\n#### facet_wrap()\n\n-   **One variable: MATH**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = MATHS))+\n  geom_histogram(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  facet_wrap(~ CLASS, nrow = 3)+\n  ggtitle(\"Distribution of Math Scores by Class\")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n-   **Two variables: MATHS & RACE**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = CLASS, y = MATHS))+\n  geom_boxplot() +\n  stat_summary(geom = \"point\", fun = mean, colour =\"#C8DBE8\", size=2) + \n  facet_wrap(~ RACE)+\n   ggtitle(\"Distribution of Math Scores by \")+\n  theme(plot.title = element_text(hjust = 0.5, face=\"bold\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n#### facet_grid()\n\n-   **One variable: MATH**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(MATHS))+\n  geom_histogram(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n-   **Two variables: MATHS & RACE**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = CLASS, y = MATHS))+\n  geom_boxplot() +\n  stat_summary(geom = \"point\", fun = mean, colour =\"#C8DBE8\", size=2) + \n  facet_grid(~ RACE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### 1.10 Coordinates\n\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): fixed both the y-axis and x-axis in certain ranges.\n\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.\n\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n::: panel-tabset\n#### coord_flip()\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\n#### coord_cartesian()\n\nThe scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH))+\n  geom_point()+\n  geom_smooth(method = \"lm\", size=0.5)+\n  # fixes both the y-axis and x-axis range from 0-100\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### 1.11 Essential Grammatical Elements in ggplot2: themes\n\nThemes control elements of the graph not related to the data. For example:\n\n-   background colour\n\n-   size of fonts\n\n-   gridlines\n\n-   colour of labels\n\nBuilt-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`\n\nA list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n::: panel-tabset\n#### theme_gray()\n\nThis is the default theme.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n#### theme_classic()\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\n#### theme_minimal()\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n#### theme_bw()\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data,\n       aes(x = RACE))+\n  geom_bar(bins=20,fill=\"#E8C8DB\",color=\"black\")+\n  coord_flip()+\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### 1.12 References\n\n-   Kam, T.S. (2025). [A Layered Grammar of Graphics: ggplot2 methods](https://r4va.netlify.app/chap01).\n\n-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.\n\n-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.\n\n-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version\n\n-   [Learning ggplot2 on Paper – Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)\n\n-   [Learning ggplot2 on Paper – Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)\n\n-   [Learning ggplot2 on Paper – Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)\n",
    "supporting": [
      "Hands-on_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}