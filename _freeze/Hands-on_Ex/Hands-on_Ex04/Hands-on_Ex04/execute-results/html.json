{
  "hash": "fc46e5773e7d52a8c2ae80f31367c5ca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 04\"\nauthor: Johsuan Huang\ndate: 2024-01-28\ndate-modified: \"last-modified\"\ndescription: \"Visualising Distribution\"\ncategories: [ggridges,ggdist]\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## 1 Learning Outcome\n\nIn previous hand-on exercises, we have draw some popular statistical graphs, like histogram, boxplot, scatter plot and etc. In this hands-on exercise, we are going to learn new statistical graphic methods for visualising distribution, namely **ridgeline plot** and **raincloud plot** by using ggplot2 and its extensions.\n\n## 2 Getting Started\n\n::: panel-tabset\n## Loading the packages\n\nUse the **pacman** package `p_load()` to check, install and launch the following R packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse, patchwork)\n```\n:::\n\n\n\n+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| **Library** | **Description**                                                                                                                                                     |\n+=============+=====================================================================================================================================================================+\n| ggridges    | a ggplot2 extension specially designed for plotting ridgeline plots                                                                                                 |\n+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ggdist      | a ggplot2 extension spacially desgin for visualising distribution and uncertainty                                                                                   |\n+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| tidyverse   | a family of R packages for data processing                                                                                                                          |\n+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ggthemes    | a ggplot extension for ggplots, providing additional themes, scales, and geoms                                                                                      |\n+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| colorspace  | a R package provides a broad toolbox for selecting individual colors or color palettes, manipulating and employing these colors in various kinds of visualisations. |\n+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n## Importing the data\n\nIn this exercise, ***Exam_data.csv*** will be used. We use `read_csv()` of **readr** to import the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n## Examining the data\n\nAfter importing the data, let's examine it to understand its data structure:\n\nThe dataset contains 7 attributes and 322 observations with no missing values.\n\n-   The categorical attributes are: ID, CLASS, GENDER and RACE.\n\n-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [322 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ ID     : chr [1:322] \"Student321\" \"Student305\" \"Student289\" \"Student227\" ...\n $ CLASS  : chr [1:322] \"3I\" \"3I\" \"3H\" \"3F\" ...\n $ GENDER : chr [1:322] \"Male\" \"Female\" \"Male\" \"Male\" ...\n $ RACE   : chr [1:322] \"Malay\" \"Malay\" \"Chinese\" \"Chinese\" ...\n $ ENGLISH: num [1:322] 21 24 26 27 27 31 31 31 33 34 ...\n $ MATHS  : num [1:322] 9 22 16 77 11 16 21 18 19 49 ...\n $ SCIENCE: num [1:322] 15 16 16 31 25 16 25 27 15 37 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   ID = col_character(),\n  ..   CLASS = col_character(),\n  ..   GENDER = col_character(),\n  ..   RACE = col_character(),\n  ..   ENGLISH = col_double(),\n  ..   MATHS = col_double(),\n  ..   SCIENCE = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nany(is.na(exam))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n## Transforming the data\n\nIn R, factors are used to handle categorical data and ordered variable. As there are categorical attributes in our dataset, we are going to convert their data type from \\<chr\\> to \\<fctr\\>:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- c(\"CLASS\",\"GENDER\",\"RACE\")\nexam <- exam %>% mutate(across(all_of(col), as.factor))\n```\n:::\n\n\n\nAfter converting the attributes, let's check the data again:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  <chr>      <fct> <fct>  <fct>     <dbl> <dbl>   <dbl>\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n```\n\n\n:::\n:::\n\n\n:::\n\n## 3 Visualising Distribution with Ridgeline Plot\n\nA [Ridgeline plot](https://www.data-to-viz.com/graph/ridgeline.html) (sometimes called Joyplot) shows the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n::: {.callout-note appearance=\"simple\"}\n## What for?\n\n-   Ridgeline plots make sense when the number of group to represent is `medium to high`, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than \\~6 groups, dealing with other [distribution plots](http://www.data-to-viz.com/#portfolio) is probably better.\n\n-   It works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n:::\n\n### 3.1 Plotting ridgeline graph: ggridges method\n\nggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using `geom_density_ridges()`:\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\nggplot(exam, aes(x=ENGLISH, y=CLASS))+\n  geom_density_ridges(\n    scale = 2, # adjust the size (height) of the ridges\n    rel_min_height = 0.01, # control the min height of the ridges\n    bandwidth = 3, # control the smoothness of the density estimate\n    fill = lighten(\"#EBCF89\", .6), # lighten the color \n    color = \"#D18A7D\") + # border color\n  scale_x_continuous(\n    name = \"English Grades\",\n    expand = c(0,0)) + #remove spaces before and after the data range\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.5,1)) # add more spaces before 3A and after 3I\n  )+\n  theme_ridges()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-tip appearance=\"simple\"}\n## Insights\n\nThe density plot of English grades by class, reveals the clear differences in grade distributions: Classes 3A and 3B show similar grade ranges, also do classes 3C and 3D, and 3E\\~3G, while class 3F notably contains few outliers with lower grades around 25.\n:::\n\nThe ggridges package offers enhanced versions of **`geom_density_ridges2`** and **`geom_ridgeline2`**. These versions improve compatibility with different data structures and eliminate the need to manually adjust ridge heights using parameters like **`scale`** or **`rel_min_height`**.\n\nHowever, in the patchwork below, under the default setting, the only noticeabke difference is the border displayed under each class's density plot:\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\na <- ggplot(exam, aes(x = ENGLISH, y=CLASS))+\n  geom_density_ridges2()+\n  ggtitle(\"geom_density_ridges2\")+\n  theme_ridges()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\nb <- ggplot(exam, aes(x = ENGLISH, y=CLASS))+\n  geom_density_ridges()+\n  ggtitle(\"geom_density_ridges\")+\n  theme_ridges()+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n\na+b\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### 3.2 Varying fill colors along the x axis\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nWe use the argument `scale_fill_viridis_c()` to apply color scaling, where \"c\" represents continuous data. The palette is also available for binned data (`scale_fill_viridis_b()`) and discrete data (`scale_fill_viridis_d()`).\n\nBelow are the argument we used to adjust the [`scale_fill_viridis_c()`](https://ggplot2.tidyverse.org/reference/scale_viridis.html):\n\n+---------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n| Argument      | Discription                                                                                                                                    |\n+===============+================================================================================================================================================+\n| **name**      | The name of the scale. Used as the axis or legend title                                                                                        |\n+---------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n| **alpha**     | The alpha transparency, a number in \\[0,1\\], see argument alpha in [`hsv`](https://rdrr.io/r/grDevices/hsv.html).                              |\n+---------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n| **direction** | Sets the order of colors in the scale. If 1, the default, colors are ordered from darkest to lightest. If -1, the order of colors is reversed. |\n+---------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n| **option**    | A character string indicating the color map option to use. Eight options are available:                                                        |\n|               |                                                                                                                                                |\n|               | -   `\"magma\"` (or `\"A\"`)                                                                                                                       |\n|               |                                                                                                                                                |\n|               | -   `\"inferno\"` (or `\"B\"`)                                                                                                                     |\n|               |                                                                                                                                                |\n|               | -   `\"plasma\"` (or `\"C\"`)                                                                                                                      |\n|               |                                                                                                                                                |\n|               | -   `\"viridis\"` (or `\"D\"`)                                                                                                                     |\n|               |                                                                                                                                                |\n|               | -   `\"cividis\"` (or `\"E\"`)                                                                                                                     |\n|               |                                                                                                                                                |\n|               | -   `\"rocket\"` (or `\"F\"`)                                                                                                                      |\n|               |                                                                                                                                                |\n|               | -   `\"mako\"` (or `\"G\"`)                                                                                                                        |\n|               |                                                                                                                                                |\n|               | -   `\"turbo\"` (or `\"H\"`)                                                                                                                       |\n+---------------+------------------------------------------------------------------------------------------------------------------------------------------------+\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\nggplot(exam, aes(x=ENGLISH, y=CLASS,\n                 fill = stat(x)))+\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01)+\n  scale_fill_viridis_c(name = NULL,\n                       option = \"C\",\n                       alpha=1)+ \n  scale_x_continuous(name = \"English Grades\", expand = c(0,0))+\n  scale_y_discrete(name=NULL)+\n  theme_ridges()+\n  labs(title = 'Gradient Colors for English Scores') +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### 3.3 Mapping the probabilities directly onto colour\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\nggplot(exam, aes(x=ENGLISH, y=CLASS,\n                 fill = 0.5 - abs(0.5-stat(ecdf))))+\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE)+\n    scale_fill_viridis_c(name = \"Tail probability\",\n                         option = \"F\",\n                       direction = -1)+\n    theme_ridges()+\n  labs(title = 'Distribution of English Scores Across Classes') +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n### 3.4 Ridgeline plots with quantile lines\n\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by **quantile**, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\nggplot(exam, aes(x=ENGLISH, y=CLASS,\n                 fill = factor(stat(quantile))))+\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE,\n                      quantiles = 4,\n                      quantile_lines = TRUE)+\n    scale_fill_viridis_d(name = \"Qunatile\",\n                         option = \"D\")+\n    theme_ridges()+\n  labs(title = 'Distribution of English Scores Across Classes') +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-tip appearance=\"simple\"}\n## Insights\n\nBy filling with quantile colors, we can now clearly compare grades across classes. While classes 3D and 3E have similar overall grade ranges and distributions in their top 50%, class 3D shows a higher proportion of students with lower grades in Quantile 1.\n:::\n\nInstead of using number to define the quartiles, we can also specify quartiles by cut points such as 10% and 90% tails to colour the ridgeline plot as shown in the figure below:\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\nggplot(exam, aes(x=ENGLISH, y=CLASS,\n                 fill = factor(stat(quantile))))+\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE,\n                      quantiles = c(0.025,0.975))+\n    scale_fill_manual(name = \"Probability\",\n                         values = c())+\n    theme_ridges()+\n  labs(title = 'Quantile Distribution of English Grades') +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA))\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-tip appearance=\"simple\"}\n## Insights\n\nIf we only care about comparing the difference of top 10% and bottom 10% of students' performance, setting the quantiles c(0.1,0.9) would make it easier for readers to understand the performance differences across classes.\n:::\n\n## 4 Visualising Distribution with Raincloud Plot\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modes. The boxplot does not show where densities are clustered, but the raincloud plot does.\n\n### 4.1 Plotting a Half Eye graph\n\nFirst, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.\n\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\nggplot(exam, \n       aes(x = RACE,y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  labs(title =\"Distribution of English Scores Across Races\",\n       x = \"\", y=\"English Score\")+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(face = \"bold\"))\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n### 4.2 Adding the boxplot with geom_boxplot()\n\nNext, we will add the second geometry layer using [`geom_boxplot()`](https://r4va.netlify.app/chap09) of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\nggplot(exam, \n       aes(x = RACE,y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA)+\n  labs(title =\"Distribution of English Scores Across Races\",\n       x = \"\", y=\"English Score\")+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(face = \"bold\"))\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n### 4.3 Adding the Dot Plots with `stat_dots()`\n\nNext, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\nggplot(exam, \n       aes(x = RACE,y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA)+\n  stat_dots(side = \"left\",\n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2\n            )+\n  labs(title =\"Distribution of English Scores Across Races\",\n       x = \"\", y=\"English Score\")+\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        plot.title = element_text(face = \"bold\"))\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-tip appearance=\"simple\"}\n## Insights\n\nThis graph contains a lot of information, including numbers of student and distribution, outliers, range and quartiles of English scores across races:\n\n-   Numbers of student: Chinese \\> Malay \\>\\> Indian \\> Others\n\n-   Median of English scores: Chinese \\> Others \\> Malay \\> Indian\n\n-   IQR of English scores: Indian \\> Malay \\> Chinese \\> Others\n\n-   Numbers of Outliers (lower scores): Chinese \\> Others \\> Malay = Indian\n\nIn conclusion, both Chinese students and those in the \"Others\" category perform well in English, with mean scores around 70. The Chinese group shows more extreme performance variation, with notable numbers of students having scores below 40. Meanwhile, the \"Others\" group shows a more normal distribution with few outliers, suggesting consistently strong English performance across the group.\n:::\n\n### 4.4 Finishing the touching\n\nLastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. Also, we add `aes(fill = RACE)` in stat_halfeye() function to highlight different races:\n\n::: toggle\n<details>\n\n<summary>**Display Code**</summary>\n\n``` r\nggplot(exam, \n       aes(x = RACE,y = ENGLISH)) +\n  stat_halfeye(aes(fill = RACE),\n               alpha = 0.5,\n               adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)+\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA)+\n  stat_dots(\n            side = \"left\",\n            justification = 1.2, \n            binwidth = NA,\n            dotsize = 2\n            )+\n  labs(title =\"Distribution of English Scores Across Races\",\n       x = \"\", y=\"English Score\")+\n  coord_flip() +\n  theme(panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        legend.position = 'none',\n        plot.title = element_text(face = \"bold\"))\n```\n\n</details>\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## 5 Reference\n\n-   Kam, T.S. (2025). [Visualising Distribution](https://r4va.netlify.app/chap09).\n\n-   [Introducing Ridgeline Plots (formerly Joyplots)](https://blog.revolutionanalytics.com/2017/07/joyplots.html)\n",
    "supporting": [
      "Hands-on_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}