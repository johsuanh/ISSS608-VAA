{
  "hash": "7e7f3eea4f26097e54ee0d5d4f4e297f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 07\"\nauthor: Johsuan Huang\ndate: 2024-02-10\ndate-modified: \"last-modified\"\ndescription: \"Visualising and Analysing Time-oriented Data\"\ncategories: [tidyverse, lubridate, gridExtra,CGPfunctions,]\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## 1 Overview\n\nThis hands-on exercise aims to plot the following data visualsations with R:\n\n-   calender heatmap by using ggplot2 functions,\n\n-   cycle plot by using ggplot2 function,\n\n-   slopegraph\n\n-   horizon chart\n\n## 2 Getting Started\n\n### Loading the packages\n\nUse the **pacman** package `p_load()` to check, install and launch the following R packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions)\n```\n:::\n\n\n\n| **Library** | **Description** |\n|----|----|\n| lubridate | an R package that makes it easier to work with dates and times |\n| tidyverse | a family of R packages for data processing |\n| gridExtra | Provides a number of user-level functions to work with “grid” graphics, notably to arrange multiple grid-based plots on a page, and draw tables. |\n| knitr | a package that enables integration of R code into LaTeX, LyX, HTML, Markdown, AsciiDoc, and reStructuredText documents. |\n| data.table | an R package that provides an enhanced version of a data.frame |\n\n## 3 Plotting Calendar Heatmap\n\nIn this section, we will:\n\n-   plot a calender heatmap by using ggplot2 functions and extension\n\n-   write function using R programming\n\n-   derive specific date and time related field by using base R and lubridate packages\n\n-   perform data preparation task by using tidyr and dplyr packages.\n\n### 3.1 Import data\n\nIn this hands-on exercise, *eventlog.csv* file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\n```\n:::\n\n\n\n### 3.2 Examine data structure\n\n*kable()* can be used to review the structure of the imported data frame.\n\nThere are three columns, namely *timestamp*, *source_country* and *tz*.\n\n-   ***timestamp*****:** stores date-time values in POSIXct format. (from 2015/03/12 to 2015/12/24)\n\n-   ***source_country*****:** stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.\n\n-   ***tz***: field stores time zone of the source IP address.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(attacks)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   timestamp                      source_country          tz           \n Min.   :2015-03-12 15:59:16.72   Length:199999      Length:199999     \n 1st Qu.:2015-04-17 22:30:53.34   Class :character   Class :character  \n Median :2015-06-16 17:29:01.86   Mode  :character   Mode  :character  \n Mean   :2015-06-28 08:34:47.76                                        \n 3rd Qu.:2015-08-17 14:20:30.10                                        \n Max.   :2015-12-24 04:37:00.61                                        \n```\n\n\n:::\n:::\n\n\n\n### 3.3 Data Preparation\n\n#### **Step 1: Deriving weekday and hour of day fields**\n\nBefore we can plot the calender heatmap, two new fields namely *wkday* and *hour*need to be derived. In this step, we will write a function to perform the task.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# covert timestamp \nmake_hr_wkday <- function(ts,sc,tz){\n  real_times <- ymd_hms(ts,\n                        tz=tz[1], # retrieve first timezone only\n                        quiet = TRUE) \n  # create data frame with country code, weekday and hour info\n  dt <- data.table(source_country = sc,\n                   wkday= weekdays(real_times),\n                   hour=hour(real_times))\n  return(dt)\n}\n```\n:::\n\n\n\n-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package\n\n-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.\n\n#### **Step 2:** Deriving the attacks tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create weekday order\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\n# create new data frame \"attacks\"\nattacks <- attacks %>%\n  group_by(tz) %>% # group by timezone\n  # apply make_hr_wkday function to data\n  do(make_hr_wkday(.$timestamp,\n                   .$source_country,\n                   .$tz)) %>%\n  ungroup() %>%\n  # convert wkday and hour fields into factor \n  mutate(wkday = factor(\n    # make sure weekday order start from Sun and end in Sat\n    wkday, levels = wkday_levels), \n   # make sure weekday order start from 00:00 and end in 23:00\n    hour = factor(hour, levels = 0:23))\n```\n:::\n\n\n\nTable below shows the tidy tibble table after processing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n\n### 3.4 Building the Calendar Heatmaps\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks %>%\n  count(wkday, hour) %>% # count the number of combo (wkday*hour)\n  ungroup() %>%\n  na.omit() # remove missing value\n\nggplot(grouped, \n       aes(hour,wkday, \n           fill = n))+ \n  geom_tile(color=\"white\", size=0.1)+ \n  # works well for minimalist heatmaps\n  theme_tufte(base_family = \"Helvetica\")+\n  # ensures that the x and y axes have the same scale\n  coord_equal()+ \n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"#D989AE22\", \n                    high = \"#D989AE\") +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6),\n      panel.background = element_rect(fill = \"#f3f1e9\"),\n      plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n      axis.text.x = element_text(size=8)\n      )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-8-1.png){width=960 style='max-width:100%; display: block;'}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\n## Learn from the code chunk above\n\n-   a tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields.\n\n-   a new field called *n* is derived by using `group_by()` and `count()` functions.\n\n-   `na.omit()` is used to exclude missing value.\n\n-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size`arguments are used to specify the border color and line size of the tiles.\n\n-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\n\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n\n-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).\n:::\n\n### 3.5 Building Multiple Calendar Heatmaps\n\n#### Step 1: Deriving attack by country object\n\nIn order to identify the top 4 countries with the highest number of attacks, we will:\n\n-   count the number of attacks by country\n\n-   calculate the percent of attackes by country\n\n-   save the results in a tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>% # create new column \"percent\"\n  arrange(desc(n)) # sorting desc by count\n```\n:::\n\n\n\n#### Step 2: Preparing the tidy data frame\n\nIn this step, we are required to extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for sorting purpose\ntop4 <- attacks_by_country$source_country[1:4]\n\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4\n  ))%>%\n  na.omit()\n```\n:::\n\n\n\n#### Step 3: Plotting the Multiple Calender Heatmap by using ggplot2 package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top4_attacks,\n       aes(hour, wkday, fill=n))+\n         geom_tile(color=\"white\", size=0.1)+\n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"#D989AE22\", \n                    high = \"#D989AE\") +\n  facet_wrap(~source_country, ncol = 2)+\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6),\n      panel.background = element_rect(fill = \"#f3f1e9\"),\n      plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n      axis.text.x = element_text(size=6),\n      axis.text.y = element_text(size=6)\n      )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-11-1.png){width=768 style='max-width:100%; display: block;'}\n:::\n:::\n\n\n\n## 4 Plotting Cycle Plot\n\nIn this section, we will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n### 4.1 Import data\n\nThe code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and save it as a tibble data frame called *air*:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n```\n:::\n\n\n\n### 4.2 Examine data structure\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(air))\n```\n\n::: {.cell-output-display}\n\n\n|Month-Year | Republic of South Africa| Canada|   USA| Bangladesh| Brunei| China| Hong Kong SAR (China)| India| Indonesia| Japan| South Korea| Kuwait| Malaysia| Myanmar| Pakistan| Philippines| Saudi Arabia| Sri Lanka| Taiwan| Thailand| United Arab Emirates| Vietnam| Belgium & Luxembourg|  CIS| Finland| France| Germany| Ireland| Italy| Netherlands| Spain| Switzerland| United Kingdom| Australia| New Zealand|\n|:----------|------------------------:|------:|-----:|----------:|------:|-----:|---------------------:|-----:|---------:|-----:|-----------:|------:|--------:|-------:|--------:|-----------:|------------:|---------:|------:|--------:|--------------------:|-------:|--------------------:|----:|-------:|------:|-------:|-------:|-----:|-----------:|-----:|-----------:|--------------:|---------:|-----------:|\n|2000-01-01 |                     3291|   5545| 25906|       2883|   3749| 33895|                 13692| 19235|     65151| 59288|       21457|    507|    27472|    1177|     2150|        8404|         1312|      3922|  15766|    12048|                 1318|    1527|                 1434| 2703|    1634|   4752|   12739|    1292|  3544|        4962|   925|        3731|          28986|     34616|        5034|\n|2000-02-01 |                     2357|   6120| 28262|       2469|   3236| 34344|                 19870| 18975|     37105| 58188|       19634|    199|    29084|    1161|     2496|        9128|          623|      3988|  24861|    12745|                  899|    2269|                 1596| 1182|    1297|   6391|   13093|    1200|  2897|        5054|   747|        3980|          35148|     26030|        3938|\n|2000-03-01 |                     4036|   6255| 30439|       2904|   3342| 27053|                 17086| 21049|     44205| 74426|       20719|    386|    30504|    1355|     2429|       11691|         1578|      4259|  18767|    16971|                 1474|    2034|                 1548| 1088|    1220|   5528|   13645|    1368|  2717|        4950|   935|        3576|          36117|     31119|        4668|\n|2000-04-01 |                     4241|   4521| 25378|       2843|   5117| 30464|                 22346| 26160|     45480| 49985|       17489|    221|    34478|    1593|     2711|       14141|          705|      6579|  22735|    20397|                 1284|    2420|                 1592| 1012|    1208|   5544|   13366|    1345|  2512|        4149|   941|        3850|          33792|     34824|        6890|\n|2000-05-01 |                     2841|   3914| 26163|       2793|   4152| 30775|                 16357| 35869|     38350| 48937|       19398|    164|    34795|    1397|     2594|       13305|          679|      4625|  18399|    15769|                 1042|    1833|                 1167|  660|     743|   4225|   10878|    1067|  2205|        3643|   764|        3025|          23377|     33139|        7006|\n|2000-06-01 |                     2776|   3487| 28179|       3146|   5018| 26720|                 18133| 31314|     47982| 53798|       17522|    440|    34660|    1715|     2924|       10555|         2749|      4740|  21042|    17217|                 1545|    2480|                 1170|  712|     982|   4047|    9054|    1363|  2196|        3544|   855|        2580|          21769|     35731|        7634|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(air)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Month-Year                  Republic of South Africa     Canada     \n Min.   :2000-01-01 00:00:00   Min.   : 687             Min.   : 1096  \n 1st Qu.:2004-12-24 06:00:00   1st Qu.:1996             1st Qu.: 4506  \n Median :2009-12-16 12:00:00   Median :2421             Median : 5420  \n Mean   :2009-12-15 23:00:00   Mean   :2582             Mean   : 5687  \n 3rd Qu.:2014-12-08 18:00:00   3rd Qu.:2883             3rd Qu.: 6549  \n Max.   :2019-12-01 00:00:00   Max.   :7370             Max.   :11927  \n      USA          Bangladesh        Brunei          China       \n Min.   : 4578   Min.   :  802   Min.   :  419   Min.   :  3118  \n 1st Qu.:25400   1st Qu.: 3984   1st Qu.: 3629   1st Qu.: 48709  \n Median :29902   Median : 7289   Median : 4398   Median : 74344  \n Mean   :31584   Mean   : 6753   Mean   : 4601   Mean   : 96568  \n 3rd Qu.:35752   3rd Qu.: 9254   3rd Qu.: 5304   3rd Qu.:139373  \n Max.   :65200   Max.   :12195   Max.   :10036   Max.   :294899  \n Hong Kong SAR (China)     India          Indonesia          Japan      \n Min.   : 3978         Min.   :  9935   Min.   : 10143   Min.   : 4700  \n 1st Qu.:18371         1st Qu.: 32476   1st Qu.: 54086   1st Qu.:38348  \n Median :25733         Median : 49047   Median : 97466   Median :46334  \n Mean   :26426         Mean   : 52103   Mean   :100319   Mean   :47847  \n 3rd Qu.:32186         3rd Qu.: 66248   3rd Qu.:143048   3rd Qu.:57074  \n Max.   :61067         Max.   :146781   Max.   :196581   Max.   :99193  \n  South Korea        Kuwait          Malaysia         Myanmar     \n Min.   : 1798   Min.   :   4.0   Min.   :  6677   Min.   :  671  \n 1st Qu.:20092   1st Qu.: 247.5   1st Qu.: 32454   1st Qu.: 2158  \n Median :23924   Median : 391.0   Median : 55916   Median : 5552  \n Mean   :26279   Mean   : 586.0   Mean   : 55453   Mean   : 5790  \n 3rd Qu.:31160   3rd Qu.: 684.2   3rd Qu.: 75847   3rd Qu.: 8363  \n Max.   :51129   Max.   :2878.0   Max.   :111825   Max.   :17940  \n    Pakistan     Philippines     Saudi Arabia      Sri Lanka    \n Min.   : 335   Min.   : 4209   Min.   :  26.0   Min.   : 1392  \n 1st Qu.:1070   1st Qu.:15956   1st Qu.: 541.8   1st Qu.: 4610  \n Median :1282   Median :31780   Median : 783.0   Median : 5406  \n Mean   :1495   Mean   :32244   Mean   :1006.4   Mean   : 5861  \n 3rd Qu.:1723   3rd Qu.:44988   3rd Qu.:1199.5   3rd Qu.: 6907  \n Max.   :4733   Max.   :69808   Max.   :6427.0   Max.   :13239  \n     Taiwan         Thailand     United Arab Emirates    Vietnam     \n Min.   :  825   Min.   : 2534   Min.   :  246        Min.   :  839  \n 1st Qu.:12768   1st Qu.:17936   1st Qu.: 1889        1st Qu.: 7349  \n Median :16244   Median :24864   Median : 3957        Median :19132  \n Mean   :17920   Mean   :26418   Mean   : 3995        Mean   :19714  \n 3rd Qu.:22407   3rd Qu.:33558   3rd Qu.: 5342        3rd Qu.:28684  \n Max.   :41208   Max.   :54359   Max.   :10584        Max.   :65554  \n Belgium & Luxembourg      CIS           Finland           France     \n Min.   : 296         Min.   :  287   Min.   : 158.0   Min.   : 1070  \n 1st Qu.:1360         1st Qu.: 1620   1st Qu.: 856.5   1st Qu.: 5551  \n Median :1664         Median : 3704   Median :1217.0   Median : 8558  \n Mean   :1735         Mean   : 3871   Mean   :1505.1   Mean   : 9014  \n 3rd Qu.:2038         3rd Qu.: 5032   3rd Qu.:1888.5   3rd Qu.:11083  \n Max.   :4398         Max.   :14407   Max.   :4855.0   Max.   :24736  \n    Germany         Ireland         Italy        Netherlands        Spain      \n Min.   : 3377   Min.   : 313   Min.   :  212   Min.   : 1564   Min.   :  161  \n 1st Qu.:11083   1st Qu.:1324   1st Qu.: 2343   1st Qu.: 4570   1st Qu.: 1270  \n Median :13550   Median :1520   Median : 3206   Median : 5118   Median : 2081  \n Mean   :15263   Mean   :1561   Mean   : 3842   Mean   : 5320   Mean   : 2466  \n 3rd Qu.:18482   3rd Qu.:1777   3rd Qu.: 4605   3rd Qu.: 5854   3rd Qu.: 3068  \n Max.   :33439   Max.   :2557   Max.   :20617   Max.   :10701   Max.   :11531  \n  Switzerland    United Kingdom    Australia       New Zealand   \n Min.   :  712   Min.   :10126   Min.   : 10727   Min.   : 2615  \n 1st Qu.: 3632   1st Qu.:28972   1st Qu.: 43252   1st Qu.: 6728  \n Median : 4988   Median :33986   Median : 61599   Median : 8539  \n Mean   : 5392   Mean   :33928   Mean   : 61740   Mean   : 8550  \n 3rd Qu.: 7160   3rd Qu.:38704   3rd Qu.: 76505   3rd Qu.:10184  \n Max.   :10512   Max.   :54669   Max.   :109142   Max.   :16844  \n```\n\n\n:::\n:::\n\n\n\n### 4.3 Data Preperation\n\n#### **Step 1: Deriving month and year fields**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`),\n                    levels = 1:12,\n                    labels = month.abb, # convert month num to abb (01 to Jan)\n                    ordered = TRUE) # ordered factor\n\nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n\n#### **Step 2: Extracting the target country**\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>%\n  select(`Vietnam`, month, year) %>%\n  filter(year >= 2010)\nkable(head(Vietnam))\n```\n\n::: {.cell-output-display}\n\n\n| Vietnam|month | year|\n|-------:|:-----|----:|\n|   15781|Jan   | 2010|\n|   16335|Feb   | 2010|\n|   18061|Mar   | 2010|\n|   22154|Apr   | 2010|\n|   21461|May   | 2010|\n|   28146|Jun   | 2010|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(Vietnam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [120 × 3] (S3: tbl_df/tbl/data.frame)\n $ Vietnam: num [1:120] 15781 16335 18061 22154 21461 ...\n $ month  : Ord.factor w/ 12 levels \"Jan\"<\"Feb\"<\"Mar\"<..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year   : int [1:120] 2010 2010 2010 2010 2010 2010 2010 2010 2010 2010 ...\n```\n\n\n:::\n:::\n\n\n\n#### **Step 3: Computing year average arrivals by month**\n\nThe code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate mean value for ref line\nhline_data <- Vietnam %>%\n  group_by(month) %>%\n  summarise(avgValue = mean(`Vietnam`))\n```\n:::\n\n\n\n### 4.4 Plotting the cycle plot\n\nThe code chunk below is used to plot the cycle plot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_line(data = Vietnam,\n            aes(x= year,y=`Vietnam`, group = month),\n            color = \"black\")+\n  geom_hline(data = hline_data,\n             aes(yintercept = avgValue),\n             linetype = \"dotted\",\n             color = \"#D989AE\",\n             size = 0.5 )+\n  facet_grid(~month)+\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by Air\\nJan 2010 - Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")+\n  theme_tufte(base_family = \"Helvetica\")+\n  theme(axis.ticks = element_blank(),\n      plot.title = element_text(size=10,hjust = 0.5, face=\"bold\"),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6),\n      panel.background = element_rect(fill = \"#f3f1e9\", color=NA),\n      plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n      axis.text.x = element_blank(),\n      axis.text.y = element_text(size=6)\n      )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## 5 Plotting Slopegraph\n\n### 5.1 Import data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"data/rice.csv\")\n```\n:::\n\n\n\n### 5.2 Examine data structure\n\nImport the rice data set into R environment by using the code chunk below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(rice))\n```\n\n::: {.cell-output-display}\n\n\n|Country | Year| Yield| Production|\n|:-------|----:|-----:|----------:|\n|China   | 1961| 20787|   56217601|\n|China   | 1962| 23700|   65675288|\n|China   | 1963| 26833|   76439280|\n|China   | 1964| 28289|   85853780|\n|China   | 1965| 29667|   90705630|\n|China   | 1966| 31445|   98403990|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(rice)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Country               Year          Yield         Production       \n Length:550         Min.   :1961   Min.   :12299   Min.   :   764158  \n Class :character   1st Qu.:1973   1st Qu.:21722   1st Qu.:  6515902  \n Mode  :character   Median :1986   Median :30548   Median : 13351700  \n                    Mean   :1986   Mean   :34945   Mean   : 33829459  \n                    3rd Qu.:1998   3rd Qu.:44713   3rd Qu.: 33488900  \n                    Max.   :2010   Max.   :75967   Max.   :202771840  \n```\n\n\n:::\n:::\n\n\n\n### 5.3 Plot the slopegraph\n\nCode chunk below will be used to plot a basic slopegraph:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>%\n  # turn year into factor for plotting\n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961,1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                  Title = \"Rice Yield of Top 11 Asian Counties\",\n                  SubTitle = \"1961-1980\",\n                  Caption = \"Created by: Dr. Kam Tin Seong\",\n                  DataLabelFillColor = \"#f3f1e9\")+\n  theme(axis.ticks = element_blank(),\n      plot.title = element_text(size=10,hjust = 0, face=\"bold\"),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6),\n      panel.background = element_rect(fill = \"#f3f1e9\", color=NA),\n      plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n      axis.text.x = element_blank(),\n      axis.text.y = element_blank()\n      )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex07_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-important appearance=\"simple\"}\n## Learn from the code chunk above\n\nFor effective data visualisation design, `factor()` is used convert the value type of *Year*field from numeric to factor.\n:::\n\n## 6 Reference\n\n-   Kam, T.S. (2025). [Visualising and Analysing Time-oriented Data](https://r4va.netlify.app/chap17)\n",
    "supporting": [
      "Hands-on_Ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}