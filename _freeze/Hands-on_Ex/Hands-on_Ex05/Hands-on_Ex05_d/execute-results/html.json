{
  "hash": "60668c0e4320936102a1ee544138d3ee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 05.d\"\nauthor: Johsuan Huang\ndate: 2024-02-12\ndate-modified: \"last-modified\"\ndescription: \"Treemap Visualisation with R\"\ncategories: [treemap, treemapify, tidyverse]\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## 1 Overview\n\nIn this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in **dplyr** package. Then, you will learn how to plot static treemap by using **treemap** package. In the third section, you will learn how to design interactive treemap by using **d3treeR** package.\n\n## 2 Getting Started\n\n::: panel-tabset\n## Loading the packages\n\nUse the **pacman** package `p_load()` to check, install and launch the following R packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(treemap, treemapify, tidyverse)\n```\n:::\n\n\n\n| **Library** | **Description**                                              |\n|------------------------|------------------------------------------------|\n| tidyverse   | a family of R packages for data processing                   |\n| treemapify  | The *treemapify* package allows creating treemaps in ggplot2 |\n\n## Importing the data\n\nIn this hands-on exercise, *REALIS2018.csv* will be used. This dataset provides information of private property transaction records in 2018, and was extracted from [REALIS portal](https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018 <- read_csv(\"data/realis2018.csv\")\n```\n:::\n\n\n\n## Observing the data\n\nAfter importing the data, let's examine it to understand its data structure:\n\nThe dataset contains 20 attributes and 23,205 observations with no missing values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(realis2018)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 20\n  `Project Name`  Address             `No. of Units` `Area (sqm)` `Type of Area`\n  <chr>           <chr>                        <dbl>        <dbl> <chr>         \n1 ADANA @ THOMSON 8 Old Upper Thomso…              1           52 Strata        \n2 ALANA           156 Sunrise Terrace              1          284 Strata        \n3 ALANA           104 Sunrise Terrace              1          256 Strata        \n4 ALANA           126 Sunrise Terrace              1          256 Strata        \n5 ATELIER VILLAS  43 Yio Chu Kang Dr…              1          277 Strata        \n6 ATELIER VILLAS  11 Yio Chu Kang Dr…              1          285 Strata        \n# ℹ 15 more variables: `Transacted Price ($)` <dbl>, `Nett Price($)` <chr>,\n#   `Unit Price ($ psm)` <dbl>, `Unit Price ($ psf)` <dbl>, `Sale Date` <chr>,\n#   `Property Type` <chr>, Tenure <chr>, `Completion Date` <chr>,\n#   `Type of Sale` <chr>, `Purchaser Address Indicator` <chr>,\n#   `Postal District` <dbl>, `Postal Sector` <dbl>, `Postal Code` <dbl>,\n#   `Planning Region` <chr>, `Planning Area` <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(realis2018)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [23,205 × 20] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Project Name               : chr [1:23205] \"ADANA @ THOMSON\" \"ALANA\" \"ALANA\" \"ALANA\" ...\n $ Address                    : chr [1:23205] \"8 Old Upper Thomson Road  #05-03\" \"156 Sunrise Terrace\" \"104 Sunrise Terrace\" \"126 Sunrise Terrace\" ...\n $ No. of Units               : num [1:23205] 1 1 1 1 1 1 1 1 1 1 ...\n $ Area (sqm)                 : num [1:23205] 52 284 256 256 277 285 234 155 115 117 ...\n $ Type of Area               : chr [1:23205] \"Strata\" \"Strata\" \"Strata\" \"Strata\" ...\n $ Transacted Price ($)       : num [1:23205] 888888 2530000 2390863 2450000 1980000 ...\n $ Nett Price($)              : chr [1:23205] \"-\" \"-\" \"2382517\" \"2441654\" ...\n $ Unit Price ($ psm)         : num [1:23205] 17094 8908 9307 9538 7148 ...\n $ Unit Price ($ psf)         : num [1:23205] 1588 828 865 886 664 ...\n $ Sale Date                  : chr [1:23205] \"4-Jul-18\" \"5-Oct-18\" \"9-Jun-18\" \"14-May-18\" ...\n $ Property Type              : chr [1:23205] \"Apartment\" \"Terrace House\" \"Terrace House\" \"Terrace House\" ...\n $ Tenure                     : chr [1:23205] \"Freehold\" \"103 Yrs From 12/08/2013\" \"103 Yrs From 12/08/2013\" \"103 Yrs From 12/08/2013\" ...\n $ Completion Date            : chr [1:23205] \"2018\" \"2018\" \"2018\" \"2018\" ...\n $ Type of Sale               : chr [1:23205] \"New Sale\" \"Sub Sale\" \"New Sale\" \"New Sale\" ...\n $ Purchaser Address Indicator: chr [1:23205] \"Private\" \"Private\" \"HDB\" \"N.A\" ...\n $ Postal District            : num [1:23205] 20 28 28 28 26 26 26 26 26 26 ...\n $ Postal Sector              : num [1:23205] 57 80 80 80 78 78 78 78 78 78 ...\n $ Postal Code                : num [1:23205] 573868 804555 804529 804540 786300 ...\n $ Planning Region            : chr [1:23205] \"North East Region\" \"North East Region\" \"North East Region\" \"North East Region\" ...\n $ Planning Area              : chr [1:23205] \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `Project Name` = col_character(),\n  ..   Address = col_character(),\n  ..   `No. of Units` = col_double(),\n  ..   `Area (sqm)` = col_double(),\n  ..   `Type of Area` = col_character(),\n  ..   `Transacted Price ($)` = col_double(),\n  ..   `Nett Price($)` = col_character(),\n  ..   `Unit Price ($ psm)` = col_double(),\n  ..   `Unit Price ($ psf)` = col_double(),\n  ..   `Sale Date` = col_character(),\n  ..   `Property Type` = col_character(),\n  ..   Tenure = col_character(),\n  ..   `Completion Date` = col_character(),\n  ..   `Type of Sale` = col_character(),\n  ..   `Purchaser Address Indicator` = col_character(),\n  ..   `Postal District` = col_double(),\n  ..   `Postal Sector` = col_double(),\n  ..   `Postal Code` = col_double(),\n  ..   `Planning Region` = col_character(),\n  ..   `Planning Area` = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(realis2018)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Project Name         Address           No. of Units   Area (sqm)    \n Length:23205       Length:23205       Min.   :1     Min.   :  24.0  \n Class :character   Class :character   1st Qu.:1     1st Qu.:  67.0  \n Mode  :character   Mode  :character   Median :1     Median :  98.0  \n                                       Mean   :1     Mean   : 118.2  \n                                       3rd Qu.:1     3rd Qu.: 127.0  \n                                       Max.   :1     Max.   :4836.0  \n Type of Area       Transacted Price ($) Nett Price($)      Unit Price ($ psm)\n Length:23205       Min.   :    40000    Length:23205       Min.   :  355     \n Class :character   1st Qu.:   950000    Class :character   1st Qu.:11231     \n Mode  :character   Median :  1280000    Mode  :character   Median :14621     \n                    Mean   :  1734099                       Mean   :15246     \n                    3rd Qu.:  1858000                       3rd Qu.:18075     \n                    Max.   :100000000                       Max.   :54363     \n Unit Price ($ psf)  Sale Date         Property Type         Tenure         \n Min.   :  33       Length:23205       Length:23205       Length:23205      \n 1st Qu.:1043       Class :character   Class :character   Class :character  \n Median :1358       Mode  :character   Mode  :character   Mode  :character  \n Mean   :1416                                                               \n 3rd Qu.:1679                                                               \n Max.   :5050                                                               \n Completion Date    Type of Sale       Purchaser Address Indicator\n Length:23205       Length:23205       Length:23205               \n Class :character   Class :character   Class :character           \n Mode  :character   Mode  :character   Mode  :character           \n                                                                  \n                                                                  \n                                                                  \n Postal District Postal Sector    Postal Code     Planning Region   \n Min.   : 1.00   Min.   : 1.00   Min.   : 18965   Length:23205      \n 1st Qu.:10.00   1st Qu.:26.00   1st Qu.:267952   Class :character  \n Median :15.00   Median :45.00   Median :456068   Mode  :character  \n Mean   :14.96   Mean   :42.66   Mean   :434269                     \n 3rd Qu.:19.00   3rd Qu.:54.00   3rd Qu.:548461                     \n Max.   :28.00   Max.   :82.00   Max.   :829750                     \n Planning Area     \n Length:23205      \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# check missing value\nany(is.na(realis2018))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n## Data Wrangling\n\nThe data.frame *realis2018* is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\n-   group transaction records by *Project Name*, *Planning Region*, *Planning Area*, *Property Type* and *Type of Sale*\n\n-   compute *Total Unit Sold*, *Total Area*, *Median Unit Price* and *Median Transacted Price* by applying appropriate summary statistics on *No. of Units*, *Area (sqm)*, *Unit Price (\\$ psm)* and *Transacted Price (\\$)* respectively.\n\nTwo key verbs of **dplyr** package, namely: *group_by()* and *summarise()* will be used to perform these steps.\n\n***group_by()*** breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\n\nGrouping affects the verbs as follows:\n\n-   grouped *select()* is the same as ungrouped *select()*, except that grouping variables are always retained.\n\n-   grouped *arrange()* is the same as ungrouped; unless you set *.by_group = TRUE*, in which case it orders first by the grouping variables.\n\n-   *mutate()* and *filter()* are most useful in conjunction with window functions (like *rank()*, or *min(x) == x*).\n\n-   *sample_n()* and *sample_frac()* sample the specified number/fraction of rows in each group.\n\n-   *summarise()* computes the summary for each group.\n\nIn our case, *group_by()* will used together with *summarise()* to derive the summarised data.frame.\n\nThere are two ways to group the summaries:\n\n#### Grouped summaries without the Pipe\n\nThe code chank below shows a typical two lines code approach to perform the steps.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018_grouped <- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised <- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n```\n:::\n\n\n\n#### Grouped summaries with the Pipe\n\nThe code chunk below shows a more efficient way to tackle the same processes by using the *pipe*, %\\>%:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018_summarised <- realis2018 %>% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %>%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\nhead(realis2018_summarised)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n# Groups:   Project Name, Planning Region, Planning Area, Property Type [6]\n  `Project Name`     `Planning Region` `Planning Area` `Property Type`      \n  <chr>              <chr>             <chr>           <chr>                \n1 # 1 LOFT           Central Region    Geylang         Apartment            \n2 # 1 SUITES         Central Region    Geylang         Apartment            \n3 1 CANBERRA         North Region      Yishun          Executive Condominium\n4 1 KING ALBERT PARK Central Region    Bukit Timah     Condominium          \n5 10 EVELYN          Central Region    Novena          Apartment            \n6 10 SHELFORD        Central Region    Bukit Timah     Apartment            \n# ℹ 5 more variables: `Type of Sale` <chr>, `Total Unit Sold` <dbl>,\n#   `Total Area` <dbl>, `Median Unit Price ($ psm)` <dbl>,\n#   `Median Transacted Price` <dbl>\n```\n\n\n:::\n:::\n\n\n:::\n\n## 3 Designing Static Treemap with treemap Package\n\nIn this section, *`treemap()`* of **Treemap** package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2017.\n\nFirst, we will select records belongs to **resale & condominium** property type from *realis2018_selected* data frame using `filter()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2018_selected <- realis2018_summarised %>%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n```\n:::\n\n\n\n### 3.1 Using the basic arguments\n\nThe code chunk below designed a treemap by using three core arguments of *treemap()*, namely: *index*, *vSize* and *vColor*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\n## Things to learn from the code chunck\n\n-   **index**\n\n    -   **The index vector must consist of at least two column names** or else no hierarchy treemap will be plotted.\n\n    -   If multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.(e.g. Central Region -\\> Kallang -\\> Pebble Bay)\n\n-   **vSize**\n\n    -   The column **must not contain negative values**. This is because its value will be used to map the **sizes of the rectangles** of the treemaps.\n:::\n\n### 3.2 Working with *vColor* and *type* arguments\n\nFor a correctly designed treemap, **the rectangles should display varying color intensities**. The plot in 3.1 is an incorrect example of this. In our case, **median unit prices** should determine the color intensity of each rectangle.\n\nFor *treemap()*, *vColor* is used in combination with the argument *type* to determines the colours of the rectangles. Without defining *type*, like the code chunk above, *treemap()* assumes type = index, in our case, the hierarchy of planning areas.\n\nIn the code chunk below, *type* argument is define as value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\n## Thinking to learn from the conde chunk above\n\n-   The rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\n\n-   The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.\n:::\n\n### 3.3 Colours in treemap package\n\nThere are two arguments that determine the mapping to color palettes: ***mapping*** and ***palette***.\n\nThe only difference between “value” and “manual” is the default value for mapping:\n\n-   **\"value\" type treemap**: considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that ***0*** **corresponds to the middle color** (typically white or yellow), *-max(abs(values))* to the left-end color, and *max(abs(values))*, to the right-end color.\n\n-   **\"manual\" type treemap**: simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\n\n    :::: panel-tabset\n    ## value-type\n\n    The code chunk below shows a value type treemap:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    treemap(realis2018_selected,\n            index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n            vSize=\"Total Unit Sold\",\n            vColor=\"Median Unit Price ($ psm)\",\n            type=\"value\",\n            palette=\"RdYlBu\", \n            title=\"Resale Condominium by Planning Region and Area, 2017\",\n            title.legend = \"Median Unit Price (S$ per sq. m)\"\n            )\n    ```\n    \n    ::: {.cell-output-display}\n    ![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-12-1.png){width=672}\n    :::\n    :::\n\n\n\n    ::: {.callout-note appearance=\"simple\"}\n    ## Thing to learn from the code chunk above\n\n    -   although the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.\n\n    -   The reason why we see only 5000 to 45000 in the legend is because the *`range`* argument is by default `c(min(values, max(values))` with some pretty rounding.\n    :::\n\n    ## manual-type\n\n    The “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\n\n    As the plot shown below, The colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). **It is not wise to use diverging colour palette such as *RdYlBu* if the values are all positive or negative.**\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    treemap(realis2018_selected,\n            index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n            vSize=\"Total Unit Sold\",\n            vColor=\"Median Unit Price ($ psm)\",\n            type=\"manual\",\n            palette=\"RdYlBu\", \n            title=\"Resale Condominium by Planning Region and Area, 2017\",\n            title.legend = \"Median Unit Price (S$ per sq. m)\"\n            )\n    ```\n    \n    ::: {.cell-output-display}\n    ![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-13-1.png){width=672}\n    :::\n    :::\n\n\n\n    To overcome this problem, a single colour palette such as Blues should be used.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    treemap(realis2018_selected,\n            index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n            vSize=\"Total Unit Sold\",\n            vColor=\"Median Unit Price ($ psm)\",\n            type=\"manual\",\n            palette=\"Blues\", \n            title=\"Resale Condominium by Planning Region and Area, 2017\",\n            title.legend = \"Median Unit Price (S$ per sq. m)\"\n            )\n    ```\n    \n    ::: {.cell-output-display}\n    ![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-14-1.png){width=672}\n    :::\n    :::\n\n\n    ::::\n\n### 3.4 Treemap Layout\n\n*treemap()* supports two popular treemap layouts, namely: “**squarified**” and “**pivotSize**”. The default is “pivotSize”.\n\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n### 3.5 Working with *algorithm* argument\n\nThe code chunk below plots a squarified treemap by changing the *algorithm*argument:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n### 3.6 Using *sortID*\n\nWhen “pivotSize” algorithm is used, *sortID* argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n## 4 Designing Treemap using treemapify Package\n\n**treemapify** is a R package specially developed to draw treemaps in **ggplot2**. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using **treemapify**. Before you getting started, you should read [Introduction to “treemapify”](https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html) its [user guide](https://cran.r-project.org/web/packages/treemapify/treemapify.pdf).\n\n### 4.1 Designing a basic treemap\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### 4.2 Defining hierarchy\n\n::: panel-tabset\n## Group by Planning Region\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Group by Planning Area\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) +  #<<< adding\n  geom_treemap()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nAdding boundary line:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\", #<< adding border for PA\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\") #<< adding border for planning region\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## 5 Designing Interactive Treemap using d3treeR\n\n### 5.1 Load *d3treeR* package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(d3treeR)\n```\n:::\n\n\n\n### 5.2 Designing An Interactive Treemap\n\nThe codes below perform two processes.\n\n1.  *treemap()* is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called ***tm***.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    tm <- treemap(realis2018_summarised,\n            index=c(\"Planning Region\", \"Planning Area\"),\n            vSize=\"Total Unit Sold\",\n            vColor=\"Median Unit Price ($ psm)\",\n            type=\"value\",\n            title=\"Private Residential Property Sold, 2017\",\n            title.legend = \"Median Unit Price (S$ per sq. m)\"\n            )\n    ```\n    \n    ::: {.cell-output-display}\n    ![](Hands-on_Ex05_d_files/figure-html/unnamed-chunk-22-1.png){width=672}\n    :::\n    :::\n\n\n\n<!-- -->\n\n2.  Then *`d3tree()`* is used to build an interactive treemap:\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    d3tree(tm,rootname = \"Singapore\") #<< set up root name (the root) as Singapore\n    ```\n    \n    ::: {.cell-output-display}\n    \n    ```{=html}\n    <div class=\"d3tree html-widget html-fill-item\" id=\"htmlwidget-770d64fe1010a6a43abf\" style=\"width:100%;height:464px;\"></div>\n    <script type=\"application/json\" data-for=\"htmlwidget-770d64fe1010a6a43abf\">{\"x\":{\"data\":{\"name\":\"Singapore\",\"id\":1,\"size\":null,\"children\":[{\"name\":\"Central Region\",\"color\":\"#006837\",\"h\":1,\"id\":2,\"size\":10825,\"stdErr\":10825,\"vColor\":20978846.5,\"vColorValue\":20978846.5,\"vSize\":10825,\"w\":0.4664942900237018,\"x0\":0,\"y0\":0,\"children\":[{\"name\":\"Bishan\",\"color\":\"#D9EF8B\",\"h\":0.2165611047442029,\"id\":3,\"size\":698,\"stdErr\":698,\"vColor\":749211.5,\"vColorValue\":749211.5,\"vSize\":698,\"w\":0.1388971682283426,\"x0\":0.3275971217953593,\"y0\":0.3973880869417094},{\"name\":\"Bukit Merah\",\"color\":\"#DCF090\",\"h\":0.2165611047442029,\"id\":4,\"size\":708,\"stdErr\":708,\"vColor\":689448,\"vColorValue\":689448,\"vSize\":708,\"w\":0.1408870990052529,\"x0\":0.1867100227901064,\"y0\":0.3973880869417094},{\"name\":\"Bukit Timah\",\"color\":\"#219B51\",\"h\":0.2702761291218809,\"id\":5,\"size\":1171,\"stdErr\":1171,\"vColor\":2823552.5,\"vColorValue\":2823552.5,\"vSize\":1171,\"w\":0.1867100227901064,\"x0\":0,\"y0\":0.3436730625640314},{\"name\":\"Downtown Core\",\"color\":\"#E0F295\",\"h\":0.225794694775928,\"id\":6,\"size\":439,\"stdErr\":439,\"vColor\":570894,\"vColorValue\":570894,\"vSize\":439,\"w\":0.08378556716830476,\"x0\":0.3035036878329677,\"y0\":0.1715933921657813},{\"name\":\"Geylang\",\"color\":\"#66BD63\",\"h\":0.3860508083140878,\"id\":7,\"size\":1489,\"stdErr\":1489,\"vColor\":2140814.5,\"vColorValue\":2140814.5,\"vSize\":1489,\"w\":0.1662144048445302,\"x0\":0,\"y0\":0.6139491916859122},{\"name\":\"Kallang\",\"color\":\"#A6D96A\",\"h\":0.1747216308670059,\"id\":8,\"size\":757,\"stdErr\":757,\"vColor\":1415268,\"vColorValue\":1415268,\"vSize\":757,\"w\":0.1867100227901064,\"x0\":0,\"y0\":0.1689514316970255},{\"name\":\"Marine Parade\",\"color\":\"#ABDB6D\",\"h\":0.1807986653680943,\"id\":9,\"size\":490,\"stdErr\":490,\"vColor\":1397529.5,\"vColorValue\":1397529.5,\"vSize\":490,\"w\":0.1167936650428614,\"x0\":0.1867100227901064,\"y0\":0},{\"name\":\"Museum\",\"color\":\"#FBFDB9\",\"h\":0.0351116940585223,\"id\":10,\"size\":28,\"stdErr\":28,\"vColor\":135893,\"vColorValue\":135893,\"vSize\":28,\"w\":0.03436565888114059,\"x0\":0.4321286311425612,\"y0\":0.02884174869092903},{\"name\":\"Newton\",\"color\":\"#B0DD70\",\"h\":0.1715933921657813,\"id\":11,\"size\":268,\"stdErr\":268,\"vColor\":1306816,\"vColorValue\":1306816,\"vSize\":268,\"w\":0.06730582648246029,\"x0\":0.3035036878329677,\"y0\":0},{\"name\":\"Novena\",\"color\":\"#40AA59\",\"h\":0.1689514316970255,\"id\":12,\"size\":732,\"stdErr\":732,\"vColor\":2483944.5,\"vColorValue\":2483944.5,\"vSize\":732,\"w\":0.1867100227901064,\"x0\":0,\"y0\":0},{\"name\":\"Orchard\",\"color\":\"#F3FAAF\",\"h\":0.06395344274945129,\"id\":13,\"size\":42,\"stdErr\":42,\"vColor\":251834.5,\"vColorValue\":251834.5,\"vSize\":42,\"w\":0.02830113084329224,\"x0\":0.403827500299269,\"y0\":0},{\"name\":\"Outram\",\"color\":\"#FBFDB9\",\"h\":0.02884174869092899,\"id\":14,\"size\":23,\"stdErr\":23,\"vColor\":130671,\"vColorValue\":130671,\"vSize\":23,\"w\":0.03436565888114063,\"x0\":0.4321286311425612,\"y0\":0},{\"name\":\"Queenstown\",\"color\":\"#C9E881\",\"h\":0.3860508083140878,\"id\":15,\"size\":1432,\"stdErr\":1432,\"vColor\":953979.5,\"vColorValue\":953979.5,\"vSize\":1432,\"w\":0.1598515968686147,\"x0\":0.1662144048445302,\"y0\":0.6139491916859122},{\"name\":\"River Valley\",\"color\":\"#72C264\",\"h\":0.216589421573615,\"id\":16,\"size\":587,\"stdErr\":587,\"vColor\":1998014,\"vColorValue\":1998014,\"vSize\":587,\"w\":0.1167936650428614,\"x0\":0.1867100227901064,\"y0\":0.1807986653680943},{\"name\":\"Rochor\",\"color\":\"#E4F39A\",\"h\":0.1076399494163301,\"id\":17,\"size\":132,\"stdErr\":132,\"vColor\":520971,\"vColorValue\":520971,\"vSize\":132,\"w\":0.05284682173009263,\"x0\":0.3708095143154281,\"y0\":0.06395344274945132},{\"name\":\"Singapore River\",\"color\":\"#ECF7A4\",\"h\":0.10763994941633,\"id\":18,\"size\":107,\"stdErr\":107,\"vColor\":378001,\"vColorValue\":378001,\"vSize\":107,\"w\":0.04283795397818115,\"x0\":0.4236563360455207,\"y0\":0.06395344274945133},{\"name\":\"Southern Islands\",\"color\":\"#F7FBB4\",\"h\":0.06395344274945129,\"id\":19,\"size\":49,\"stdErr\":49,\"vColor\":173903,\"vColorValue\":173903,\"vSize\":49,\"w\":0.03301798598384095,\"x0\":0.3708095143154281,\"y0\":0},{\"name\":\"Tanglin\",\"color\":\"#66BD63\",\"h\":0.225794694775928,\"id\":20,\"size\":415,\"stdErr\":415,\"vColor\":2187332,\"vColorValue\":2187332,\"vSize\":415,\"w\":0.07920503502242932,\"x0\":0.3872892550012725,\"y0\":0.1715933921657814},{\"name\":\"Toa Payoh\",\"color\":\"#DCF090\",\"h\":0.3860508083140878,\"id\":21,\"size\":1258,\"stdErr\":1258,\"vColor\":670769,\"vColorValue\":670769,\"vSize\":1258,\"w\":0.1404282883105568,\"x0\":0.326066001713145,\"y0\":0.6139491916859122}]},{\"name\":\"East Region\",\"color\":\"#006837\",\"h\":0.6954765751211631,\"id\":22,\"size\":3775,\"stdErr\":3775,\"vColor\":4616987.5,\"vColorValue\":4616987.5,\"vSize\":3775,\"w\":0.2339122015285163,\"x0\":0.7660877984714837,\"y0\":0.3045234248788369,\"children\":[{\"name\":\"Bedok\",\"color\":\"#006837\",\"h\":0.3334602916474981,\"id\":23,\"size\":1810,\"stdErr\":1810,\"vColor\":3529868.5,\"vColorValue\":3529868.5,\"vSize\":1810,\"w\":0.2339122015285163,\"x0\":0.7660877984714837,\"y0\":0.666539708352502},{\"name\":\"Changi\",\"color\":\"#FFFFBF\",\"h\":0.001895373211904017,\"id\":24,\"size\":5,\"stdErr\":5,\"vColor\":20564,\"vColorValue\":20564,\"vSize\":5,\"w\":0.113682520335742,\"x0\":0.886317479664258,\"y0\":0.3045234248788369},{\"name\":\"Pasir Ris\",\"color\":\"#DCF090\",\"h\":0.360120910261761,\"id\":25,\"size\":950,\"stdErr\":950,\"vColor\":669171,\"vColorValue\":669171,\"vSize\":950,\"w\":0.113682520335742,\"x0\":0.886317479664258,\"y0\":0.306418798090741},{\"name\":\"Tampines\",\"color\":\"#ECF7A4\",\"h\":0.362016283473665,\"id\":26,\"size\":1010,\"stdErr\":1010,\"vColor\":397384,\"vColorValue\":397384,\"vSize\":1010,\"w\":0.1202296811927743,\"x0\":0.7660877984714837,\"y0\":0.304523424878837}]},{\"name\":\"North East Region\",\"color\":\"#006837\",\"h\":0.6954765751211631,\"id\":27,\"size\":4835,\"stdErr\":4835,\"vColor\":4208661,\"vColorValue\":4208661,\"vSize\":4835,\"w\":0.2995935084477819,\"x0\":0.4664942900237018,\"y0\":0.3045234248788369,\"children\":[{\"name\":\"Ang Mo Kio\",\"color\":\"#DCF090\",\"h\":0.1240051577145652,\"id\":28,\"size\":316,\"stdErr\":316,\"vColor\":640722.5,\"vColorValue\":640722.5,\"vSize\":316,\"w\":0.1098160354391928,\"x0\":0.656271763032291,\"y0\":0.427351318437884},{\"name\":\"Hougang\",\"color\":\"#99D368\",\"h\":0.4486435238475507,\"id\":29,\"size\":1875,\"stdErr\":1875,\"vColor\":1617014.5,\"vColorValue\":1617014.5,\"vSize\":1875,\"w\":0.1801019007180478,\"x0\":0.4664942900237018,\"y0\":0.5513564761524492},{\"name\":\"Punggol\",\"color\":\"#FBFDB9\",\"h\":0.1228278935590471,\"id\":30,\"size\":313,\"stdErr\":313,\"vColor\":126110,\"vColorValue\":126110,\"vSize\":313,\"w\":0.1098160354391928,\"x0\":0.656271763032291,\"y0\":0.3045234248788369},{\"name\":\"Sengkang\",\"color\":\"#EFF8AA\",\"h\":0.4486435238475507,\"id\":31,\"size\":1244,\"stdErr\":1244,\"vColor\":348343.5,\"vColorValue\":348343.5,\"vSize\":1244,\"w\":0.1194916077297341,\"x0\":0.6465961907417496,\"y0\":0.5513564761524492},{\"name\":\"Serangoon\",\"color\":\"#A6D96A\",\"h\":0.2468330512736124,\"id\":32,\"size\":1087,\"stdErr\":1087,\"vColor\":1476470.5,\"vColorValue\":1476470.5,\"vSize\":1087,\"w\":0.1897774730085891,\"x0\":0.4664942900237018,\"y0\":0.3045234248788368}]},{\"name\":\"North Region\",\"color\":\"#CEEA84\",\"h\":0.3045234248788368,\"id\":33,\"size\":1117,\"stdErr\":1117,\"vColor\":866745,\"vColorValue\":866745,\"vSize\":1117,\"w\":0.1580705246799801,\"x0\":0.8419294753200199,\"y0\":0,\"children\":[{\"name\":\"Mandai\",\"color\":\"#FFFFBF\",\"h\":0.02952717240970038,\"id\":34,\"size\":29,\"stdErr\":29,\"vColor\":62025,\"vColorValue\":62025,\"vSize\":29,\"w\":0.04232476595303115,\"x0\":0.9503778606067911,\"y0\":0},{\"name\":\"Sembawang\",\"color\":\"#F3FAAF\",\"h\":0.1968360902081649,\"id\":35,\"size\":286,\"stdErr\":286,\"vColor\":244075,\"vColorValue\":244075,\"vSize\":286,\"w\":0.06261519398680651,\"x0\":0.9373848060131935,\"y0\":0.1076873346706719},{\"name\":\"Sungei Kadut\",\"color\":\"#FFFFBF\",\"h\":0.02952717240970027,\"id\":36,\"size\":5,\"stdErr\":5,\"vColor\":24359,\"vColorValue\":24359,\"vSize\":5,\"w\":0.007297373440177785,\"x0\":0.9927026265598221,\"y0\":0},{\"name\":\"Woodlands\",\"color\":\"#F7FBB4\",\"h\":0.1076873346706719,\"id\":37,\"size\":271,\"stdErr\":271,\"vColor\":164195,\"vColorValue\":164195,\"vSize\":271,\"w\":0.1084483852867712,\"x0\":0.8419294753200199,\"y0\":0},{\"name\":\"Yishun\",\"color\":\"#EFF8AA\",\"h\":0.1968360902081649,\"id\":38,\"size\":436,\"stdErr\":436,\"vColor\":313496,\"vColorValue\":313496,\"vSize\":436,\"w\":0.09545533069317358,\"x0\":0.8419294753200199,\"y0\":0.1076873346706719},{\"name\":\"YISHUN\",\"color\":\"#FFFFBF\",\"h\":0.07816016226097153,\"id\":39,\"size\":90,\"stdErr\":90,\"vColor\":58595,\"vColorValue\":58595,\"vSize\":90,\"w\":0.04962213939320893,\"x0\":0.9503778606067911,\"y0\":0.02952717240970034}]},{\"name\":\"West Region\",\"color\":\"#79C565\",\"h\":0.3045234248788369,\"id\":40,\"size\":2653,\"stdErr\":2653,\"vColor\":1919890.5,\"vColorValue\":1919890.5,\"vSize\":2653,\"w\":0.3754351852963181,\"x0\":0.4664942900237018,\"y0\":0,\"children\":[{\"name\":\"Bukit Batok\",\"color\":\"#E0F295\",\"h\":0.2045358948206935,\"id\":41,\"size\":583,\"stdErr\":583,\"vColor\":618812.5,\"vColorValue\":618812.5,\"vSize\":583,\"w\":0.1228336754003785,\"x0\":0.6316404872497866,\"y0\":0.09998753005814345},{\"name\":\"Bukit Panjang\",\"color\":\"#ECF7A4\",\"h\":0.09998753005814345,\"id\":42,\"size\":285,\"stdErr\":285,\"vColor\":374543.5,\"vColorValue\":374543.5,\"vSize\":285,\"w\":0.1228336754003785,\"x0\":0.6316404872497866,\"y0\":0},{\"name\":\"Choa Chu Kang\",\"color\":\"#FBFDB9\",\"h\":0.1320587020510166,\"id\":43,\"size\":268,\"stdErr\":268,\"vColor\":125114,\"vColorValue\":125114,\"vSize\":268,\"w\":0.08745531266985472,\"x0\":0.7544741626501652,\"y0\":0.03498570091650066},{\"name\":\"Clementi\",\"color\":\"#E4F39A\",\"h\":0.3045234248788369,\"id\":44,\"size\":1167,\"stdErr\":1167,\"vColor\":531398.5,\"vColorValue\":531398.5,\"vSize\":1167,\"w\":0.1651461972260849,\"x0\":0.4664942900237018,\"y0\":0},{\"name\":\"Jurong East\",\"color\":\"#FFFFBF\",\"h\":0.03498570091650072,\"id\":45,\"size\":71,\"stdErr\":71,\"vColor\":65122,\"vColorValue\":65122,\"vSize\":71,\"w\":0.08745531266985475,\"x0\":0.7544741626501652,\"y0\":0},{\"name\":\"Jurong West\",\"color\":\"#F7FBB4\",\"h\":0.1374790219113196,\"id\":46,\"size\":279,\"stdErr\":279,\"vColor\":204900,\"vColorValue\":204900,\"vSize\":279,\"w\":0.08745531266985472,\"x0\":0.7544741626501652,\"y0\":0.1670444029675173}]}]},\"meta\":{\"type\":\"value\",\"vSize\":\"Total Unit Sold\",\"vColor\":\"Median Unit Price ($ psm)\",\"stdErr\":\"Total Unit Sold\",\"algorithm\":\"pivotSize\",\"vpCoorX\":[0.02812148481439815,0.9718785151856019],\"vpCoorY\":[0.1716850393700787,0.9103149606299213],\"aspRatio\":1.788798157900348,\"range\":[0,3500000],\"mapping\":[null,null,null],\"draw\":true},\"options\":{\"id\":\"id\",\"celltext\":\"name\",\"valueField\":\"size\"}},\"evals\":[],\"jsHooks\":[]}</script>\n    ```\n    \n    :::\n    :::\n\n\n\n## 6 Reference\n\n-   Kam, T.S. (2025). [Treemap Visualisation with R](https://r4va.netlify.app/chap16 \"Treemap Visualisation with R\")\n",
    "supporting": [
      "Hands-on_Ex05_d_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/d3-3.5.5/d3.min.js\"></script>\n<link href=\"../../site_libs/d3tree-0.1/d3tree.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/d3tree-binding-0.1/d3tree.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}