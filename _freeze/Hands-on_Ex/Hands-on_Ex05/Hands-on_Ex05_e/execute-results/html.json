{
  "hash": "3341a8734fa6792218a94c0933c9d63a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 05.e\"\nauthor: Johsuan Huang\ndate: 2024-02-13\ndate-modified: \"last-modified\"\ndescription: \"Visual Correlation Analysis\"\ncategories: [treemap, treemapify, tidyverse]\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## 1 Overview\n\nCorrelation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\n\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\n\nThere are three broad reasons for computing a correlation matrix.\n\n-   To reveal the relationship between high-dimensional variables pair-wisely.\n\n-   To input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\n\n-   As a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\n-   Rendering the value of a correlation to depict its sign and magnitude, and\n\n-   Reordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using [*pairs()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.0/topics/pairs) of R Graphics. Next, you will learn how to plot corrgram using **corrplot** package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R.\n\n## 2 Getting Started\n\n::: panel-tabset\n## Loading the packages\n\nUse the **pacman** package `p_load()` to check, install and launch the following R packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n\n\n## Importing the data\n\nIn this hands-on exercise, the Wine Quality Data Set of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n\n## Observing the data\n\nAfter importing the data, let's examine it to understand its data structure:\n\nThe dataset contains 13 attributes and 6,497 observations with no missing values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(wine)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 13\n  `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n            <dbl>              <dbl>         <dbl>            <dbl>     <dbl>\n1             7.4               0.7           0                 1.9     0.076\n2             7.8               0.88          0                 2.6     0.098\n3             7.8               0.76          0.04              2.3     0.092\n4            11.2               0.28          0.56              1.9     0.075\n5             7.4               0.7           0                 1.9     0.076\n6             7.4               0.66          0                 1.8     0.075\n# ℹ 8 more variables: `free sulfur dioxide` <dbl>,\n#   `total sulfur dioxide` <dbl>, density <dbl>, pH <dbl>, sulphates <dbl>,\n#   alcohol <dbl>, quality <dbl>, type <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(wine)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [6,497 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ fixed acidity       : num [1:6497] 7.4 7.8 7.8 11.2 7.4 7.4 7.9 7.3 7.8 7.5 ...\n $ volatile acidity    : num [1:6497] 0.7 0.88 0.76 0.28 0.7 0.66 0.6 0.65 0.58 0.5 ...\n $ citric acid         : num [1:6497] 0 0 0.04 0.56 0 0 0.06 0 0.02 0.36 ...\n $ residual sugar      : num [1:6497] 1.9 2.6 2.3 1.9 1.9 1.8 1.6 1.2 2 6.1 ...\n $ chlorides           : num [1:6497] 0.076 0.098 0.092 0.075 0.076 0.075 0.069 0.065 0.073 0.071 ...\n $ free sulfur dioxide : num [1:6497] 11 25 15 17 11 13 15 15 9 17 ...\n $ total sulfur dioxide: num [1:6497] 34 67 54 60 34 40 59 21 18 102 ...\n $ density             : num [1:6497] 0.998 0.997 0.997 0.998 0.998 ...\n $ pH                  : num [1:6497] 3.51 3.2 3.26 3.16 3.51 3.51 3.3 3.39 3.36 3.35 ...\n $ sulphates           : num [1:6497] 0.56 0.68 0.65 0.58 0.56 0.56 0.46 0.47 0.57 0.8 ...\n $ alcohol             : num [1:6497] 9.4 9.8 9.8 9.8 9.4 9.4 9.4 10 9.5 10.5 ...\n $ quality             : num [1:6497] 5 5 5 6 5 5 5 7 7 5 ...\n $ type                : chr [1:6497] \"red\" \"red\" \"red\" \"red\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `fixed acidity` = col_double(),\n  ..   `volatile acidity` = col_double(),\n  ..   `citric acid` = col_double(),\n  ..   `residual sugar` = col_double(),\n  ..   chlorides = col_double(),\n  ..   `free sulfur dioxide` = col_double(),\n  ..   `total sulfur dioxide` = col_double(),\n  ..   density = col_double(),\n  ..   pH = col_double(),\n  ..   sulphates = col_double(),\n  ..   alcohol = col_double(),\n  ..   quality = col_double(),\n  ..   type = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(wine)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n fixed acidity    volatile acidity  citric acid     residual sugar  \n Min.   : 3.800   Min.   :0.0800   Min.   :0.0000   Min.   : 0.600  \n 1st Qu.: 6.400   1st Qu.:0.2300   1st Qu.:0.2500   1st Qu.: 1.800  \n Median : 7.000   Median :0.2900   Median :0.3100   Median : 3.000  \n Mean   : 7.215   Mean   :0.3397   Mean   :0.3186   Mean   : 5.443  \n 3rd Qu.: 7.700   3rd Qu.:0.4000   3rd Qu.:0.3900   3rd Qu.: 8.100  \n Max.   :15.900   Max.   :1.5800   Max.   :1.6600   Max.   :65.800  \n   chlorides       free sulfur dioxide total sulfur dioxide    density      \n Min.   :0.00900   Min.   :  1.00      Min.   :  6.0        Min.   :0.9871  \n 1st Qu.:0.03800   1st Qu.: 17.00      1st Qu.: 77.0        1st Qu.:0.9923  \n Median :0.04700   Median : 29.00      Median :118.0        Median :0.9949  \n Mean   :0.05603   Mean   : 30.53      Mean   :115.7        Mean   :0.9947  \n 3rd Qu.:0.06500   3rd Qu.: 41.00      3rd Qu.:156.0        3rd Qu.:0.9970  \n Max.   :0.61100   Max.   :289.00      Max.   :440.0        Max.   :1.0390  \n       pH          sulphates         alcohol         quality     \n Min.   :2.720   Min.   :0.2200   Min.   : 8.00   Min.   :3.000  \n 1st Qu.:3.110   1st Qu.:0.4300   1st Qu.: 9.50   1st Qu.:5.000  \n Median :3.210   Median :0.5100   Median :10.30   Median :6.000  \n Mean   :3.219   Mean   :0.5313   Mean   :10.49   Mean   :5.818  \n 3rd Qu.:3.320   3rd Qu.:0.6000   3rd Qu.:11.30   3rd Qu.:6.000  \n Max.   :4.010   Max.   :2.0000   Max.   :14.90   Max.   :9.000  \n     type          \n Length:6497       \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# check missing value\nany(is.na(wine))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n## 3 Building Correlation Matrix: *pairs()* method\n\nThere are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the *pairs* function of R Graphics.\n\nBefore you continue to the next step, you should read the syntax description of [*pairs*](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html)function.\n\n### 3.1 Building a basic correlation matrix\n\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\npairs(wine[,1:11],main = \"Correlation Matrix\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nThe required input of *pairs()* can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default *pairs* function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\npairs(wine[,2:12],main = \"Correlation Matrix\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n### 3.2 Drawing the lower and upper corner\n\n*pairs* function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\n\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\n::: panel-tabset\n## lower panel\n\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\npairs(wine[,2:12], upper.panel = NULL,\n      main = \"Correlation Matrix with lower panel\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n## upper panel\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\npairs(wine[,2:12], lower.panel = NULL,\n      main = \"Correlation Matrix with upper panel\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### 3.3 Including with correlation coefficients\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, [*panel.cor*](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function will be used. This will also show higher correlations in a larger font.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor,\n      main = \"Correlation Matrix\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## 4 Visualising Correlation Matrix: *ggcormat()* of ggstatplot\n\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, **Corrgram** data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\n\nThe are at least three R packages provide function to plot corrgram, they are:\n\n-   [corrgram](https://cran.r-project.org/web/packages/corrgram/index.html)\n\n-   [ellipse](https://cran.r-project.org/web/packages/ellipse/index.html)\n\n-   [corrplot](https://cran.r-project.org/web/packages/corrplot/index.html)\n\nIn this section, we learn how to visualising correlation matrix by using `ggcorrmat()` of **ggstatsplot** package.\n\n### 4.1 Basic plot\n\n*ggcorrmat()* not only visualise a correlation matrix but alos provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  tl.cex = 7,\n  title = \"Correlation Matrix\")+\n  theme(plot.title = element_text(size=13, hjust=0),\n        legend.background = element_rect(fill = \"#f3f1e9\"),\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        axis.text.x = element_text(angle=30, hjust=1, size= 7),\n        axis.text.y = element_text(size=7),\n        panel.grid = element_blank(),\n        plot.margin = margin(t = 15, r = 50, b = 15, l = 50, unit = \"pt\") )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\")+\n  theme(plot.title = element_text(size=13, hjust=0),\n        legend.background = element_rect(fill = \"#f3f1e9\"),\n        panel.background = element_rect(fill = \"#f3f1e9\"),\n        plot.background = element_rect(fill = \"#f3f1e9\",color = NA),\n        axis.text.x = element_text(angle=30, hjust=1, size= 7),\n        axis.text.y = element_text(size=7),\n        panel.grid = element_blank(),\n        plot.margin = margin(t = 15, r = 50, b = 15, l = 50, unit = \"pt\") )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\nThings to learn from the code chunk above:\n\n-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.\n\n-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to [`ggcorrplot::ggcorrplot`](http://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2) function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.\n:::\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n``` r\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n\n### 4.2 Building multiple plots\n\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in *ggcorrmat()* but in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\n**Things to learn from the code chunk above:**\n\n-   to build a facet plot, the only argument needed is `grouping.var`.\n\n-   Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which is already separately specified earlier.\n\n-   Likewise, `annotation.args` argument is calling [*plot annotation arguments*](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package.\n:::\n\n## 5 Visualising Correlation Matrix using corrplotPackage\n\nBefore we can plot a corrgram using *corrplot()*, we need to compute the correlation matrix of wine data frame.\n\nIn the code chunk below, [*cor()*](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/cor) of R Stats is used to compute the correlation matrix of wine data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\n```\n:::\n\n\n\nNext, [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\ncorrplot(wine.cor,bg= \"#f3f1e9\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\n**Notice that :**\n\n-   The default visual object used to plot the corrgram is circle.\n\n-   The default layout of the corrgram is a symmetric matrix.\n\n-   The default colour scheme is diverging blue-red: Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients.\n\n-   The intensity of the colour or also know as **saturation** is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.\n:::\n\n### 5.1 Working with visual geometrics\n\nIn **corrplot** package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the *method* argument as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\ncorrplot(wine.cor, \n         method = \"ellipse\",\n         bg = \"#f3f1e9\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### 5.2 Working with layout\n\n*corrplor()* supports three layout types, namely: “**full**”, “**upper**” or “**lower**”. The default is “full” which display full matrix. The default setting can be changed by using the *type* argument of *corrplot()*.\n\nOther layout design argument such as *tl.pos*, *tl.cex*, *tl.offset*, *cl.pos*, *cl.cex* and *cl.offset*, just to mention a few of them\n\n::: panel-tabset\n## \"lower\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\ncorrplot(wine.cor, \n         method = \"ellipse\",\n         order = \"hclust\",\n         type = \"lower\",\n         bg = \"#f3f1e9\",\n         tl.col='black',\n         outline = TRUE,\n         diag = TRUE) #outline of elipse = True\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## \"upper\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\ncorrplot(wine.cor, \n         method = \"ellipse\",\n         type = \"upper\",\n         bg = \"#f3f1e9\",\n         tl.col = 'grey20')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n:::\n\n### 5.3 Working with mixed layout\n\nWith **corrplot** package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the [*corrplot.mixed()*](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation style will be used.\n\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\",\n               bg = \"#f3f1e9\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note appearance=\"simple\"}\n**Notice that :**\n\n-   argument *lower* and *upper* are used to define the visualisation method used:\n\n    In this case:\n\n    -   ellipse is used to map the lower half of the corrgram\n\n    -   numerical matrix (i.e. number) is used to map the upper half of the corrgram.\n\n    -   The argument *tl.pos*, on the other, is used to specify the placement of the axis label.\n\n    -   The *diag* argument is used to specify the glyph on the principal diagonal of the corrgram.\n:::\n\n## 6 Combining corrgram with the significant test\n\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nWith corrplot package, we can use the *cor.mtest()* to compute the p-values and confidence interval for each pair of variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\npar(bg = \"#f3f1e9\")\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05,\n         bg = \"#f3f1e9\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n### 6.1 Reorder a corrgram\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the *order* argument of *corrplot()*. Currently, **corrplot** package support four sorting methods, they are:\n\n-   “**AOE**” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n\n-   “**FPC**” for the first principal component order.\n\n-   “**hclust**” for **hierarchical clustering order**, and “hclust.method” for the agglomeration method to be used.\n\n    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n-   “**alphabet**” for alphabetical order.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"grey30\",\n               bg = \"#f3f1e9\" )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n### 6.2 Reordering a correlation matrix using hclust\n\nIf using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(bg = \"#f3f1e9\")\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               tl.pos = \"lt\",\n               order=\"hclust\",\n               hclust.method = \"ward.D\",\n               addrect = 3,\n               tl.col = \"grey30\",\n               bg = \"#f3f1e9\" )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05_e_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n## 7 Reference\n\n-   Kam, T.S. (2025). [Visual Correlation Analysis](https://r4va.netlify.app/chap06 \"Visual Correlation Analysis\")\n",
    "supporting": [
      "Hands-on_Ex05_e_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}