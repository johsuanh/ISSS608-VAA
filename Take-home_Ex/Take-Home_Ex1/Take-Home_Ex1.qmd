---
title: "Take Home Exercise 1"
author: Johsuan Huang
date: "Febuary 1, 2025"
date-modified: "last-modified"
description: "Ship performance Analysis"
categories: []
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1 Setting the scene

## 1.1 Background

As a graphical editor at an international media company, we publish weekly content on digital platforms. This week's theme focuses on "**Ship Performance in** **Gulf of Guinea**."

Our target audience consists of general readers who are interested in the maritime sector and would like to gain insights into ship performance, including **Financial Performance**, **Operational Performance** and **Route Performance**.

## 1.2 Data

The data we used is from Kaggle. This dataset consists of 2,736 observations with 18 attributes.

[**The Ship Performance Dataset**](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset) is a synthetic collection of data including key operational metrics and attributes of various ship types in the Gulf of Guinea. This dataset aims to provide a platform for exploring ship performance trends, identifying patterns, and solving real-world maritime challenges through data-driven approaches.

# 2 Getting Started

## 2.1 Load packages

We load the following R packages using the `pacman::p_load()` function:

::: {.callout-note appearance="simple"}
**p_load()** function allow us to load required packages that are already installed or install it first and then load if not locally available.
:::

```{r}
pacman::p_load(tidyverse, patchwork,
               ggrepel, ggthemes, ggridges, 
               ggdist, ggiraph, plotly, DT,
               hrbrthemes, ggiraph,ggstatsplot,
               ggtext)
```

+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| **Library**                                                                                  | **Description**                                                                                                                         |
+==============================================================================================+=========================================================================================================================================+
| [**tidyverse**](https://www.tidyverse.org/)                                                  | A collection of core packages designed for data science.                                                                                |
+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [**patchwork**](https://patchwork.data-imaginist.com/)                                       | Prepare composite figure created using **ggplot2**                                                                                      |
+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [**ggthemes**](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/)       | Extra themes, geoms, and scales for ggplot2.                                                                                            |
+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [**ggridges**](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html) | A ggplot2 extension specially designed for plotting ridgeline plots                                                                     |
+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [**gganimate**](https://gganimate.com/)                                                      | An ggplot extension for creating animated statistical graphs.                                                                           |
+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [**ggdist**](https://mjskay.github.io/ggdist/)                                               | A ggplot2 extension spacially desgin for visualising distribution and uncertainty.                                                      |
+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [**plotly**](https://plotly.com/r/)                                                          | R library for plotting interactive statistical graphs.                                                                                  |
+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [**DT**](https://rstudio.github.io/DT/)                                                      | provides an R interface to the JavaScript library [**DataTables**](https://datatables.net/) that create interactive table on html page. |
+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+
| [**ggiraph**](https://davidgohel.github.io/ggiraph/)                                         | For making ‘ggplot’ graphics interactive.                                                                                               |
+----------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------+

## 2.2 Data Import, Overview and Pre-processing

::: panel-tabset
## Data Import

We use **`read_csv()`** of readr to import data and **`datatable()`** of DT to display it:

```{r}
ship <- read_csv("data/Ship_Performance_Dataset.csv")

```

```{r}
#| echo: false
DT::datatable(ship, class= "display",
              caption = "Table 1: Ship Performance Data") %>%
  formatStyle(
    columns = colnames(ship), 
    fontSize = '12px', 
    fontFamily = 'Helvetica', 
    lineHeight = '1.2'
  )
```

## Data Overview

### Check data structure

We use **`str()`** function of R to check the internal structure of the data frame:

```{r}
str(ship)
```

### Check data summary

The code chunk below uses R's **`summary()`** function to display statistical summaries of our data frame.

```{r}
summary(ship)
```

### Check Unique Values for Categorical Attribute

To analyze the categorical data in our summary, I'll examine its unique values using the **map_chr** function from the **purrr** package to iterate through the character vector:

```{r}
# define a function called get_unique_var:
get_unique_var <- function(column) {
  unique_vals <- unique(ship[[column]])
  unique_count <- length(unique_vals)
  paste("Column Name:", column,
         "| Unique Count:", unique_count,
         "| Unique Values:", paste(unique_vals, collapse = ", "))
}

# select specific columns
selected_var <- ship %>% select(Route_Type, Ship_Type, Engine_Type, Maintenance_Status, Weather_Condition)

# apply the function to each column and store the results
unique_var <- map_chr(names(selected_var), get_unique_var)

unique_var
```

## Metadata

Since the imported data types are not fully correct, we will handle them in the next tab "Data Preprocessing". The data contains 5 categorical attributes, 1 temporal attribute, 11 decimal attributes, and 1 integer attributes:

+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Attribute                   | Data type     | Description                                                                                                                                                                                                   |
+=============================+===============+===============================================================================================================================================================================================================+
| **Date**                    | *Date*        | Timestamp of the data entry from 2023/6/4 to 2024/6/30 (weekly data)                                                                                                                                          |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Ship_Type**               | *Categorical* | Type of ship (e.g., Tanker, Container Ship, Fish Carrier, Bulk Carrier).                                                                                                                                      |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Route_Type**              | *Categorical* | Shipping route type (e.g., Short-haul, Long-haul, Transoceanic).                                                                                                                                              |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Engine_Type**             | *Categorical* | Type of engine (e.g., Diesel, Heavy Fuel Oil).                                                                                                                                                                |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Maintenance_Status**      | *Categorical* | Maintenance condition of the ship (e.g., Fair, Critical, Good).                                                                                                                                               |
|                             |               |                                                                                                                                                                                                               |
|                             |               | -   Level: Good \> Fair \> Critical                                                                                                                                                                           |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Weather_Condition**       | *Categorical* | Prevailing weather conditions during voyages (e.g., Calm, Moderate, Rough)                                                                                                                                    |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Speed_Over_Ground_knots** | *Decimal*     | Average speed of the ship over water (in knots).                                                                                                                                                              |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Engine_Power_kW**         | *Decimal*     | Total weekly Engine power output (in kilowatts).                                                                                                                                                              |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Distance_Traveled_nm**    | *Decimal*     | Total weekly distance traveled by the ship (in nautical miles).                                                                                                                                               |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Draft_meters**            | *Decimal*     | It represents how deep the ship sits in the water and is a key measurement for navigation (in meters).                                                                                                        |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Cargo_Weight_tons**       | *Decimal*     | Total cargo weight per voyage (in tons)                                                                                                                                                                       |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Operational_Cost_USD**    | *Decimal*     | Total operational cost per voyage (in USD).                                                                                                                                                                   |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Revenue_per_Voyage_USD**  | *Decimal*     | Revenue generated per voyage (in USD).                                                                                                                                                                        |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Turnaround_Time_hours**   | *Decimal*     | Total time required to complete all activities necessary for a vessel to be ready for its next journey or task, including docking, unloading packages, refueling and other necessary maintainance (in hours). |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Efficiency_nm_per_kWh**   | *Decimal*     | Measureing how efficiently a vessel uses energy to travel in nautical miles per kilowatt-hour.                                                                                                                |
|                             |               |                                                                                                                                                                                                               |
|                             |               | -   A higher value means the vessel is more energy efficient                                                                                                                                                  |
|                             |               | -   1 nm ≈ 1.852 km                                                                                                                                                                                           |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Seasonal_Impact_Score**   | *Decimal*     | Measures how seasonal factors (e.g., monsoons, winter storms, ice conditions) impact vessel efficiency, turnaround time, or fuel consumption.                                                                 |
|                             |               |                                                                                                                                                                                                               |
|                             |               | -   A higher score indicates greater disruptions due to seasonal changes.                                                                                                                                     |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Weekly_Voyage_Count**     | *Integer*     | The number of voyages a vessel completes within a week.                                                                                                                                                       |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Average_Load_Percentage** | *Decimal*     | The average percentage of capacity utilized by a vessel, vehicle, or transportation system over a week. Average Load Percentage = Actual Cargo Weight / Maximum Capacity \* 100                               |
|                             |               |                                                                                                                                                                                                               |
|                             |               | -   A low percentage may indicate **inefficient routing or underutilized capacity**.                                                                                                                          |
+-----------------------------+---------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

## Data Pre-processing

### Check missing values

As part of data wrangling, we begin by checking for missing values and duplicate records:

```{r}
# check missing value 
any(is.na(ship))
```

Although there are no missing values, but from the observation tab, we can see there are "None"s appearing in the dataset. The result of the code below showing each of the categorical attribute containing 136 "None" values and the related 609 records.

```{r}
# check None value
cat_var <- c('Route_Type', 'Ship_Type', 'Engine_Type', 'Maintenance_Status', 'Weather_Condition')

#check "None" value in cat variables
none_counts <- ship %>%
  select(all_of(cat_var)) %>%
  summarise(across(everything(), ~ sum(. == "None")))
  
none_counts
```

```{r}
#| echo: false

records_with_none <- ship %>%
  filter(if_any(all_of(cat_var), ~ . == "None"))

DT::datatable(records_with_none, class= "display",
              caption = "Table 1: Ship Performance Data") %>%
  formatStyle(
    columns = colnames(ship), 
    fontSize = '12px', 
    fontFamily = 'Helvetica', 
    lineHeight = '1.2'
  )
```

### Check duplicate records

-   **`distinct()`** function of dplyr package is used to identify the unique values within categorical attributes. The dataset contains 2,736 observations, matching the raw data count, which confirms there are no duplicate records.

```{r}
# check duplicate records
distinct(ship)
```

### Convert data type

We then convert the data type for 5 categorical attributes from \<chr\> to \<fctr\> and 1 integer attribute from \<dbl\> to \<int\> by using **`mutate()`** of dplyr package.

```{r}
# mutate data type
ship <- ship %>% 
  mutate_if(is.character, as.factor) %>%
  mutate(Weekly_Voyage_Count = as.integer(Weekly_Voyage_Count))

#check the revised data type
head(ship)

```
:::

# 3 Data Exploration

Before variable selection, let's visualize all numeric and categorical data, and see if there's any insight we can get:

## 3.1 Numeric Variables

The numeric variables display **multi-modal** or **uniform** **distributions** (particularly for operational cost and revenue) rather than normal distributions. **This pattern likely results from** **different ship types and route types creating distinct peaks** in the distribution. Since this dataset contains weekly ship data, with ships making varying numbers of voyages, we should normalize all numeric variables to a per-voyage basis instead of using total amounts like "Distance_Traveled_nm".

In addtion, ***Operational_Cost_USD*** **and *Revenue_per_Voyage_USD* have notably different scales** comparing to other variables, requiring adjustment.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
# select numeric variables
ship_numeric <- ship %>% select_if(is.numeric)

# unpivot the data from wide to long format
ship_long <- ship_numeric %>% 
  pivot_longer(cols = everything(), # select all num variables
               names_to = "variable", 
               values_to = "value")

# Plot histograms for all numeric variables with facets
ggplot(ship_long, aes(x = value)) +
  geom_histogram(bins = 30, fill = "grey70", color = "grey30") +
  facet_wrap(~ variable, scales = "free") +
  labs(title = "Histograms of All Numeric Variables",
       x = "", y = "Frequency") +
  theme_minimal()+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        panel.grid = element_blank())
```

</details>
:::

```{r}
#| echo: false

# select numeric variables
ship_numeric <- ship %>% select_if(is.numeric)

# unpivot the data from wide to long format
ship_long <- ship_numeric %>% 
  pivot_longer(cols = everything(), # select all num variables
               names_to = "variable", 
               values_to = "value")

# Plot histograms for all numeric variables with facets
ggplot(ship_long, aes(x = value)) +
  geom_histogram(bins = 30, fill = "grey70", color = "grey30") +
  facet_wrap(~ variable, scales = "free") +
  labs(title = "Histograms of All Numeric Variables",
       x = "", y = "Frequency") +
  theme_minimal()+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        panel.grid = element_blank(),
        )
```

## 3.2 Categorical Variables

To understand the marine sector, we need to research and understand the characteristics of different ship types, engine types, and route types for better analysis:

### 3.2.1 Ship Type

-   **Bulk Carrier**: Carry dry raw mateials like coal, grain and iron ore. The cargo normally holds with hatch covers with large quantity, following long-haul trade routes

-   **Container Ship**: Carry standardized constainers, designed with flat deck with container slots and securing mechanisms. It's suitable for efficient global trade.

-   **Fish Carrier**: It is used to ship live or frozen fish from fishing vessels to processing facilities or markets, equipped with water tanks (for live fish) or refrigerated holds (for frozen fish)

-   **Tanker**: Carry liquid cargo like crude oil and petroleum products, equipped with large cylindrical tanks, reinforced hulls, following strict environmental regulations.

### 3.2.2 Route Type

Based on ship distance: **Transoceanic Routes\>Long-Haul Routes\>Short-Haul Routes\>Coastal Routes**

-   **Coastal Routes**: Ships operate **close to the coast** or within a specific region, often moving between ports in the same country or nearby nations. Normally focus on frequent trips rather than high cargo volume.

-   **Short-Haul Routes:** Routes that connect **medium-distance** destinations (typically within a continent or between neighboring regions). Medium-sized vessels for balanced capacity and speed.

-   **Long-Haul Routes:** Ships travel **between continents(international trade)**, connecting major industrial and commercial centers. Larger ships designed for fuel efficiency and maximum cargo capacity.

-   **Transoceanic Routes:** Ships cross **entire oceans(Global Trade)**, linking distant global markets (e.g., Asia to Europe, North America to Australia). **Largest** ships with ultra-long-range fuel capacity.

### 3.2.3 Engine Type

**Fuel efficeincy: Diesel \> HFO \> Stream Turbine**

-   **Heavy Fuel Oil (HFO) Engines**: These engines use **Heavy Fuel Oil (HFO)**, which is a low-cost but highly polluting fuel, common **in large commercial ships and long-haul or** **Transoceanic Routes** due to cost efficiency.

-   **Steam Turbine Engines**: These engines uses **steam to drive a turbine**, typically powered by **boilers burning HFO or LNG.** Ships with these engines supposed to be aged, for its a technology old goods. It is less fuel-efficient compared to diesel engines.

-   Diesel Engines: It is the **most common** engine type today, which is **more fuel-efficient** and meets modern environmental regulations.

### 3.2.4 Visualization

As for categorical variables, the distributions are also quite even, except for:

-   The number of ship with **diesel engines** is slightly higher than others

-   The count of **long-haul** slightly higher

-   The count of "rough" weather condition is slightly lower than others

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
# select only char variables
ship_factors <- ship %>% select_if(is.factor)  

# unpivot the data from wide to long format
ship_long_factors <- ship_factors %>% 
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "value")


# plot bar charts for all categorical variables
ggplot(ship_long_factors, aes(x = value, fill = variable)) +
  geom_bar() +
  facet_wrap(~ variable, scales = "free") +  # Facet by variable name
  scale_fill_brewer(palette = "Set2") +
  labs(title = "Bar Plots of All Categorical Variables",
       x = "", y = "Count") +
  theme_minimal() +
    theme(plot.title = element_text(size=13, hjust=0),
        legend.background = element_rect(fill = "#f3f1e9"),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.position = "none",
        axis.text.x = element_text(angle=20, hjust=1, size= 7),
        axis.text.y = element_text(size=6),
        panel.grid = element_blank())
```

</details>
:::

```{r}
#| echo: false


# select only char variables
ship_factors <- ship %>% select_if(is.factor)  

# unpivot the data from wide to long format
ship_long_factors <- ship_factors %>% 
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "value")

# customized palette
my_palette <- c("#D989AE99", "#96C6D999", "#F2CD8899", "#D9725B99", "#468C6C99", "grey60")


# plot bar charts for all categorical variables
ggplot(ship_long_factors, aes(x = value, fill = variable)) +
  geom_bar() +
  facet_wrap(~ variable, scales = "free") +  # Facet by variable name
  scale_fill_manual(values = my_palette) +
  labs(title = "Bar Plots of All Categorical Variables",
       x = "", y = "Count") +
  theme_minimal() +
    theme(plot.title = element_text(size=13, hjust=0),
        legend.background = element_rect(fill = "#f3f1e9"),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.position = "none",
        axis.text.x = element_text(angle=20, hjust=1, size= 7),
        axis.text.y = element_text(size=6),
        panel.grid = element_blank())


```

# 4 Data Wrangling

After reviewing all variables, I identified several that require derivation, transformation, or removal:

## 4.1 Transform Data Unit

-   **Operational_Cost_USD** & **Revenue_per_Voyage_USD**: Both variables are in USD, we should divide them by 1,000 to make them more comparable

```{r}

# divide Operational cost and revenue by 1000

ship_cleaned <- ship %>%
  mutate(Cost_per_Voyage_k = Operational_Cost_USD/1000)

ship_cleaned <- ship_cleaned %>%
  mutate(Revenue_per_Voyage_k = Revenue_per_Voyage_USD/1000)


```

## 4.2 Derive New Variables

-   **Date**: Since weekly data is too granular for our analysis, "**New_Date**" variable is created to aggregate data monthly and "**Season**" variables are also created from the Date field.

    ```{r}
    # create New_date (monthly)
    ship_cleaned <- ship_cleaned %>%
      mutate(New_Date = as.Date(paste(format(Date, "%Y"),format(Date, "%m"), "01", sep = "-"),
                                format = "%Y-%m-%d"))
    # create season var
    ship_cleaned <- ship_cleaned %>%
      mutate(Quarter = case_when(
        month(Date) %in% 1:3 ~ "Q1",
        month(Date) %in% 4:6 ~ "Q2",
        month(Date) %in% 7:9 ~ "Q3",
        month(Date) %in% 10:12 ~ "Q4"
      ))
    ```

-   **Profit and Net Margin Per Voyage:** Profit and Net margin percentage per voyage will be calculated to evaluate ship financial performance.

    ```{r}
    # create margin per voyage
    ship_cleaned <- ship_cleaned %>%
      mutate(Margin_per_Voyage = ((Revenue_per_Voyage_k - Cost_per_Voyage_k) / Revenue_per_Voyage_k) * 100)

    # create profit per voyage
    ship_cleaned <- ship_cleaned %>%
      mutate(Profit_per_Voyage = Revenue_per_Voyage_k - Cost_per_Voyage_k)


    ```

-   **Distance travel & Cost per Nautical Mile** :According to Kaggle, "**Distance_Traveled_nm**" represent total engine power and distance traveled by the ship. These values will be divided by weekly_voyage_count. In addition, cost per Nautical Mile will be derived for performance evaluation.

    ```{r}
    # create distance travel per voyage
    ship_cleaned <- ship_cleaned %>%
      mutate(distance_travel_per_V = Distance_Traveled_nm / Weekly_Voyage_Count)

    # create cost per nm
    ship_cleaned <- ship_cleaned %>%
      mutate(Cost_per_nm = Cost_per_Voyage_k / distance_travel_per_V)



    ```

-   **Maximum Capacity of Ships and Classification:** The original dataset lacks ship size information. This is a significant factor for shipment capacity and directly affects potential revenue and operational cost per voyage.

    ```{r}
    # create Maxiumn Capacity of ship
    ship_cleaned <- ship_cleaned %>%
      mutate(Max_capacity = Cargo_Weight_tons / Average_Load_Percentage*100)

    # categorized ship into diff size based on max capacity
    # min = 
    ship_cleaned$Ship_Size <- cut(ship_cleaned$Max_capacity, 
                        breaks = c(0, 1300, 2000, Inf), 
                        labels = c("Small", "Medium", "Large"), 
                        right = FALSE)
    # create interaction variables - ship type * ship size
    ship_cleaned <- ship_cleaned %>%
      mutate(
        type_size = factor(interaction(Ship_Type,Ship_Size, sep = "_")))
    ```

## 4.3 Drop Variables and None Values

Based on the previous univariate and correlation analysis, we will retain only the relevant variables for further analysis. Though missing values in Categorical data didn't affect much, but it's quite annoying when visualization, since all catgorical data include missing values

```{r}
# These variables are dropped
ship_cleaned <- ship_cleaned %>% select(-c(
     'Operational_Cost_USD','Revenue_per_Voyage_USD',
     'Draft_meters','Speed_Over_Ground_knots','Engine_Power_kW',
     'Distance_Traveled_nm','Date','Draft_meters',
     'Speed_Over_Ground_knots'))

# filter all the cat data is not "None"

cat_var <- c('Route_Type', 'Ship_Type', 'Engine_Type', 'Maintenance_Status', 'Weather_Condition')

ship_cleaned <- ship_cleaned %>%
  filter(if_all(all_of(cat_var), ~ . != "None"))

```

## 4.4 Check Correlation Matrix

We then use `ggcorrmat`examine the correlation matrix of numerical variables. Based on the results below, 13 pairs of variables show significant correlations.

Among them, profit per voyage has a strong positive correlation with revenue (r = 0.73) and margin (r=0.88) per voyage , indicating that higher revenues generally lead to higher profits, though other factors like costs (r=-0.44) also influence this relationship. Lastly, max capacity and cargo weight show an almost perfect correlation (r = 0.92), indicating that ships generally operate close to their full capacity.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
ship_cleaned_num <- ship_cleaned %>% select_if(is.numeric) 

ggcorrmat(
  data = ship_cleaned_num, 
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 8),
  title    = "Correlogram for ship dataset",
  subtitle = "None of pairs is significant at p < 0.05")+
  theme(plot.title = element_text(size=13, hjust=0),
        legend.background = element_rect(fill = "#f3f1e9"),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        axis.text.x = element_text(angle=30, hjust=1, size= 7),
        axis.text.y = element_text(size=7),
        panel.grid = element_blank())
```

</details>
:::

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 12
#| out-extra: "style='max-width:100%; display: block;'"
#| out-width: 100%

ship_cleaned_num <- ship_cleaned %>% select_if(is.numeric) 

ggcorrmat(
  data = ship_cleaned_num,
  colors = c(  "#D989AE","white","#F2CD88ß"),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 8),
  title    = "Correlogram for ship dataset",
  subtitle = "None of pairs is significant at p < 0.05")+
  theme(plot.title = element_text(size=13, hjust=0),
        legend.background = element_rect(fill = "#f3f1e9"),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        axis.text.x = element_text(angle=30, hjust=1, size= 7),
        axis.text.y = element_text(size=7),
        panel.grid = element_blank(),
        plot.margin = margin(t = 15, r = 50, b = 15, l = 50, unit = "pt") )
  
```

## 4.5 Check Variable Distribution and Summary After Data Wrangling

After transformation, Profit_per_Voyage shows a normal distribution. However, Margin_per_Voyage displays extreme values—ranging from -842.56% to 98.73%, with a median of 50.56%—indicating substantial variation in profit margins across ships.

:::: panel-tabset
## Numerical Data Distribution

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
# select numeric variables
ship_cleaned_num<- ship_cleaned %>% select_if(is.numeric)

# unpivot the data from wide to long format
ship_long <- ship_cleaned_num %>% 
  pivot_longer(cols = everything(), # select all num variables
               names_to = "variable", 
               values_to = "value")

# Plot histograms for all numeric variables with facets
ggplot(ship_long, aes(x = value)) +
  geom_histogram(bins = 30, fill = "grey70", color = "grey30") +
  facet_wrap(~ variable, scales = "free") +
  labs(title = "Histograms of All Numeric Variables",
       x = "", y = "Frequency") +
  theme_minimal()+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        panel.grid = element_blank(),
        )
```

</details>
:::

```{r}
#| echo: false

# select numeric variables
ship_cleaned_num<- ship_cleaned %>% select_if(is.numeric)

# unpivot the data from wide to long format
ship_long <- ship_cleaned_num %>% 
  pivot_longer(cols = everything(), # select all num variables
               names_to = "variable", 
               values_to = "value")

# Plot histograms for all numeric variables with facets
ggplot(ship_long, aes(x = value)) +
  geom_histogram(bins = 30, fill = "grey70", color = "grey30") +
  facet_wrap(~ variable, scales = "free") +
  labs(title = "Histograms of All Numeric Variables",
       x = "", y = "Frequency") +
  theme_minimal()+
  theme(panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        panel.grid = element_blank(),
        )


```

## Categorical Data Distribution

```{r}
ship_factors <- ship_cleaned %>% select_if(is.factor)  

# unpivot the data from wide to long format
ship_long_factors <- ship_factors %>% 
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "value")


# plot bar charts for all categorical variables
ggplot(ship_long_factors, aes(x = value, fill = variable)) +
  geom_bar() +
  facet_wrap(~ variable, scales = "free") +  # Facet by variable name
  scale_fill_brewer(palette = "Set2") +
  labs(title = "Bar Plots of All Categorical Variables",
       x = "", y = "Count") +
  theme_minimal() +
    theme(plot.title = element_text(size=13, hjust=0),
        legend.background = element_rect(fill = "#f3f1e9"),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9",color = NA),
        legend.position = "none",
        axis.text.x = element_text(angle=20, hjust=1, size= 7),
        axis.text.y = element_text(size=6),
        panel.grid = element_blank())
```

## New Summary

```{r}
summary(ship_cleaned)
```
::::

# 5 Exploratory Data Analysis

## 5.1 **Financial Performance:** Average Revenue and Net Margin Across Ship Types

The interactive plot below showcases average revenue and net margin trends for different ship types in the Gulf of Guinea:

-   **Bulk Carrier**: Displays the highest fluctuations, with peaks in May and August, a decline in November, and the lowest performance in January. Its profit margin drops to negative in November and January, with an average margin of 16.05% and revenue of 523.06K.

-   **Fish Carrier**: Stands out for its consistent performance throughout the year, showing a small dip in August due to reduced demand. It boasts the highest profit margin at 24.26% and revenue of 534.89K.

-   **Container Ship**: Experiences peaks in November and January, coinciding with high-demand periods like Black Friday, Christmas, and Chinese New Year, but has negative margin in July, December 2023 and May 2024. Profit margin is 21.27% with revenue of 524.55K.

-   **Tanker**: Shows no clear peak season, though revenue fluctuates, with lower points in September, January, and May. Its profit margin remains stable at 23.87%, with revenue of 511.48K.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
# calculate Monthly average revenue, cost, and profit margin per Ship_Type over time
ship_avg <- ship_cleaned %>%
  group_by(New_Date, Ship_Type) %>%
  summarize(
    avg_revenue = mean(Revenue_per_Voyage_k, na.rm = TRUE),
    avg_margin = mean(Margin_per_Voyage, na.rm = TRUE))

# calculate all ship's Monthly average revenue, cost, and profit margin over time
avg <- ship_cleaned %>%
  group_by(New_Date) %>%
  summarize(
    avg_revenue = mean(Revenue_per_Voyage_k, na.rm = TRUE),
    avg_margin = mean(Margin_per_Voyage, na.rm = TRUE))

# compute yearly average per Ship_Type for tooltips
yearly_avg <- ship_cleaned %>%
  group_by(Ship_Type) %>%
  summarize(
    avg_revenue_yearly = mean(Revenue_per_Voyage_k, na.rm = TRUE),
    avg_margin_yearly = mean(Margin_per_Voyage, na.rm = TRUE)
  )

ship_avg <- ship_avg %>%
  left_join(yearly_avg, by = "Ship_Type")


# plot avg rev by ship type
p1 <- ggplot() + 
  geom_line_interactive(data = ship_avg, 
                        aes(x = New_Date, 
                            y = avg_revenue,
                            color = Ship_Type, 
                            tooltip = round(avg_revenue_yearly,2),
                            data_id = Ship_Type), size = 1) +
  geom_line(data = avg, 
            aes(x = New_Date, y = avg_revenue), 
            size = 0.4, 
            linetype = "dashed", 
            color='grey40') +
  # Add label "Mean" 
  annotate("text", x = as.Date("2024-06-03"), y = 505, label = "Mean\n523K", 
           color = "grey40", size = 2, hjust = 0) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b\n%Y") +
  scale_color_manual(values = my_palette) +
  guides(
    fill = guide_legend(order = 1),
    linetype = guide_legend(title = "Line Type", order = 2)  # Only for the reference line
  ) +
  labs(x = "",
       y = "Revenue per Voyage ($000s)",
       title = "Exploring Average Revenue and Net Margin Across Ship Types",
       color = "Legend") +
  theme_classic() +
  theme(plot.title = element_text(size = 11, hjust = 0.5, face = 'bold'),
        axis.title.y = element_text(size = 7),
        axis.text = element_text(size = 6),
        legend.position = 'top',
        legend.background = element_rect(fill = "#f3f1e9"),
        legend.key.size = unit(0.2, "cm"),
        legend.title = element_text(size = 9),
        legend.text = element_text(size = 8),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9", color = NA))

# plot avg profit margin by ship type

p2 <- ggplot() + 
  geom_line_interactive(data = ship_avg, 
                        aes(x = New_Date, y = avg_margin,
                            color = Ship_Type,
                            tooltip = round(avg_margin_yearly,2),
                            data_id = Ship_Type), size = 1) +
  geom_line(data = avg, aes(x = New_Date, y = avg_margin),
            size = 0.4, linetype = "dashed", color='grey40') + 
  annotate("text", x = as.Date("2024-06-03"), y = 14, label = "Mean\n21.3%", 
           color = "grey40", size = 2, hjust = 0) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b\n%Y") +
  scale_color_manual(values = my_palette) +
  guides(
    fill = guide_legend(order = 1),
    linetype = guide_legend(title = "Line Type", order = 2)  # Only for the reference line
  ) +
  labs(x = "",
       y = "Profit Margin %",
       color = "Legend") +
  theme_classic() +
  theme(
        axis.title.y = element_text(size = 7),
        axis.text = element_text(size = 6),
        legend.position = 'none',
        legend.justification = c(0, 1),
        legend.background = element_rect(fill = "#f3f1e9"),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9", color = NA)
  )

# Combine the two plots
patch <- p1 / p2 & 
  theme(
    plot.margin = margin(0, 0, 0, 0),  # Removes extra space around the combined plots
    plot.background = element_rect(fill = "#f3f1e9", color = NA)
  )

# Generate the interactive graph
girafe(
  code = print(patch), 
  width_svg = 6,
  height_svg = 4,
  options = list(
    opts_hover(css = "stroke-width:3px; opacity: 1;"),
    opts_hover_inv(css = "opacity: 0.2;")
  ))
```

</details>
:::

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 12
#| out-extra: "style='max-width:100%; display: block;'"
#| out-width: 100%

# calculate Monthly average revenue, cost, and profit margin per Ship_Type over time
ship_avg <- ship_cleaned %>%
  group_by(New_Date, Ship_Type) %>%
  summarize(
    avg_revenue = mean(Revenue_per_Voyage_k, na.rm = TRUE),
    avg_margin = mean(Margin_per_Voyage, na.rm = TRUE))

# calculate all ship's Monthly average revenue, cost, and profit margin over time
avg <- ship_cleaned %>%
  group_by(New_Date) %>%
  summarize(
    avg_revenue = mean(Revenue_per_Voyage_k, na.rm = TRUE),
    avg_margin = mean(Margin_per_Voyage, na.rm = TRUE))

# compute yearly average per Ship_Type for tooltips
yearly_avg <- ship_cleaned %>%
  group_by(Ship_Type) %>%
  summarize(
    avg_revenue_yearly = mean(Revenue_per_Voyage_k, na.rm = TRUE),
    avg_margin_yearly = mean(Margin_per_Voyage, na.rm = TRUE)
  )

ship_avg <- ship_avg %>%
  left_join(yearly_avg, by = "Ship_Type")


# plot avg rev by ship type
p1 <- ggplot() + 
  geom_line_interactive(data = ship_avg, 
                        aes(x = New_Date, 
                            y = avg_revenue,
                            color = Ship_Type, 
                            tooltip = round(avg_revenue_yearly,2),
                            data_id = Ship_Type), size = 0.8) +
  geom_line(data = avg, 
            aes(x = New_Date, y = avg_revenue), 
            size = 0.4, 
            linetype = "dashed", 
            color='grey40') +
  # Add label "Mean" 
  annotate("text", x = as.Date("2024-06-03"), y = 505, label = "Mean\n523K", 
           color = "grey40", size = 2, hjust = 0) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b\n%Y") +
  scale_color_manual(values = my_palette) +
  guides(
    fill = guide_legend(order = 1),
    linetype = guide_legend(title = "Line Type", order = 2)  # Only for the reference line
  ) +
  labs(x = "",
       y = "Revenue per Voyage ($000s)",
       title = "Exploring Average Revenue and Net Margin Across Ship Types",
       color = "Legend") +
  theme_classic() +
  theme(plot.title = element_text(size = 11, hjust = 0.5, face = 'bold'),
        axis.title.y = element_text(size = 7),
        axis.text = element_text(size = 6),
        legend.position = 'top',
        legend.background = element_rect(fill = "#f3f1e9"),
        legend.key.size = unit(0.2, "cm"),
        legend.title = element_text(size = 9),
        legend.text = element_text(size = 8),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9", color = NA))

# plot avg profit margin by ship type

p2 <- ggplot() + 
  geom_line_interactive(data = ship_avg, 
                        aes(x = New_Date, y = avg_margin,
                            color = Ship_Type,
                            tooltip = round(avg_margin_yearly,2),
                            data_id = Ship_Type), size = 0.8) +
  geom_line(data = avg, aes(x = New_Date, y = avg_margin),
            size = 0.4, linetype = "dashed", color='grey40') + 
  annotate("text", x = as.Date("2024-06-03"), y = 14, label = "Mean\n21.3%", 
           color = "grey40", size = 2, hjust = 0) +
  scale_x_date(date_breaks = "1 month", date_labels = "%b\n%Y") +
  scale_color_manual(values = my_palette) +
  guides(
    fill = guide_legend(order = 1),
    linetype = guide_legend(title = "Line Type", order = 2)  # Only for the reference line
  ) +
  labs(x = "",
       y = "Profit Margin %",
       color = "Legend") +
  theme_classic() +
  theme(
        axis.title.y = element_text(size = 7),
        axis.text = element_text(size = 6),
        legend.position = 'none',
        legend.justification = c(0, 1),
        legend.background = element_rect(fill = "#f3f1e9"),
        panel.background = element_rect(fill = "#f3f1e9"),
        plot.background = element_rect(fill = "#f3f1e9", color = NA)
  )

# Combine the two plots
patch <- p1 / p2 & 
  theme(
    plot.margin = margin(0, 0, 0, 0),  # Removes extra space around the combined plots
    plot.background = element_rect(fill = "#f3f1e9", color = NA)
  )

# Generate the interactive graph
girafe(
  code = print(patch), 
  width_svg = 6,
  height_svg = 4,
  options = list(
    opts_hover(css = "stroke-width:2px; opacity: 1;"),
    opts_hover_inv(css = "opacity: 0.2;")
  ))
```

## 5.2 **Financial Performance:** Seasonal Profit Trends by Ship Type

Based on the previous **Plot 5.1**, we analyze operational profit by ship type. The "Average Load Percentage" tab suggests that lower profits may result from reduced load percentages, leading to decreased revenue and higher operational costs.

The two plots show:

-   **Tanker**: Revenue dips in September(Q3), January(Q1), and May(Q2) are linked to large tankers operating below the quarterly medium load percentage of 74.3%–76.2%, which reduces overall profit.

-   **Bulk Carrier**: In January (Q1) and November (Q4), both medium and large bulk carriers show lower loading rates, likely correlating with decreased profitability.

-   **Container Ship**: Although Q4 is a typical busy season for container ships, the second plot shows large container ships have low average loading rate compared to other ship sizes, likely contributing to the revenue and margin dip in December (as seen in **Plot 5.1**)

::::: panel-tabset
## Operational Profit

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
# calculate average profit per quarter
quarter_avg <- ship_cleaned %>%
  group_by(Quarter) %>%
  summarise(avg_profit = mean(Profit_per_Voyage, na.rm = TRUE))

quarter_median <- ship_cleaned %>%
  group_by(Quarter) %>%
  summarise(median_profit = median(Profit_per_Voyage, na.rm = TRUE))

# Create a dataframe for line reference with linetype mapping
line_data <- bind_rows(
  quarter_avg %>% mutate(linetype = "Mean"),
  quarter_median %>% mutate(linetype = "Median")
)

ggplot(ship_cleaned, aes(x = Profit_per_Voyage, 
                              y = interaction(Ship_Size,Ship_Type),
                              fill = Ship_Type)) + 
  geom_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = 4,
                      alpha = 0.6,
                      scale = 0.8) +
  geom_boxplot(outlier.shape = 16, 
               outlier.colour = "black",  
               outlier.size = 0.5,
               width = 0.2, 
               position = position_dodge(width = 0.7)) +
  geom_vline(data = line_data, 
             aes(xintercept = median_profit, linetype = linetype), 
             color = "white", size = 0.4)+
  scale_fill_manual(values = my_palette) +
  scale_linetype_manual(name = "Reference", values = c("Median" = "dashed")) +
  guides(
    fill = guide_legend(order = 1),
    linetype = guide_legend(order = 2) # Adds linetype to the legend
  ) +
  # set facet title order
  facet_wrap(~ factor(Quarter, levels = c("Q1", "Q2", "Q3", "Q4")), ncol = 4) +
  theme_classic() +  
  labs(title = "Seasonal Profit Trends by Ship Type: A Closer Look",
       x = "Operational Profit ('000 USD)", 
       y = "Route, Engine & Ship Type") +
  theme(
    axis.text.y = element_text(size = 6), 
    axis.text.x = element_text(size = 6),  
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    strip.text = element_text(size = 7, face = "bold"),  # Facet title size
    legend.position = "top",
    legend.title = element_text(size = 8),
    legend.key.size = unit(0.3, "cm"),
    legend.text = element_text(size = 6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.background = element_rect(fill = "#f3f1e9", color = NA),
    plot.title = element_text(size = 15,hjust = 0.5,face='bold'),
    plot.margin = margin(10, 50, 10 ,20), 
    panel.spacing = unit(1, "lines"),
    strip.placement = "outside",  # Places strip above the panel
    strip.switch.pad.wrap = unit(1, "cm") 
  )
```

</details>
:::

```{r}
#| echo: false

# calculate average profit per quarter
quarter_avg <- ship_cleaned %>%
  group_by(Quarter) %>%
  summarise(avg_profit = mean(Profit_per_Voyage, na.rm = TRUE))

quarter_median <- ship_cleaned %>%
  group_by(Quarter) %>%
  summarise(median_profit = median(Profit_per_Voyage, na.rm = TRUE))

# Create a dataframe for line reference with linetype mapping
line_data <- bind_rows(
  quarter_avg %>% mutate(linetype = "Mean"),
  quarter_median %>% mutate(linetype = "Median")
)

ggplot(ship_cleaned, aes(x = Profit_per_Voyage, 
                              y = interaction(Ship_Size,Ship_Type),
                              fill = Ship_Type)) + 
  geom_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = 4,
                      alpha = 0.6,
                      scale = 0.8) +
  geom_boxplot(outlier.shape = 16, 
               outlier.colour = "black",  
               outlier.size = 0.5,
               width = 0.2, 
               position = position_dodge(width = 0.7)) +
  geom_vline(data = line_data, 
             aes(xintercept = median_profit, linetype = linetype), 
             color = "white", size = 0.4)+
  scale_fill_manual(values = my_palette) +
  scale_linetype_manual(name = "Reference", values = c("Median" = "dashed")) +
  guides(
    fill = guide_legend(order = 1),
    linetype = guide_legend(order = 2) # Adds linetype to the legend
  ) +
  # set facet title order
  facet_wrap(~ factor(Quarter, levels = c("Q1", "Q2", "Q3", "Q4")), ncol = 4) +
  theme_classic() +  
  labs(title = "Seasonal Profit Trends by Ship Type: A Closer Look",
       x = "Operational Profit ('000 USD)", 
       y = "Route, Engine & Ship Type") +
  theme(
    axis.text.y = element_text(size = 6), 
    axis.text.x = element_text(size = 6),  
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    strip.text = element_text(size = 7, face = "bold"),  # Facet title size
    legend.position = "top",
    legend.title = element_text(size = 8),
    legend.key.size = unit(0.3, "cm"),
    legend.text = element_text(size = 6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.background = element_rect(fill = "#f3f1e9", color = NA),
    plot.title = element_text(size = 15,hjust = 0.5,face='bold'),
    plot.margin = margin(10, 50, 10 ,20), 
    panel.spacing = unit(1, "lines"),
    strip.placement = "outside",  # Places strip above the panel
    strip.switch.pad.wrap = unit(1, "cm") 
  )
```

## Average Load Percentage

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
# calculate average profit per quarter
quarter_avg <- ship_cleaned %>%
  group_by(Quarter) %>%
  summarise(avg_profit = mean(Average_Load_Percentage, na.rm = TRUE))



ggplot(ship_cleaned, aes(x = Average_Load_Percentage, 
                              y = interaction(Ship_Size,Ship_Type),
                              fill = Ship_Type)) + 
  geom_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = 4,
                      alpha = 0.6,
                      scale = 0.8) +
  geom_boxplot(outlier.shape = 16, 
               outlier.colour = "black",  
               outlier.size = 0.5,
               width = 0.2, 
               position = position_dodge(width = 0.7)) +  
  scale_fill_manual(values = my_palette) +
  # set facet title order
  facet_wrap(~ factor(Quarter, levels = c("Q1", "Q2", "Q3", "Q4")), ncol = 4) +
  theme_classic() +  
  labs(title = "Lower Loading Percentage may be the culprit for lower Revenue?",
       x = "Average Load Percentage (%)", 
       y = "Route, Engine & Ship Type") +
  theme(
    axis.text.y = element_text(size = 6), 
    axis.text.x = element_text(size = 6),  
    axis.title.x = element_text(size = 9),
    axis.title.y = element_text(size = 9),
    strip.text = element_text(size = 7, face = "bold"),  # Facet title size
    legend.position = "top",
    legend.title = element_text(size = 8),
    legend.key.size = unit(0.3, "cm"),
    legend.text = element_text(size = 6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.background = element_rect(fill = "#f3f1e9", color = NA),
    plot.title = element_text(size = 15,hjust = 0.5,face='bold'),
    plot.margin = margin(10, 50, 10 ,20), 
    panel.spacing = unit(1, "lines"),
    strip.placement = "outside",  # Places strip above the panel
    strip.switch.pad.wrap = unit(1, "cm") 
  )+
  geom_vline(data = quarter_avg, 
             aes(xintercept = avg_profit), 
             color = "white", linetype = "dashed", size = 0.4)
```

</details>
:::

```{r}
#| echo: false

# calculate average profit per quarter
quarter_median <- ship_cleaned %>%
  group_by(Quarter) %>%
  summarise(median_lp = median(Average_Load_Percentage, na.rm = TRUE))

# Create a dataframe for line reference with linetype mapping
line_data <- bind_rows(
  quarter_avg %>% mutate(linetype = "Mean"),
  quarter_median %>% mutate(linetype = "Median")
)

ggplot(ship_cleaned, aes(x = Average_Load_Percentage, 
                              y = interaction(Ship_Size,Ship_Type),
                              fill = Ship_Type)) + 
  geom_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = 4,
                      alpha = 0.6,
                      scale = 0.8) +
  geom_boxplot(outlier.shape = 16, 
               outlier.colour = "black",  
               outlier.size = 0.5,
               width = 0.2, 
               position = position_dodge(width = 0.7)) + 
  geom_vline(data = line_data, 
             aes(xintercept = median_lp, linetype = linetype), 
             color = "white", size = 0.4)+
  scale_fill_manual(values = my_palette) +
  scale_linetype_manual(name = "Reference", values = c("Median" = "dashed")) +
  guides(
    fill = guide_legend(order = 1),
    linetype = guide_legend(order = 2) # Adds linetype to the legend
  ) +
  scale_fill_manual(values = my_palette) +
  # set facet title order
  facet_wrap(~ factor(Quarter, levels = c("Q1", "Q2", "Q3", "Q4")), ncol = 4) +
  theme_classic() +  
  labs(title = "Could a lower loading percentage be contributing to decreased revenue?",
       subtitle = "",
       x = "Average Load Percentage (%)", 
       y = "Route, Engine & Ship Type") +
  theme(
    axis.text.y = element_text(size = 6), 
    axis.text.x = element_text(size = 6),  
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    strip.text = element_text(size = 7, face = "bold"),  # Facet title size
    legend.position = "top",
    legend.title = element_text(size = 8),
    legend.key.size = unit(0.3, "cm"),
    legend.text = element_text(size = 6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.background = element_rect(fill = "#f3f1e9", color = NA),
    plot.title = element_text(size = 13,hjust = 0.5,face='bold'),
    plot.margin = margin(10, 50, 10 ,20), 
    panel.spacing = unit(1, "lines"),
    strip.placement = "outside",  # Places strip above the panel
    strip.switch.pad.wrap = unit(1, "cm") 
  )
```
:::::

### 5.2.1 Correlation Test 

However, the correlation between profit and average load percentage is **0.03**, with a **p-value of 0.097**, indicating a weak and statistically insignificant relationship. This suggests that while load percentage may influence profit, other operational factors likely play a more substantial role.

```{r}
cor.test(ship_cleaned$Profit_per_Voyage, ship_cleaned$Average_Load_Percentage)
```

## 5.3 **Financial Perfomance:** Which Ship Types Lead the Way?

**Revenue, profit margin**, and **cost per nautical mile** are crucial indicators of a ship’s financial performance. Higher revenue and profit margins reflect income generation, while cost per nautical mile assesses operational efficiency, including fuel, crew wages, and maintenance. A lower cost per nautical mile indicates better efficiency and enhances profitability.

The chart, sorted by revenue, shows that:

-   **Revenue and Profitability:** Revenue is similar across ship types (ranging from 500K to 595K), profit margins vary significantly from 7.4% to 36.6%.

-   **Cost Efficiency**: The Medium Fish Carrier, with a cost per nautical mile of 1.84, stands out for its strong operational efficiency. On the other hand, the Medium Bulk Carrier has a higher cost per nautical mile, indicating poor cost control.

Although Kruskal-Wallis tests fail to reject the null hypothesis, suggesting similar distributions for margin, revenue, and cost per nautical mile across ship types, performance differences are still evident.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r

# Create a summary dataframe for total revenue per ship_engine for sorting purpose
ship_summary <- ship_cleaned %>%
  group_by(type_size) %>%
  summarise(mean_margin_all = mean(Margin_per_Voyage, na.rm = TRUE)) %>%
  arrange(mean_margin_all)

# Create the long format dataframe for rev & p >> column 1
ship_rev <- ship_cleaned %>%
    group_by(type_size) %>%
    summarise(
        avg_revenue = mean(Revenue_per_Voyage_k, na.rm = TRUE)) %>%
    pivot_longer(cols = c(avg_revenue), 
                names_to = "metric", 
                values_to = "value") 

# Create the long format dataframe for growth rate and margin >> column 2
ship_margin <- ship_cleaned %>%
    group_by(type_size) %>%
    summarise(
        avg_margin =mean(Margin_per_Voyage, na.rm = TRUE)

    ) %>%
    pivot_longer(cols = c(avg_margin), 
                names_to = "metric", 
                values_to = "value") 

# Create the long format dataframe for growth rate and margin >> column 3
ship_op_efficiency <- ship_cleaned %>%
    group_by(type_size) %>%
    summarise(
        avg_cost_nm = mean(Cost_per_nm, na.rm = TRUE)
    ) %>%
    pivot_longer(cols = c(avg_cost_nm), 
                names_to = "metric", 
                values_to = "value") 

# summary for tooltips
ship_metrics_summary <- ship_cleaned %>%
  group_by(type_size) %>%
  summarise(
    avg_revenue = mean(Revenue_per_Voyage_k, na.rm = TRUE),
    avg_margin = mean(Margin_per_Voyage, na.rm = TRUE),
    avg_cost_nm = mean(Cost_per_nm, na.rm = TRUE)
  )

# Create the combined dataframe with correct tooltips
ship_combined <- bind_rows(
    ship_rev %>% mutate(category = "Revenue"),
    ship_margin %>% mutate(category = "Profitability"),
    ship_op_efficiency %>% mutate(category = "Cost Efficiency")
) %>%
  left_join(ship_metrics_summary, by = "type_size") %>%
  mutate(
    tooltip = case_when(
      metric == "avg_revenue" ~ sprintf("Ship Type: %s\nRevenue: %.2f K", type_size, value),
      metric == "avg_margin" ~ sprintf("Ship Type: %s\nProfit Margin: %.2f%%", type_size, value),
      metric == "avg_cost_nm" ~ sprintf("Ship Type: %s\nCost per nm: %.2f", type_size, value)
    )
  )

# avg ref line 
avg_revenue <- mean(ship_metrics_summary$avg_revenue, na.rm = TRUE)
avg_margin <- mean(ship_metrics_summary$avg_margin, na.rm = TRUE)
avg_cost <- mean(ship_metrics_summary$avg_cost_nm, na.rm = TRUE)

# Plot with Facet & Hover
p <- ggplot(ship_combined, 
       aes(x = case_when(
           category == "Revenue" ~ factor(type_size, 
                                          levels = ship_summary$type_size),
           category == "Profitability" ~ factor(type_size, 
                                                levels = ship_summary$type_size),
           category == "Cost Efficiency" ~ factor(type_size, 
                                                  levels = ship_summary$type_size)
         ), 
           y = value,
           fill = metric)) +
  geom_bar_interactive(stat = "identity",
                       position = position_dodge(width = 0.7),
                       aes(tooltip = tooltip, 
                           data_id = type_size),
                       width = 0.5) +
  # Reference line using geom_hline
  geom_hline(data = data.frame(
    category = c("Revenue", "Profitability", "Cost Efficiency"),
    avg_value = c(avg_revenue, avg_margin, avg_cost)
  ),
    aes(yintercept = avg_value, linetype = "Mean*"),
    color = "black",
    size = 0.5
  ) +
  coord_flip() +
  facet_wrap(~ factor(category, 
                      levels = c("Profitability", "Revenue", "Cost Efficiency")),
             scales = "free_x") + 
  labs(
    title = "Sailing Towards Profit: Which Ship Types Lead the Way?",
    subtitle = "The Medium Fish Carrier reigns as the top performer, with a revenue of 595K and a profit margin of 36.6%. \nIn contrast, the Medium Bulk Carrier underperforms, generating 516K in revenue and the lowest margin at 7.4%",
    caption = "*Mean Margin = 21.3%\n*Mean Revenue = 523K\n*Mean Cost per nm = 2.31",
    x = "Ship Type",
    y = "",
    fill = "Metric"
  ) +
  theme_classic() +  
  scale_fill_manual(values = my_palette) +
  scale_linetype_manual(values = c("Mean*" = "dashed","Median"="dashed")) +
  guides(
    fill = guide_legend(order = 1),
    linetype = guide_legend(order = 2) #adding line type legend
  ) +
  theme(
    axis.text.y = element_text(size = 6,color="grey20"), 
    axis.text.x = element_text(size = 6,color="grey20"),  
    axis.title.x = element_text(size = 8,color="grey20"),
    axis.title.y = element_text(size = 8,color="grey20"),
    strip.text = element_text(size = 7, face = "bold"), 
    legend.position = "top",
    legend.title = element_text(size = 6),
    legend.key.size = unit(0.2, "cm"),
    legend.text = element_text(size = 6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.background = element_rect(fill = "#f3f1e9", color = NA),
    plot.title = element_text(size = 11,hjust = 0.5,face='bold'),
    plot.subtitle = element_markdown(size = 6, hjust = 0, lineheight = 1.1),
    plot.caption = element_text(size = 6,color="grey40"),
    plot.margin = margin(10, 50, 10 ,30), 
    panel.spacing = unit(1, "lines"),
    strip.placement = "outside",  
    strip.switch.pad.wrap = unit(2, "cm")
  )

tooltip_css <- "background-color:white; font-style: bold; font-size:10px; color:black; border-radius: 5px; margin: 3px; padding:3px;"  

# Convert to Interactive
girafe(
  code = print(p), 
  width_svg = 6,
  height_svg = 4,
  options = list(
    opts_hover(css = "stroke-width:3px; opacity: 1;"),
    opts_hover_inv(css = "opacity: 0.2;"),
    opts_tooltip(css = tooltip_css)
  ))
```

</details>
:::

```{r}
#| echo: false
#| fig-height: 6
#| fig-width: 12
#| out-extra: "style='max-width:100%; display: block;'"
#| out-width: 100%


# Create a summary dataframe for total revenue per ship_engine for sorting purpose
ship_summary <- ship_cleaned %>%
  group_by(type_size) %>%
  summarise(mean_margin_all = mean(Margin_per_Voyage, na.rm = TRUE)) %>%
  arrange(mean_margin_all)

# Create the long format dataframe for rev & p >> column 1
ship_rev <- ship_cleaned %>%
    group_by(type_size) %>%
    summarise(
        avg_revenue = mean(Revenue_per_Voyage_k, na.rm = TRUE)) %>%
    pivot_longer(cols = c(avg_revenue), 
                names_to = "metric", 
                values_to = "value") 

# Create the long format dataframe for growth rate and margin >> column 2
ship_margin <- ship_cleaned %>%
    group_by(type_size) %>%
    summarise(
        avg_margin =mean(Margin_per_Voyage, na.rm = TRUE)

    ) %>%
    pivot_longer(cols = c(avg_margin), 
                names_to = "metric", 
                values_to = "value") 

# Create the long format dataframe for growth rate and margin >> column 3
ship_op_efficiency <- ship_cleaned %>%
    group_by(type_size) %>%
    summarise(
        avg_cost_nm = mean(Cost_per_nm, na.rm = TRUE)
    ) %>%
    pivot_longer(cols = c(avg_cost_nm), 
                names_to = "metric", 
                values_to = "value") 

# summary for tooltips
ship_metrics_summary <- ship_cleaned %>%
  group_by(type_size) %>%
  summarise(
    avg_revenue = mean(Revenue_per_Voyage_k, na.rm = TRUE),
    avg_margin = mean(Margin_per_Voyage, na.rm = TRUE),
    avg_cost_nm = mean(Cost_per_nm, na.rm = TRUE)
  )

# Create the combined dataframe with correct tooltips
ship_combined <- bind_rows(
    ship_rev %>% mutate(category = "Revenue"),
    ship_margin %>% mutate(category = "Profitability"),
    ship_op_efficiency %>% mutate(category = "Cost Efficiency")
) %>%
  left_join(ship_metrics_summary, by = "type_size") %>%
  mutate(
    tooltip = case_when(
      metric == "avg_revenue" ~ sprintf("Ship Type: %s\nRevenue: %.2f K", type_size, value),
      metric == "avg_margin" ~ sprintf("Ship Type: %s\nProfit Margin: %.2f%%", type_size, value),
      metric == "avg_cost_nm" ~ sprintf("Ship Type: %s\nCost per nm: %.2f", type_size, value)
    )
  )

# avg ref line 
avg_revenue <- mean(ship_metrics_summary$avg_revenue, na.rm = TRUE)
avg_margin <- mean(ship_metrics_summary$avg_margin, na.rm = TRUE)
avg_cost <- mean(ship_metrics_summary$avg_cost_nm, na.rm = TRUE)

# Plot with Facet & Hover
p <- ggplot(ship_combined, 
       aes(x = case_when(
           category == "Revenue" ~ factor(type_size, 
                                          levels = ship_summary$type_size),
           category == "Profitability" ~ factor(type_size, 
                                                levels = ship_summary$type_size),
           category == "Cost Efficiency" ~ factor(type_size, 
                                                  levels = ship_summary$type_size)
         ), 
           y = value,
           fill = metric)) +
  geom_bar_interactive(stat = "identity",
                       position = position_dodge(width = 0.7),
                       aes(tooltip = tooltip, 
                           data_id = type_size),
                       width = 0.5) +
  # Reference line using geom_hline
  geom_hline(data = data.frame(
    category = c("Revenue", "Profitability", "Cost Efficiency"),
    avg_value = c(avg_revenue, avg_margin, avg_cost)
  ),
    aes(yintercept = avg_value, linetype = "Mean*"),
    color = "black",
    size = 0.5
  ) +
  coord_flip() +
  facet_wrap(~ factor(category, 
                      levels = c("Profitability", "Revenue", "Cost Efficiency")),
             scales = "free_x") + 
  labs(
    title = "Sailing Towards Profit: Which Ship Types Lead the Way?",
    subtitle = "The Medium Fish Carrier reigns as the top performer, with a revenue of 595K and a profit margin of 36.6%. \nIn contrast, the Medium Bulk Carrier underperforms, generating 516K in revenue and the lowest margin at 7.4%",
    caption = "*Mean Margin = 21.3%\n*Mean Revenue = 523K\n*Mean Cost per nm = 2.31",
    x = "Ship Type",
    y = "",
    fill = "Metric"
  ) +
  theme_classic() +  
  scale_fill_manual(values = my_palette) +
  scale_linetype_manual(name = "Reference",
                        values = c("Mean*" = "dashed","Median"="dashed")) +
  guides(
    fill = guide_legend(order = 1),
    linetype = guide_legend(order = 2) #adding line type legend
  ) +
  theme(
    axis.text.y = element_text(size = 6,color="grey20"), 
    axis.text.x = element_text(size = 6,color="grey20"),  
    axis.title.x = element_text(size = 8,color="grey20"),
    axis.title.y = element_text(size = 8,color="grey20"),
    strip.text = element_text(size = 7, face = "bold"), 
    legend.position = "top",
    legend.title = element_text(size = 6),
    legend.key.size = unit(0.2, "cm"),
    legend.text = element_text(size = 6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.background = element_rect(fill = "#f3f1e9", color = NA),
    plot.title = element_text(size = 11,hjust = 0.5,face='bold'),
    plot.subtitle = element_text(size = 6, hjust = 0, lineheight = 1.1),
    plot.caption = element_text(size = 6,color="grey40"),
    plot.margin = margin(10, 50, 10 ,30), 
    panel.spacing = unit(1, "lines"),
    strip.placement = "outside",  
    strip.switch.pad.wrap = unit(2, "cm")
  )

tooltip_css <- "background-color:white; font-style: bold; font-size:10px; color:black; border-radius: 5px; margin: 3px; padding:3px;"  

# Convert to Interactive
girafe(
  code = print(p), 
  width_svg = 6,
  height_svg = 4,
  options = list(
    opts_hover(css = "stroke-width:3px; opacity: 1;"),
    opts_hover_inv(css = "opacity: 0.2;"),
    opts_tooltip(css = tooltip_css)
  ))
```

### 5.3.1 Normality and Kruskal-Wallis Test

::: panel-tabset
## Normality Test

The result from Shapiro-Wilk test shows siginificant evidence (p-value \<0.05) to reject the null hypothesis and conclude that the attribute "Margin_per_Voyage","Revenue_per_Voyage_k" and "Cost_per_nm" do not follow normal distribution . Thus, **non parametric** Kruskal-Wallis Tests are performed.

```{r}
shapiro.test(ship_cleaned$Margin_per_Voyage)
shapiro.test(ship_cleaned$Revenue_per_Voyage_k)
shapiro.test(ship_cleaned$Cost_per_nm)
```

### Kruskal-Wallis Test

Three tests all show p-value \> 0.05, failing to reject the null hypothesis.

```{r}
# Kruskal-Wallis test with both Route_Type and Ship_Type
kruskal_test_margin <- kruskal.test(Margin_per_Voyage ~ type_size, data = ship_cleaned)
kruskal_test_rev <- kruskal.test(Revenue_per_Voyage_k ~ type_size, data = ship_cleaned)
kruskal_test_costnm <- kruskal.test(Cost_per_nm ~ type_size, data = ship_cleaned)

print(kruskal_test_margin)
print(kruskal_test_rev)
print(kruskal_test_costnm)
```
:::

## 5.4 **Operational Performance:** Does Maintenance status and Engine Type Influence Operational Cost?

As marine regulations tighten, ship maintenance becomes crucial, as poor upkeep leads to higher operational costs. The plot below shows that **Diesel and Heavy Fuel Oil engines** with **critical maintenance status** also incur higher costs.

To confirm statistical differences, we conducted a **Kruskal-Wallis test** to assess whether **operational cost per voyage**varies by **engine type, maintenance status, and their interaction**. While neither engine type nor maintenance status alone has a significant impact, there is **strong evidence of an interaction effect** (**p-value = 0.001**). This suggests that operational costs depend on the combination of these factors, highlighting the need to consider both when managing expenses.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
# Create the plot
p <- ggplot(ship_cleaned, aes(x = Cost_per_Voyage_k, 
                                  y =  Maintenance_Status,
                                  fill = Engine_Type)) +   
  geom_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = 4,
                      alpha = 0.6,
                      scale = 0.8) +
  geom_boxplot(aes(x = Cost_per_Voyage_k), 
               width = 0.2, 
               position = position_dodge(width = 0.8), 
               alpha = 0.6,
               outliers = TRUE) +
  coord_flip()+
  scale_fill_manual(values = my_palette) +
  facet_grid(~Engine_Type)+
  theme_ridges() +
  labs(title = "Does Maintenance x Engine Type Influence Cost?",
       subtitle = "Yes, it does affect. The Kruskal-Wallis tests show there's an interaction effect (p-value = 0.001) \nbetween Maintenance Status and Engine Type on Operational Cost.",
       x="Operational Cost ('000USD)" ,
       y="Maintenance\n Status")+
  theme(
    axis.text.y = element_text(size = 7), 
    axis.text.x = element_text(size = 7),  
    axis.title.x = element_text(size = 8),
    axis.title.y = element_text(size = 8),
    strip.text = element_text(size = 9, face = "bold"),  # Facet title size
    plot.margin = margin(10, 20, 10, 20),  
    legend.position = "none",
    legend.title = element_text(size=8),
    legend.key.size = unit(0.3, "cm"),
    legend.text = element_text(size=6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.title = element_text(size=13,hjust=0),
    plot.subtitle = element_text(size=8,hjust=0),
    plot.background = element_rect(fill = "#f3f1e9",color = NA)
    )
    
plot(p)
    
```

</details>
:::

```{r}
#| echo: false

# Create the plot
p <- ggplot(ship_cleaned, aes(x = Cost_per_Voyage_k, 
                                  y =  Maintenance_Status,
                                  fill = Engine_Type)) +   
  geom_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE,
                      quantiles = 4,
                      alpha = 0.6,
                      scale = 0.8) +
  geom_boxplot(aes(x = Cost_per_Voyage_k), 
               width = 0.2, 
               position = position_dodge(width = 0.8), 
               alpha = 0.6,
               outliers = TRUE) +
  coord_flip()+
  scale_fill_manual(values = my_palette) +
  facet_grid(~Engine_Type)+
  theme_ridges() +
  labs(title = "Does Maintenance x Engine Type Influence Cost?",
       subtitle = "Yes, it does affect. The Kruskal-Wallis tests show there's an interaction effect (p-value = 0.001) \nbetween Maintenance Status and Engine Type on Operational Cost.",
       x="Operational Cost ('000USD)" ,
       y="Maintenance\n Status")+
  theme(
    axis.text.y = element_text(size = 7), 
    axis.text.x = element_text(size = 7),  
    axis.title.x = element_text(size = 8),
    axis.title.y = element_text(size = 8),
    strip.text = element_text(size = 9, face = "bold"),  # Facet title size
    plot.margin = margin(10, 20, 10, 20),  
    legend.position = "none",
    legend.title = element_text(size=8),
    legend.key.size = unit(0.3, "cm"),
    legend.text = element_text(size=6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.title = element_text(size=13,hjust=0),
    plot.subtitle = element_text(size=8,hjust=0),
    plot.background = element_rect(fill = "#f3f1e9",color = NA)
    )
    
plot(p)
```

### 5.4.1 Normality and Kruskal-Wallis Test

::: panel-tabset
## Normality Test

The result from Shapiro-Wilk test shows siginificant evidence (p-value \<0.05) to reject the null hypothesis and conclude that the attribute "Cost per Voyage" does not follow normal distribution . Thus **non parametric** is used in the following test.

```{r}
shapiro.test(ship_cleaned$Cost_per_Voyage_k)
```

## Kruskal-Wallis Test

```{r}
# Kruskal-Wallis test with both Route_Type and Ship_Type
kruskal_test_engine <- kruskal.test(Cost_per_Voyage_k ~ Engine_Type, data = ship_cleaned)
kruskal_test_maintain <- kruskal.test(Cost_per_Voyage_k ~ Maintenance_Status, data = ship_cleaned)

# Create a new interaction factor
ship_cleaned$Interaction <- interaction(ship_cleaned$Maintenance_Status, ship_cleaned$Engine_Type)

# Kruskal-Wallis test on the interaction factor
kruskal_interaction <- kruskal.test(Cost_per_Voyage_k ~ Interaction, data = ship_cleaned)

print(kruskal_test_engine)
print(kruskal_test_maintain)
print(kruskal_interaction)
```
:::

## 5.5 **Operational Performance**: Which Ship Types Have Shorter TAT?

Turnaround Time (TAT) measures the time a ship spends in port for operations like unloading, loading, refueling, and maintenance before its next voyage. **Shorter turnaround times increase operational efficiency by allowing more voyages and reducing port costs**.

The plot reveals an unexpected trend:

-   **Large ships** generally have **shorter** turnaround times across ship types. Only **transoceanic container ships, short-haul tankers, and coastal fish carriers** exceed the median TAT.

-   In contrast, **small and medium ships** tend to have **longer turnaround times**.

A **Kruskal-Wallis test** (p = 0.029) confirms **significant differences** in turnaround times across ship sizes. **Dunn's Test** further shows that **medium ships have longer TAT than large ships**, indicating that **ship size is a key factor** in turnaround efficiency.

::: toggle
<details>

<summary>**Display Code**</summary>

``` r
# reorder factor level
# Calculate median turnaround time per Ship Type
turnaround_medians <- ship_cleaned %>%
  group_by(Ship_Type) %>%
  summarize(median_turnaround = median(Turnaround_Time_hours, na.rm = TRUE))

# reorder factor level
ship_cleaned$Route_Type <- factor(ship_cleaned$Route_Type, 
                                  levels = c("Coastal", "Short-haul",
                                             "Long-haul", "Transoceanic"))

p <- ggplot(ship_cleaned, aes(x = Turnaround_Time_hours, 
                                  y = Route_Type,
                                  fill = Ship_Type,
                              color = Ship_Type)) +   
  geom_boxplot(aes(x = Turnaround_Time_hours), 
               width = 0.4, 
               position = position_dodge(width = 1), 
               alpha = 0.6,
               outliers = TRUE) +
  #stat_dots(binwidth = NA,dotsize = 1)+ #
  # Add Median Turnaround Time reference line
  geom_vline(data = turnaround_medians, 
             aes(xintercept = median_turnaround, linetype = "Median"), 
             color = "black", size = 0.3) +
  # Add "Median" to legend
  scale_linetype_manual(name = "Reference", values = c("Median" = "dotted")) +
  scale_fill_manual(values = my_palette) +
  facet_grid(Ship_Size~Ship_Type)+
  theme_ridges() +
  labs(title = "Which ship types have shorter turnaround times?",
       subtitle = "Shorter turnaround times enhance efficiency by enabling more voyages and lowering port costs.\nSurprisingly, large ships have shorter turnaround times.",
       x="Turnaround Time\n(Hours)" ,
       y="Route Type")+
  theme(
    axis.text.y = element_text(size = 7), 
    axis.text.x = element_text(size = 7),  
    axis.title.x = element_text(size = 8),
    axis.title.y = element_text(size = 8),
    strip.text = element_text(size = 9, face = "bold"), # Facet title size
    plot.margin = margin(10, 20, 10, 20),  
    legend.position = "top",
    legend.title = element_text(size=8),
    legend.key.size = unit(0.3, "cm"),
    legend.text = element_text(size=6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.title = element_text(size=12,hjust=0),
    plot.subtitle = element_text(size=8,hjust=0),
    plot.background = element_rect(fill = "#f3f1e9",color = NA)
    )
    
plot(p)
```

</details>
:::

```{r}
#| echo: false

# Calculate median turnaround time per Ship Type
turnaround_medians <- ship_cleaned %>%
  group_by(Ship_Type) %>%
  summarize(median_turnaround = median(Turnaround_Time_hours, na.rm = TRUE))

# reorder factor level
ship_cleaned$Route_Type <- factor(ship_cleaned$Route_Type, 
                                  levels = c("Coastal", "Short-haul",
                                             "Long-haul", "Transoceanic"))

p <- ggplot(ship_cleaned, aes(x = Turnaround_Time_hours, 
                                  y = Route_Type,
                                  fill = Ship_Type,
                              color = Ship_Type)) +   
  geom_boxplot(aes(x = Turnaround_Time_hours), 
               width = 0.4, 
               position = position_dodge(width = 1), 
               alpha = 0.6,
               outliers = TRUE) +
  #stat_dots(binwidth = NA,dotsize = 1)+ #
  # Add Median Turnaround Time reference line
  geom_vline(data = turnaround_medians, 
             aes(xintercept = median_turnaround, linetype = "Median"), 
             color = "black", size = 0.3) +
  # Add "Median" to legend
  scale_linetype_manual(name = "Reference", values = c("Median" = "dotted")) +
  scale_fill_manual(values = my_palette) +
  facet_grid(Ship_Size~Ship_Type)+
  theme_ridges() +
  labs(title = "Which ship types have shorter turnaround times?",
       subtitle = "Shorter turnaround times enhance efficiency by enabling more voyages and lowering port costs.\nSurprisingly, large ships have shorter turnaround times.",
       x="Turnaround Time\n(Hours)" ,
       y="Route Type")+
  theme(
    axis.text.y = element_text(size = 7), 
    axis.text.x = element_text(size = 7),  
    axis.title.x = element_text(size = 8),
    axis.title.y = element_text(size = 8),
    strip.text = element_text(size = 9, face = "bold"), # Facet title size
    plot.margin = margin(10, 20, 10, 20),  
    legend.position = "top",
    legend.title = element_text(size=8),
    legend.key.size = unit(0.3, "cm"),
    legend.text = element_text(size=6),
    legend.background = element_rect(fill = "#f3f1e9"),
    panel.background = element_rect(fill = "#f3f1e9"),
    plot.title = element_text(size=12,hjust=0),
    plot.subtitle = element_text(size=8,hjust=0),
    plot.background = element_rect(fill = "#f3f1e9",color = NA)
    )
    
plot(p)
```

### 5.5.1 Normality and Kruskal-Wallis Test

::: panel-tabset
## Normality Test

The result from Shapiro-Wilk test shows siginificant evidence (p-value \<0.05) to reject the null hypothesis and conclude that the attribute "Turnaround Time" does not follow normal distribution . Thus **non parametric** is used in the following test.

```{r}
shapiro.test(ship_cleaned$Turnaround_Time_hours)
```

## Kruskal-Wallis Test

```{r}
# Kruskal-Wallis test with both Route_Type and Ship_Type
kruskal.test(Turnaround_Time_hours ~ Ship_Size, data = ship_cleaned)

```

```{r}
library(dunn.test)
mean_tat <- ship_cleaned %>%
  group_by(Ship_Size) %>%
  summarise(mean_turnaround_time = mean(Turnaround_Time_hours, na.rm = TRUE))

print(mean_tat)
dunn.test(ship_cleaned$Turnaround_Time_hours, ship_cleaned$Ship_Size, kw = TRUE)
```
:::

# 6 Summary

This analysis of ship performance in the Gulf of Guinea identifies key factors impacting operational cost and financial outcomes, with a focus on **load percentage among seasons**, **engine type**, **maintenance status**, **ship type and size, turnaround time** as well as **profitability**.

The key findings are:

-   The correlation between **profit** and **average load percentage** was found to be weak (**0.03**) and statistically insignificant (**p-value = 0.097**), suggesting that while load percentage may impact profit, other operational factors likely have a more substantial influence on financial performance.

-   As stricter marine regulations impose higher maintenance demands, ships with **Diesel** and **Heavy Fuel Oil engines** in **critical maintenance status** incur significantly statistical higher operational costs, emphasizing the need to consider both factors together when managing operational expenses.

-   In terms of **turnaround time (TAT)**, large ships showed the shorter turnaround time compared to medium ships with statistical significance, indicating ship size is an important factor to TAT.

-   Finally, key financial indicators—**revenue**, **profit margin**, and **cost per nautical mile**—reveal variations in performance. While revenue levels are similar across ship types, profit margins show significant variation. Although statistical tests show no significant differences in these indicators, clear performance distinctions exist between ship types.

# 7 Reference

-   Mr. Marine. (2024). Types of Ships – What are the differences?. <https://mr-marinegroup.com/types-of-ships/>

-   Mark Ian Dacera. (2023). Key Performance Indicators (KPIs) in Maritime Business: Driving Growth and Excellence. <https://www.linkedin.com/pulse/key-performance-indicators-kpis-maritime-business-dacera-mba-mm-kx5pe/>

-   
